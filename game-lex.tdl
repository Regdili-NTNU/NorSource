;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;

til_opphøye-til := som-n-pred-comp &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY predcomp-til ] ].

; PREP-CLAUSE
på_clause := prep-clause-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-clse]].

om_clause := prep-clause-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-clse]].

over_clause := prep-clause-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY over-clse]].

av_clause := prep-clause-word &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-clse]].

med_clause := prep-clause-word &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-clse]].

på_atelop := prep-atelic-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-atelop]].

av_atelop := prep-atelic-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-atelop]].

hvorvidt_subord := y-n-quest-subord-comp &
 [ STEM < "hvorvidt" >,
   SYNSEM.LKEYS.KEYREL.PRED "hvorvidt_rel" ].

; PREP-SEL
om_sel := prep-word-sel &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-fct-spec ]].

i_sel := prep-word-sel &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-fct-spec ] ].

til_sel := prep-word-sel &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-fct-spec ]].

etter_sel := prep-word-sel &
  [ STEM < "etter" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY etter-fct-spec ]].

med_sel := prep-word-sel &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-fct-spec ]].

for_sel := prep-word-sel &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-fct-spec ]].

av_sel := prep-word-sel &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-fct-spec ]].

på_sel := prep-word-sel &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-fct-spec ]].

fra_sel := prep-word-sel &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY fra-fct-spec ]].

under_arg1prop-epon_p := prep-arg1prop-epon-lxm &
  [ STEM < "under" >,
    SYNSEM.LKEYS.KEYREL.PRED "_under_p_rel" ].

på_detachposs := prep-detachposs-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-possrais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-detch]].

i_detachposs := prep-detachposs-word &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-possrais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-detch]].

ved_advprtcl := adv-particle-word &
  [ STEM < "ved" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY ved-pcl],
    SYNSEM.LKEYS.KEYREL.PRED "_ved_pcl_rel"].

på_partcl := adv-particle-word &
  [ STEM < "på" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY på-pcl,
            LKEYS.KEYREL.PRED "_på_pcl_rel"]].

med_partcl := adv-particle-word &
  [ STEM < "med" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY med-pcl,
            LKEYS.KEYREL.PRED "_med_pcl_rel"]].

ut_partcl := adv-particle-word &
  [ STEM < "ut" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY ut-pcl,
            LKEYS.KEYREL.PRED "_ut-of-appearance_a_rel"]].

opp_partcl := adv-particle-word &
  [ STEM < "opp" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY opp-pcl,
            LKEYS.KEYREL.PRED "_opp_pcl_rel"]].

fram_partcl := adv-particle-word &
  [ STEM < "fram" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY frem-pcl,
            LKEYS.KEYREL.PRED "_frem_pcl_rel"]].

frem_partcl := adv-particle-word &
  [ STEM < "frem" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY frem-pcl,
            LKEYS.KEYREL.PRED "_frem_pcl_rel"]].

til_partcl := adv-particle-word &
  [ STEM < "til" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY til-pcl,
            LKEYS.KEYREL.PRED "_til_pcl_rel"]].

av_partcl := adv-particle-word &
  [ STEM < "av" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY av-pcl,
            LKEYS.KEYREL.PRED "_av_pcl_rel"]].


; COMPLEMENTIZER-LIKE PREPOSITIONS (NON-PREDSORT)

når_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_når-same_time_c_rel"].

da_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "da" >,
    SYNSEM.LKEYS.KEYREL.PRED "_da-same_time_c_rel"].

inntil_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_inntil-concluded_at_time-rel"].

fra_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra-initiated_at_time_rel"].


da_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "da" >,
    SYNSEM.LKEYS.KEYREL.PRED "_da-same_time_c_rel"].

når_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_når-same_time_c_rel"].

inntil_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_inntil-concluded_at_time-rel"].

fra_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra-initiated_at_time_rel"].

der_prep-plce := prep-s-word-reg-plce &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED "_der-same_place_as_rel"].

; EAA removed for efficiency purposes. Too few constraints.
; Example: "[Hvor mange timer i uka jobber] er du?"
; reactivated LH080713
hvor_prep-plce := prep-s-word-reg-plce &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-same_place_as_rel"].

; "overalt der"
der_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED "_der-same_place_as_rel"].

; "overalt hvor"
hvor_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-same_place_as_rel"].

hvis_prep-cond := prep-s-word-reg-cond &
 [ STEM < "hvis" >,
   SYNSEM.LKEYS.KEYREL.PRED "hvis-depend-on_rel" ].

; PARTITIVE PREP

av_part-spec-q := part-q-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-card := part-card-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-mass := part-q-mass-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-measure := part-measurenp-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-adj := part-adj-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-adj2 := part-adj-prep2-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_measure := measure-out-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-measout] ].

med_measure := measure-out-prep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-measout] ].


; POSS-PREP 
til_poss := prep-word-poss &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_til-possessed_by_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-poss ] ].

av_poss := prep-word-poss &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av-possessed_by_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-poss ] ].

for_poss := prep-word-poss &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for-possessed_by_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-poss ] ].

; PREP-EXPL 
til_expl-dep := prep-expl-dep-word &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "til-expl-dep_rel",
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY til-rais]].

med_expl-dep := prep-expl-dep-word &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "med-expl-dep_rel",
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY med-rais] ].

som_prep-expl-dep := prep-expl-dep-word &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "som-expl-dep_rel",
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY som-rais]].

; to see what wrong...
som_prep-s := prep-s-expl-dep-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY som-rais] ].

med_rais := prep-rais-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_med_p-rais_rel"] !>  ].

av_rais := prep-rais-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_av_p-rais_rel"] !> ].

fra_rais := prep-rais-word &
  [ STEM < "fra" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fra-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fra_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_fra_p-rais_rel"] !>  ].

over_rais := prep-rais-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_over_p-rais_rel"] !>  ].

på_rais := prep-rais-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_på_p-rais_rel"] !>  ].

om_rais := prep-rais-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_om_p-rais_rel"] !> ].

til_rais := prep-rais-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-rais ],
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_til_p-rais_rel"] !>  ].

for_rais := prep-rais-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_p-rais_rel"] !> ].

i_rais := prep-rais-word &
  [ STEM < "i" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_i_p-rais_rel"] !> ].

for_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rais_rel"].

etter_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "etter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-k,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-rais_rel"].



; PREP-REL 
for_rel_p := rel-prep-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rel_rel" ].

om_rel_p := rel-prep-word &
  [ STEM < "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY om-k,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rel_rel" ].

over_rel_p := rel-prep-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rel_rel" ].

av_rel-p := rel-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rel_rel" ].

med_rel-p := rel-prep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rel_rel" ].

på_rel_p := rel-prep-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

til_rel_p := rel-prep-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY til-k,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rel_rel" ].

av_agent := prep-word-agent &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_performed-by_rel"  ].


;;;; comparatives ;;;

mer_cmpar-reg := comparative-adv-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mest_superlat := superlative-adv-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mest-exceed_c_rel"].

mer_vp-mod-cmpar-reg := comparative-adv-vp-mod-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mest_vp-mod-superlat := superlative-adv-vp-mod-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mest-exceed_c_rel"].

mer_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mer_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mindre_cmpar-reg := comparative-adv-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].

mindre_vp-mod-cmpar-reg := comparative-adv-vp-mod-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].

mindre_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].

mindre_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].


enn_cmpardep-reg := cmpar-dep-reg-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar ].

som_cmpardep-reg := cmpar-dep-reg-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardiff-n := cmpar-dep-diff-for-noun-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar ].

som_cmpareq-n := cmpar-dep-equal-for-noun-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardep-close := cmpar-dep-close-word &
  [ STEM < "enn" >].

like := comparative-adv-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED "_equate_c_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

for := comparative-adv-word &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_excessive_c_rel"].

slik_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "slik" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slik_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

egen_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "egen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_egen_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

egen_masc-weak := ordinal-word &
  [ STEM < "egen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LKEYS.KEYREL.CARG "own-rel"].

eget_neut-weak := ordinal-word &
  [ STEM < "eget" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LKEYS.KEYREL.CARG "own-rel"].


;TODO add neuter form


;;s-adv
ikke_s-adv := s-operadv-init-word &
  [ STEM < "ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ikke-neg_adv_rel"].

ei_s-adv := s-operadv-init-word &
  [ STEM < "ei" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ei-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ei-neg_adv_rel"].

neppe_s-adv := s-operadv-init-word &
  [ STEM < "neppe" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY neppe-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neppe_adv_rel"].

heller_s-adv := s-operadv-init-word &
  [ STEM < "heller" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY heller-k,
    SYNSEM.LKEYS.KEYREL.PRED "_heller_adv_rel"].

sannsynligvis_s-adv := s-operadv-init-word &
  [ STEM < "sannsynligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY sannsynligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sannsynligvis_adv_rel"].

antagelig_s-adv := s-operadv-init-word &
  [ STEM < "antagelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antagelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakelig_adv_rel"].


kanskje_s-adv := s-operadv-init-word &
  [ STEM < "kanskje" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_kanskje_adv_rel"].

så_s-adv := s-operadv-init-word &
  [ STEM < "så" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY så-k,
    SYNSEM.LKEYS.KEYREL.PRED "_så_adv_rel"].

aldri_s-adv := s-operadv-init-word &
  [ STEM < "aldri" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY aldri-k,
    SYNSEM.LKEYS.KEYREL.PRED "_aldri_adv_rel"].

sjelden_s-adv := s-operadv-init-final-word &
  [ STEM < "sjelden" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY sjelden-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sjelden_a_rel"].

ofte_s-adv := s-operadv-init-final-word &
  [ STEM < "ofte" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ofte-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ofte_adv_rel"].

nettopp_s-adv := s-operadv-stnd-word &
  [ STEM < "nettopp" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nettopp-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nettopp_adv_rel"].

akkurat_s-adv := s-operadv-stnd-word &
  [ STEM < "akkurat" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY akkurat-k,
    SYNSEM.LKEYS.KEYREL.PRED "_akkurat_adv_rel"].

altså_s-adv := s-operadv-init-final-word &
  [ STEM < "altså" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY altså-k,
    SYNSEM.LKEYS.KEYREL.PRED "_altså_adv_rel"].

fremdeles_s-adv := s-operadv-init-final-word &
  [ STEM < "fremdeles" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fremdeles-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fremdeles_adv_rel"].

også_s-adv := s-operadv-final-word &
  [ STEM < "også" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY også-k,
    SYNSEM.LKEYS.KEYREL.PRED "_også_adv_rel"].

forresten_s-adv := s-operadv-init-final-word &
  [ STEM < "forresten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forresten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_adv_rel"].

selvsagt_s-adv := s-operadv-init-final-word &
  [ STEM < "selvsagt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY selvsagt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_selvsagt_adv_rel"].

vel_s-adv := s-operadv-init-word &
  [ STEM < "vel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_vel_adv_rel"].

gjerne_s-adv := s-operadv-stnd-word &
  [ STEM < "gjerne" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY gjerne-k,
    SYNSEM.LKEYS.KEYREL.PRED "_gjerne_adv_rel"].

nok_s-adv := s-operadv-stnd-word &
  [ STEM < "nok" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nok-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_adv_rel"].

ellers_s-adv := s-operadv-stnd-word &
  [ STEM < "ellers" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ellers-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ellers_adv_rel"].

deretter_s-adv := s-operadv-init-final-word &
  [ STEM < "deretter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY deretter-k,
    SYNSEM.LKEYS.KEYREL [PRED "deretter_rel"]].

istedet_s-adv := s-operadv-init-word &
  [ STEM < "istedet" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_istedet_rel"]].

slik_s-adv := s-operadv-init-word &
  [ STEM < "slik" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY slik-k,
    SYNSEM.LKEYS.KEYREL [PRED "_slik_rel"]].

sammen_m-adv := adv-word-reg &
  [ STEM < "sammen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sammen_adv_rel"].

alene_m-adv := adv-word-reg &
  [ STEM < "alene" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alene_adv_rel"].

lett_adv := adv-word-reg &
  [ STEM < "lett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lett_adv_rel"].

greit_adv := adv-word-reg &
  [ STEM < "greit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_greit_adv_rel"].

mye_adv := adv-word-vp-mod &
  [ STEM < "mye" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_adv_rel"].

lite_adv := adv-word-vp-mod &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_adv_rel"].

litt_adv := adv-word-vp-mod &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_adv_rel"].



;; refl-adv
selv_refl := refl-adv-word &
  [ STEM < "selv" > ].

selv_regadv := adv-word-reg &
  [ STEM < "selv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_selv_adv_rel" ].

sjøl_refl := refl-adv-word &
  [ STEM < "sjøl" > ].

sjøl_regadv := adv-word-reg &
  [ STEM < "sjøl" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sjøl_adv_rel" ].


hvor_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-at-which-place_adv_rel"].

når_wh-regadv := wh-adv-word-reg &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_når-at-which-time_adv_rel"].

hvorfor_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorfor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorfor-for-which-reason_adv_rel"].

hvordan_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvordan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvordan-in-which-manner_adv_rel"].

hvor_wh-orientadv := wh-orient-adv-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-at-which-place_adv_rel"].

hvorvidt_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorvidt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorvidt-to-what-extent_adv_rel"].


;;;;;;; COMPLEMENTIZERS, SELECTED PREPOSITIONS and more

å_inf-comp := inf-comp &
  [ STEM < "å" >].

å_arb-inf-comp := inf-arbref-comp &
  [ STEM < "å" >].

at_subord := decl-subord-comp &
  [ STEM < "at" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-at,
    SYNSEM.LKEYS.KEYREL.PRED "_at_comp_rel"].

det_subord := pre-subord-comp &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "_det_comp_rel"].

; "virke som"
som_subord := decl-subord-comp &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_som_rel"].

om_y-n-subord := y-n-quest-subord-comp &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_comp_rel"].

dersom_comp := prep-s-word-reg-cond &
 [ STEM < "dersom" >,
   SYNSEM.LKEYS.KEYREL.PRED "dersom-depend-on_rel" ].

forat_comp := prep-s-word-reg-cond &
 [ STEM < "forat" >,
   SYNSEM.LKEYS.KEYREL.PRED "forat-purpose-of_rel" ].


fordi_comp := prep-s-word-reg-cond &
 [ STEM < "fordi" >,
   SYNSEM.LKEYS.KEYREL.PRED "fordi-cause-of_rel" ].

for_comp := prep-s-word-reg-cond &
 [ STEM < "for" >,
   SYNSEM.LKEYS.KEYREL.PRED "for-cause-of_rel" ].

siden_comp := prep-s-word-reg-cond &
 [ STEM < "siden" >,
   SYNSEM.LKEYS.KEYREL.PRED "siden-cause-of_rel" ].

mens_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "mens" >,
   SYNSEM.LKEYS.KEYREL.PRED "_mens-same_time_c_rel" ].

om_comp_cond := prep-s-word-reg-cond &
 [ STEM < "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "om-cond_rel" ].

; the "som" that sits in COMP. Combines with N by 
som_fillerrelpron := som_filler-relpron &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-fillerrelprn ].

; the "som" that sits in subject position. Combines with N by 
som_subjrelpron := som_subj-relpron &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-subjrelprn ].

som_subjgap := som-resumpt-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-subjgap ].

;for_anse-for-å := som-or-for-comp &
for_anse-for-å := for-comp &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-pred-inf,
   SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_eq_rel"] !>,
   SYNSEM.LOCAL.CONT.HCONS <!  !>].

som_adj-pred-clse := som-adj-pred-clse-comp &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-adj ].

som_stille-som-n := som-n-pred-comp &
  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-n ].

som_synes-som-a := som-adj-pred-pp-comp &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-adj ].

så_connect := p-adv-connect-adv-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL [PRED "_så_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY så-conn ]].

deretter_connect := p-adv-connect-adv-word &
  [ STEM < "deretter" >,
    SYNSEM.LKEYS.KEYREL [PRED "_deretter_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY deretter-conn ]].

og_p-adv-connect := p-adv-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og_v-connect := v-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og_a-connect := a-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

og_n-connect := n-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

men_v-connect := v-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

men_a-connect := a-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

men_n-connect := n-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men-connect_rel"]].

; for 'såvel ... som'
som_n-connect := n-connect-word &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL [PRED "_som-connect_rel"]].

eller_p-adv-connect := p-adv-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_v-connect := v-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_a-connect := a-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller_n-connect := n-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-connect_rel"]].

både_corrconnect := correl-pos-connect-word &
  [ STEM < "både" >,
    SYNSEM.LKEYS.KEYREL.PRED "_både-set-asserted_rel" ].

enten_corrconnect := correl-pos-connect-word &
  [ STEM < "enten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_enten-set-asserted_rel" ].

kone_mascorfem := mascorfem-reganim-noun-lxm &
  [ INFLECTION light-e,
    STEM < "kone" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reganim,
    SYNSEM.LKEYS.KEYREL.PRED "_kone_n_rel"].

under_relinan := neut-relinan-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "under" >,
   SYNSEM.LKEYS.KEYREL.PRED "_under_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY rel-under  ].

hundre_numb := neut-measure-amount-noun-lxm &
 [ INFLECTION light-e-nshort,
   STEM < "hundre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hundre_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

; "tre tusen"
tusen_numb := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "tusen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tusen_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

; measure etc. nouns

par_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "par" >,
   SYNSEM.LKEYS.KEYREL.PRED "_par_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc].

dusin_neut-meas := neut-measure-amount-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "dusin" >,
   SYNSEM.LKEYS.KEYREL.PRED "_dusin_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-pl-spc ].

kilo_neut-meas := mascorneut-measure-weight-noun-lxm &
  [ INFLECTION infl_m_nshort,
   STEM < "kilo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kilo_n_rel"].

kg_neut-meas := mascorneut-measure-weight-noun-lxm &
  [ INFLECTION infl_m_nshort,
   STEM < "kg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kilo_n_rel"].

time_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "time" >,
    INFLECTION light-e,
    SYNSEM.LKEYS.KEYREL.PRED "_time_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY timeperiod-noun].

minutt_neut-meas := neut-measure-time-noun-lxm &
 [ STEM < "minutt" >,
   INFLECTION final-full-nlong,
   SYNSEM.LKEYS.KEYREL.PRED "_minutt_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY timeperiod-noun ].

sekund_n_neut := neut-measure-time-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "sekund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sekund_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY timeperiod-noun ] ].

uke_n_mascorfem := mascorfem-measure-time-noun-lxm &
 [ INFLECTION light-e,
   STEM < "uke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uke_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY week-noun ] ].

år_neut-meas := neut-measure-time-noun-lxm &
 [ STEM < "år" >,
   INFLECTION final-full-nshort,
   SYNSEM.LKEYS.KEYREL.PRED "_år_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY year-noun ].

sommer_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "sommer" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_sommer_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY timemeas-noun ].

søndag_masc-meas := masc-measure-specifictime-noun-lxm &
  [ STEM < "søndag" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_søndag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

mandag_meas := masc-measure-specifictime-noun-lxm &
 [ STEM < "mandag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_mandag_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY weekday-noun ].

dag_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "dag" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_dag_n_rel" ].

morgen_meas := masc-measure-time-noun-lxm &
 [ STEM < "morgen" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_morgen_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].
 
kveld_meas := masc-measure-time-noun-lxm &
 [ STEM < "kveld" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_kveld_n_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

middag_meas := masc-measure-time-noun-lxm &
 [ STEM < "middag" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_middag_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY day-and-meal ].

natt_meas := mascorfem-measure-time-noun-lxm &
 [ STEM < "natt" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_natt_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY daytime-noun ].

gang_masc-meas := masc-measure-time-noun-lxm &
  [ STEM < "gang" >,
    INFLECTION final-full,
    SYNSEM.LKEYS.KEYREL.PRED "_gang_n_rel" ].

helg_n_mascorfem-meas := masc-measure-time-noun-lxm &
 [ INFLECTION final-full,
   STEM < "helg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helg_n_rel" ] ].

km_masc-meas := masc-measure-length-noun-lxm &
 [ STEM < "km" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_kilometer_n_rel" ].

meter_masc-meas := masc-measure-length-noun-lxm &
 [ STEM < "meter" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_meter_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY takes-sg-spc ].

krone_meas := mascorfem-measure-amount-noun-lxm &
 [ STEM < "krone" >,
   INFLECTION light-e,
   SYNSEM.LKEYS.KEYREL.PRED "_krone_n_rel" ].

vei_masc-dirnoun := masc-dir-noun-lxm &
  [ STEM < "vei" >,
    INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_vei_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vei-k ].

reise_masc-dirnoun := mascorfem-dir-noun-lxm &
  [ STEM < "reise" >,
    INFLECTION light-e,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reise-k ].

; had  one-dim-thing-vehicle, but then clash for 'hun går til bussen'. funny. Well, trying it again ...
buss_masc-dirnoun := masc-dir-noun-lxm &
  [ STEM < "buss" >,
    INFLECTION final-full,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-vehicle,
    SYNSEM.LKEYS.KEYREL.PRED "_buss_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY buss-k ].

;;; examples common nouns

gutt_masc-reganim := masc-reganim-noun-lxm &
  [ STEM < "gutt" >,
    INFLECTION final-full,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reganim,
    SYNSEM.LKEYS.KEYREL.PRED "_gutt_n_rel"].

ball_masc-reginan := masc-reginan-noun-lxm &
 [ STEM < "ball" >,
   INFLECTION final-full,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reginan,
   SYNSEM.LKEYS.KEYREL.PRED "_ball_n_rel" ].

mann_masc-reganim := masc-reganim-noun-lxm &
  [ STEM < "mann" >,
    INFLECTION final-full,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY reganim,
    SYNSEM.LKEYS.KEYREL.PRED "_mann_n_rel"].

; adj, some

interessert_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "interessert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessert_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kvalifisert_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "kvalifisert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kvalifisert_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

sjelden_regadj := stnd-adj-lxm &
  [ STEM < "sjelden" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sjelden_a_rel"].

; this adjective need not inflect in plural.
opptatt_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION finstr,
   STEM < "opptatt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_opptatt_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY av-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

glad_regobladj := stnd-obl-adj-lxm &
 [ INFLECTION finstr,
   STEM < "glad" >,
   SYNSEM.LKEYS.KEYREL.PRED "_glad_a_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY i-assoc ]]>,
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_regadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "hyggelig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs := abs0-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs-epon-inf := abs-adj-epon-infin-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

hyggelig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

;hyggelig_tough := tough-adj-lxm &
hyggelig_tough := abs-adj-tough-lxm &
  [ INFLECTION nonfstr,
    STEM < "hyggelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hyggelig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

vanskelig_abs-epon-inf := abs-adj-epon-infin-lxm &
 [ INFLECTION nonfstr,
   STEM < "vanskelig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vanskelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

vanskelig_tough := abs-adj-tough-lxm &
 [ INFLECTION nonfstr,
   STEM < "vanskelig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vanskelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

billig_abs := abs0-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "billig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_billig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

gratis_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "gratis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gratis_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].


; bcz it takes the forms oftere and oftest as adverb
ofte_stnd-adj := stnd-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "ofte" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ofte_a_rel" ].


trist_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "trist" >,
    SYNSEM.LKEYS.KEYREL.PRED "_trist_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

mulig_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

mulig_abs-epon-inf := abs-adj-epon-infin-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

mulig_abs := abs0-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

mulig_tough := abs-adj-tough-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

mulig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mulig_a_rel" ].

umulig_tough := abs-adj-tough-lxm &
  [ INFLECTION nonfstr,
    STEM < "umulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

umulig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "umulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umulig_a_rel" ].

umulig_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "umulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

umulig_abs-epon-inf := abs-adj-epon-infin-lxm &
  [ INFLECTION nonfstr,
    STEM < "umulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].

umulig_abs := abs0-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "umulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_umulig_a_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY absadj0 ].


fin_regadj := stnd-adj-lxm &
  [ INFLECTION finstr,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs-epon-inf := abs-adj-epon-infin-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

fin_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "fin" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fin_a_rel" ].

ren_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "ren" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ren_a_rel" ].

varm_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "varm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_varm_a_rel" ].

kald_abs := abs0-adj-lxm &
  [ INFLECTION finstr,
    STEM < "kald" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kald_a_rel" ].

; a placeholder, for "det er langt til Larvik" - see end of test-v-stnd
lang_abs-obl := abs-obl-adj-lxm &
  [ INFLECTION finstr,
    STEM < "lang" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lang_a_rel" ].

kjedelig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "kjedelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kjedelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

ny_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
  [ INFLECTION finstr,
    STEM < "ny" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ny_a_rel" ].

høy_regadj := stnd-adj-lxm &
  [ STEM < "høy" >,
    INFLECTION finstr,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_høy_a_rel" ].

gul_regadj := stnd-adj-lxm &
  [ STEM < "gul" >,
    INFLECTION finstr,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY color,
    SYNSEM.LKEYS.KEYREL.PRED "_gul_a_rel" ].



; PRONOUNS
jeg_perspron := 1st-sg-nom-pers-pron &
  [ STEM < "jeg" >].

meg_perspron := 1st-sg-acc-pers-pron &
  [ STEM < "meg" >].

vi_perspron := 1st-pl-nom-pers-pron &
  [ STEM < "vi" >].
oss_perspron := 1st-pl-acc-pers-pron &
  [ STEM < "oss" >].

du_perspron := 2nd-sg-nom-pers-pron &
  [ STEM < "du" >].
deg_perspron := 2nd-sg-acc-pers-pron &
  [ STEM < "deg" >].
dere_perspron := 2nd-pl-pers-pron &
  [ STEM < "dere" >].

han_perspron := 3rd-sg-masc-nom-pers-pron &
  [ STEM < "han" >,
    SYNSEM.LKEYS.KEYREL.PRED "han_pron_rel" ].
hun_perspron := 3rd-sg-fem-nom-pers-pron &
  [ STEM < "hun" >,
    SYNSEM.LKEYS.KEYREL.PRED "hun_pron_rel" ].

en_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "en" >,
    SYNSEM.LKEYS.KEYREL.PRED "en_pron_rel" ].
den_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "den" >,
    SYNSEM.LKEYS.KEYREL.PRED "den_pron_rel" ].
det_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "det_pron_rel" ].
denne_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "denne" >,
    SYNSEM.LKEYS.KEYREL.PRED "denne_pron_rel" ].
dette_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "dette" >,
    SYNSEM.LKEYS.KEYREL.PRED "dette_pron_rel" ].
disse_perspron := 3rd-pl-pers-pron &
  [ STEM < "disse" >,
    SYNSEM.LKEYS.KEYREL.PRED "disse_pron_rel" ].
ham_perspron := 3rd-sg-masc-acc-pers-pron &
  [ STEM < "ham" >,
    SYNSEM.LKEYS.KEYREL.PRED "ham_pron_rel" ].
han_perspron-acc := 3rd-sg-masc-acc-pers-pron &
  [ STEM < "han" >,
    SYNSEM.LKEYS.KEYREL.PRED "ham_pron_rel" ].
henne_perspron := 3rd-sg-fem-acc-pers-pron &
  [ STEM < "henne" >,
    SYNSEM.LKEYS.KEYREL.PRED "henne_pron_rel" ].
de_perspron := 3rd-pl-nom-pers-pron &
  [ STEM < "de" >,
    SYNSEM.LKEYS.KEYREL.PRED "de_pron_rel" ].
dem_perspron := 3rd-pl-acc-pers-pron &
  [ STEM < "dem" >,
    SYNSEM.LKEYS.KEYREL.PRED "dem_pron_rel" ].

meg_refl := 1st-sg-seg-pron &
  [ STEM < "meg" >].
oss_refl := 1st-pl-seg-pron &
  [ STEM < "oss" >].
deg_refl := 2nd-sg-seg-pron &
  [ STEM < "deg" >].
dere_refl := 2nd-pl-seg-pron &
  [ STEM < "dere" >].
seg_refl := 3rd-seg-pron &
  [ STEM < "seg" >].

; no more reciproc-pron
hverandre_recip := reciproc-pron &
  [ STEM < "hverandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_reciproc_rel"].


min_pre-poss := 1st-mascsg-poss-pron-pre &
  [ STEM < "min" >].

min_post-poss := 1st-mascsg-poss-pron-post &
  [ STEM < "min" >].

vår_pre-poss := 1st-pl-masc-or-fem-sg-poss-pron-pre &
  [ STEM < "vår" >].

vår_post-poss := 1st-pl-masc-or-fem-sg-poss-pron-post &
  [ STEM < "vår" >].

din_pre-poss := 2nd-mascsg-poss-pron-pre &
  [ STEM < "din" >].

din_post-poss := 2nd-mascsg-poss-pron-post &
  [ STEM < "din" >].

deres_2pl-pre-poss := 2nd-pl-poss-pron-pre &
  [ STEM < "deres" > ].

deres_2pl-post-poss := 2nd-pl-poss-pron-post &
  [ STEM < "deres" > ].

hans_pre-poss := 3rd-sg-masc-poss-pron-pre &
  [ STEM < "hans" > ].

hans_post-poss := 3rd-sg-masc-poss-pron-post &
  [ STEM < "hans" > ].

hennes_pre-poss := 3rd-sg-fem-poss-pron-pre &
  [ STEM < "hennes" > ].

hennes_post-poss := 3rd-sg-fem-poss-pron-post &
  [ STEM < "hennes" > ].

dens_pre-poss := 3rd-sg-neut-msc-poss-pron-pre &
  [ STEM < "dens" > ].

dens_post-poss := 3rd-sg-neut-msc-poss-pron-post &
  [ STEM < "dens" > ].

deres_3pl-pre-poss := 3rd-plural-poss-pron-pre &
  [ STEM < "deres" > ].

deres_3pl-post-poss := 3rd-plural-poss-pron-post &
  [ STEM < "deres" > ].

hvis_3-quest-poss := 3rd-quest-poss-word &
  [ STEM < "hvis" > ].

hvis_3-rel-poss := 3rd-rel-poss-word &
  [ STEM < "hvis" > ].

; Reflexive possessives

sin_refl-preposs := 3rd-mascsg-poss-refl-pron-pre &
  [ STEM < "sin" >].

sin_refl-postposs := 3rd-mascsg-poss-refl-pron-post &
  [ STEM < "sin" >].


sin_possparticle := poss-mascsg-particle-word &
  [ STEM < "sin" >].

hvem_interrpron := interrog-pron-word &
  [ STEM < "hvem" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_which_person_q_rel"].

hva_interrpron := interrog-pron-word &
  [ STEM < "hva" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hva_q_rel"].

; "hvor kommer du fra", "hvor er dette?"
hvor_interrpron := interrog-pron-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hvor_q_rel"].

; "når kommer du fra", "når er dette?"
når_interrpron := interrog-pron-word &
  [ STEM < "når" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_når_q_rel"].

;,
;    SYNSEM.LKEYS.KEYREL.PRED "explet_pron_rel"
det_expl := explet-pron-word &
  [ STEM < "det" > ].


; DETERMINERS & DEMONSTRATIVES
den_dem := dem-masc-or-fem-sg-word &
  [ STEM < "den" >,
    SYNSEM.LKEYS.KEYREL.PRED "_den-commsg_deict_rel"].

det_dem := dem-neutsg-word &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "_det-neutsg_deict_rel"].

de_dem := dem-pl-word &
  [ STEM < "de" >,
    SYNSEM.LKEYS.KEYREL.PRED "_de-pl_deict_rel"].

; correct, but parse-costly
;den_def-q := def-q-masc-or-fem-sg-word &
;  [ STEM < "den" >].

;det_def-q := def-q-neutsg-word &
;  [ STEM < "det" >].

;de_def-q := def-q-pl-word &
;  [ STEM < "de" >].


denne_dem := dem-masc-or-fem-sg-word &
  [ STEM < "denne" >,
    SYNSEM.LKEYS.KEYREL.PRED "_denne-proxim_deict_rel"].

dette_dem := dem-neutsg-word &
  [ STEM < "dette" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dette-proxim_deict_rel"].

disse_dem := dem-pl-word &
  [ STEM < "disse" >,
    SYNSEM.LKEYS.KEYREL.PRED "_disse-proxim_deict_rel"].

;trying this commented out, and leaving all cases for the cardinal "en"
en_indef-art := art-mascsg-word &
  [ STEM < "en" > ].

et_indef-art := art-neutsg-word &
  [ STEM < "et" > ].

ei_indef-art := art-femsg-word &
  [ STEM < "ei" > ].

en_card := sg-strong-cardinal-word &
  [ STEM < "en" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

ei_card := sg-strong-cardinal-word &
  [ STEM < "ei" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

ett_card := sg-strong-cardinal-word &
  [ STEM < "ett" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

to_card := plur-cardinal-word &
  [ STEM < "to" >,
    SYNSEM.LKEYS.KEYREL.CARG "2-rel"].

tre_card := plur-cardinal-word &
  [ STEM < "tre" >,
    SYNSEM.LKEYS.KEYREL.CARG "3-rel"].

fire_card := plur-cardinal-word &
  [ STEM < "fire" >,
    SYNSEM.LKEYS.KEYREL.CARG "4-rel"].

fem_card := plur-cardinal-word &
  [ STEM < "fem" >,
    SYNSEM.LKEYS.KEYREL.CARG "5-rel"].

seks_card := plur-cardinal-word &
  [ STEM < "seks" >,
    SYNSEM.LKEYS.KEYREL.CARG "6-rel"].

syv_card := plur-cardinal-word &
  [ STEM < "syv" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

sju_card := plur-cardinal-word &
  [ STEM < "sju" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

åtte_card := plur-cardinal-word &
  [ STEM < "åtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "8-rel"].

ni_card := plur-cardinal-word &
  [ STEM < "ni" >,
    SYNSEM.LKEYS.KEYREL.CARG "9-rel"].


hundre_card := plur-cardinal-word &
  [ STEM < "hundre" >,
    SYNSEM.LKEYS.KEYREL.CARG "100-rel"].

tusen_card := plur-cardinal-word &
  [ STEM < "tusen" >,
    SYNSEM.LKEYS.KEYREL.CARG "1000-rel"].

første_ordinal := ordinal-word &
  [ STEM < "første" >,
    SYNSEM.LKEYS.KEYREL.CARG "1st-rel"].

andre_ordinal := ordinal-word &
  [ STEM < "andre" >,
    SYNSEM.LKEYS.KEYREL.CARG "2nd-rel"].

tredje_ordinal := ordinal-word &
  [ STEM < "tredje" >,
    SYNSEM.LKEYS.KEYREL.CARG "3rd-rel"].

fjerde_ordinal := ordinal-word &
  [ STEM < "fjerde" >,
    SYNSEM.LKEYS.KEYREL.CARG "4th-rel"].

femte_ordinal := ordinal-word &
  [ STEM < "femte" >,
    SYNSEM.LKEYS.KEYREL.CARG "5th-rel"].

sjette_ordinal := ordinal-word &
  [ STEM < "sjette" >,
    SYNSEM.LKEYS.KEYREL.CARG "6th-rel"].

syvende_ordinal := ordinal-word &
  [ STEM < "syvende" >,
    SYNSEM.LKEYS.KEYREL.CARG "7th-rel"].

sjuende_ordinal := ordinal-word &
  [ STEM < "sjuende" >,
    SYNSEM.LKEYS.KEYREL.CARG "7th-rel"].

åttende_ordinal := ordinal-word &
  [ STEM < "åttende" >,
    SYNSEM.LKEYS.KEYREL.CARG "8th-rel"].

niende_ordinal := ordinal-word &
  [ STEM < "niende" >,
    SYNSEM.LKEYS.KEYREL.CARG "9th-rel"].

tiende_ordinal := ordinal-word &
  [ STEM < "tiende" >,
    SYNSEM.LKEYS.KEYREL.CARG "10th-rel"].

; QUANTITY-WORDS
mange_adj := stnd-adj-lxm &
  [ INFLECTION nonfstr,
    STEM < "mange" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

få_adj := stnd-adj-lxm &
  [ INFLECTION finstr,
    STEM < "få" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
    SYNSEM.LOCAL.AGR.PNG.NG pl,
    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

mer_cmpar-mass3 := cmpar-mass-quantity-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

mer_cmpar-mass := quant-indef-adjcard-sg-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mindre_cmpar-mass := quant-indef-adjcard-sg-word &
 [ STEM < "mindre" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

mer_cmpar-mass2 := quant-indef-adjcard2-sg-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mindre_cmpar-mass2 := quant-indef-adjcard2-sg-word &
 [ STEM < "mindre" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

flest_superlat-str-count := superlat-count-strong-quantity-word &
  [ STEM < "flest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

flest_superlat-post-count := superlat-count-post-quantity-word &
  [ STEM < "flest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

mest_superlat-str-mass := superlat-mass-strong-quantity-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].


ingen_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ingen_q_rel" ].

ingen_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ingen_q_rel" ].

intet_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "intet" >,
    SYNSEM.LKEYS.KEYREL.PRED "_intet_q_rel" ].

hver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "hver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hver-univ_q_rel" ].

noen_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "noen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noen_q_rel"].

noe_indef-quant-sg := quant-indef-ncard-sg-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel"].

;to enable "vil du ha noe å spise" - better for "den er noe bedre" (= litt)TODO
noe_degcmpar := degreecmpar-spec-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel"].

mange_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_q_rel"].

få_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "få" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_q_rel"].

; "litt vin"
litt_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "litt" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

noe_indef-quant2-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "noe" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel",
    SYNSEM.LOCAL.CAT.VAL.SPEC < [LOCAL.CAT.HEAD.ACCUSATIVE +]>].

; "litt større/flere"
litt_degcmpar := degreecmpar-spec-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt-diff-amount_rel"].

; "litt stor"
litt_degrpos := degreepos-spec-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

lite_degrpos := degreepos-spec-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

tett_degrpos := degreepos-spec-word &
  [ STEM < "tett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tett_q_rel"].

; "svært mye", "hvor mye"
mye_modble := quant-indef-adjcard-sg-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mye_modble-abs := quant-indef-adjcard-sg-abs-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

; "mye vin"
mye_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].


; "mye større/flere"
; with than-clause
mye_degcmpar := degreecmpar-spec-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye-diff-amount_rel"].

; "mange flere"
mange_degcmpar := degreecmpar-spec-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange-diff-amount_rel",
    SYNSEM.LOCAL.CAT.VAL [ SPEC < [LOCAL.CONT.HOOK.INDEX.PNG.NG pl ] >],
    SYNSEM.LOCAL.CAT.VAL [ SPEC < [LOCAL.CAT.HEAD adj-quant & [KEYS.KEY adjquant-pre]]>]].

; "meget større"
meget_degcmpar := degreecmpar-spec-word &
  [ STEM < "meget" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_meget-diff-amount_rel"].

; "meget stor"
meget_degpos := degreepos-spec-word &
  [ STEM < "meget" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_meget_q_rel"].

veldig_degpos := degreepos-spec-word &
  [ STEM < "veldig" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_veldig_q_rel"].

altfor_degpos := degreepos-spec-word &
  [ STEM < "altfor" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_altfor_q_rel"].

; "svært stor", "svært mange"
svært_degpos := degreepos-spec-word &
  [ STEM < "svært" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_svært_q_rel"].

; "ganske stor"
ganske_degpos := degreepos-spec-word &
  [ STEM < "ganske" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ganske_q_rel"].

; "så stor"
så_degpos := degreepos-spec-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED "_så_q_rel"].

nokså_degpos := degreepos-spec-word &
  [ STEM < "nokså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nokså_q_rel"].

; "like stor som"
like_degpos := degreepos-spec-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED "_like_q_rel"].

; "hvor stor"
hvor_wh-degpos := degreewh-spec-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-mye_rel"].

;hvor_wh-degpos := wh-degrpos-spec-word &
;  [ STEM < "hvor" >].

; "*nok stor, stor nok"
nok_degpos := degreepos-post-spec-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_q_rel"].

; "langt større"
langt_degcmpar := degreecmpar-spec-word &
  [ STEM < "langt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_langt-diff-amount_c_rel"].

; "nesten fem"
nesten_cardspec := cardspec-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nesten_c_rel"].
     
; "bare fem"
bare_cardspec := cardspec-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].

bare_indefspec := indefspec-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].

kun_cardspec := cardspec-word &
  [ STEM < "kun" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kun_c_rel"].

kun_indefspec := indefspec-word &
  [ STEM < "kun" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kun_c_rel"].


nesten_qualifadv := qualifadv-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nesten_c_rel"].

omtrent_cardspec := cardspec-word &
  [ STEM < "omtrent" >,
    SYNSEM.LKEYS.KEYREL.PRED "_omtrent_c_rel"].
nøyaktig_cardspec := cardspec-word &
  [ STEM < "nøyaktig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nøyaktig_c_rel"].
presis_cardspec := cardspec-word &
  [ STEM < "presis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_presis_c_rel"].
over_cardspec := cardspec-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_over_c_rel"].

min_cardspec := cardspec-word &
  [ STEM < "min" >,
    SYNSEM.LKEYS.KEYREL.PRED "_min_c_rel"].


ikke_qualadv := qualifadv-word &
  [ STEM < "ikke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ikke_c_rel"].
selv_focqualadv := focqualifadv-word &
  [ STEM < "selv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-selv_c_rel"].
bare_focqualadv := focqualifadv-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-bare_c_rel"].

; "hvor lite"
lite_modble := quant-indef-adjcard-sg-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

; "lite vin renner"
lite__indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

; "nok vin"
nok_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_q_rel"].

; for "alle gutter"
alle_indef-quant-pl := quant-indef-card-univ-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alle-univ_q_rel"].

begge_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_begge_q_rel"].

samtlige_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "samtlige" >,
    SYNSEM.LKEYS.KEYREL.PRED "_samtlige_q_rel"].

hvilken_interr-quant := interrog-quant-masc-or-fem-sg-word &
  [ STEM < "hvilken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvilken_commsg_q_rel" ].


; in cooperation with head-quant-comp-phrase, this word category
; applies uniquely to "alle" and "begge" preceding a definite N-bar
alle_defquant-pl :=  univquant1-part-pl-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_alle-univ_q_rel"].

begge_defquant-pl := univquant1-part-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_begge_q_rel" ].

alle_defquant-pl-poss :=  univquant2-part-pl-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_alle-univ_q_rel"].

begge_defquant-pl-poss := univquant2-part-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_begge_q_rel"].


vel_interj := interjection-word &
  [ STEM < "vel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vel_rel"].

greit_interj := interjection-word &
  [ STEM < "greit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_greit_rel"].

kanskje_interj := interjection-word &
  [ STEM < "kanskje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kanskje_rel"].

å_interj := interjection-word &
  [ STEM < "å" >,
    SYNSEM.LKEYS.KEYREL.PRED "_å_rel"].


; many entires with KEYS.KEY specification of a complement, not reflected in type, although also not systematically for distinguishing entries, but for selecting right complements. Unclear how bad that is. In lex4.v-lrge this applies to 1260 entries (under 'KEY-SPEC')

;;;;;;;; VERBS 


smile_intr := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "smile" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smile_v-intr_rel" ].

sove_intr := v-intr &
  [ STEM < "sove" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sove_v-intr_rel"]].

sove_tr-eventunit := v-tr-obEventunit &
  [ STEM < "sove" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sove_v-tr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY søvn-inhcmp ]]>].

ligge_intr := v-intr &
  [ INFLECTION nonfstr-strong,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ligge_v-intr_rel" ].

ligge_subj-pres := v-intrPresnt &
  [ INFLECTION nonfstr-strong,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ligge_v-intrPresnt_rel" ].

regne_impers-pres := v-intrImpers &
  [ STEM < "regne" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL [ PRED "_regne_v-intrImpers_rel" ] ]].

sitte_subj-pres := v-intrPresnt &
  [ STEM < "sitte" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sitte_v-intrPresnt_rel"]].

; en mann smyger seg (frem)
smyge_seg := v-trNrf-suDir_obReflExpl &
	[STEM <"smyge">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trNrf_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; det smyger seg en mann (frem)
smyge_seg_pres := v-trNrfPresnt-obRefl_presDir &
	[STEM <"smyge">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trNrfPresnt_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

; det smyger seg frem en mann
smyge_seg_pres_path := v-trNrfPresntPathShft-obRefl_presDir &
	[STEM <"smyge">,
	INFLECTION nonfstr-strong,							;; Changed form nonfstr-ic to nonfstr-strong. EAA.
	SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vb,
	SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trNrfPresntPathShft_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator-sup].

løpe_subjdir-pres := v-intrPresnt-presDir &
  [ STEM < "løpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL [ PRED "_løpe_v-intrPresnt_rel" ] ]].

løpe_subjdir-pres-path := v-intrPresntPathShft-presDir &
  [ STEM < "løpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL [ PRED "_løpe_v-intrPresntPathShft_rel" ] ]].

rulle_subjdir-pres := v-intrPresnt-presDir &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-intrPresnt_rel" ].

; klarne opp
klarne_telicpart := v-intrImpersPrtcl &
  [ STEM < "klarne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LOCAL.KEY-SPEC opp-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_klarne_v-intrImpersPrtcl_rel" ] ]].

; det kommer inn en mann
komme_present-telicpart := v-intrPresntPathShft-presDir &
  [ STEM < "komme" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_komme_v-intrPresntPathShft_rel" ] ]].

komme_intr-obl := v-intrObl-oblN &
  [ STEM < "komme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL [ PRED "_komme_v-intrObl_rel" ] ]].

; koke opp
koke_telicpart := v-intrPrtcl-COMPLETEDACTIVITY &
  [ STEM < "koke" >,
    INFLECTION nonfstr-te,
    SYNSEM.LOCAL.KEY-SPEC pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_koke_v-intrPrtcl_rel" ] ]].

fylle_tr-prtcl := v-trPrtcl &
 [ INFLECTION nonfstr-te,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_v-trPrtcl_rel",
            LOCAL.KEY-SPEC ut-pcl ] ].

fylle_tr-prtclShft := v-trPrtclShft &
 [ INFLECTION nonfstr-te,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_v-trPrtclShft_rel",
            LOCAL.KEY-SPEC ut-pcl ] ].

vise_tr-prtcl := v-trPrtcl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM.LOCAL.KEY-SPEC frem-pcl,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trPrtcl_rel"]].

; holde på å   is still missing
; holde på
holde_atelicpart := v-intrPrtcl-SUSTAINEDACTIVITY &
  [ STEM < "holde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC på-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_holde_v-intrPrtcl_rel" ] ]].

holde_telicpart := v-intrPrtcl-COMPLETEDACTIVITY &
  [ STEM < "holde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC opp-pcl,
    SYNSEM [LKEYS.KEYREL [ PRED "_holde_v-intrPrtcl_rel" ] ]].

finne_iv-prtcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
;   SYNSEM.LOCAL.KEY-SPEC ut-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-intrPrtcl_rel" ].

holde_atel-prtcl-pp-equi := v-intrPrtclObl-oblEqSuInf &
  [ STEM < "holde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC på-pcl,
    SYNSEM.LOCAL.KEY-SPEC med-rais,
    SYNSEM [LKEYS.KEYREL [ PRED "_holde_v-intrPrtclObl_rel" ] ]].

; hjelpe til med å
hjelpe_atel-prtcl-pp-equi := v-intrPrtclObl-oblEqSuInf &
  [ STEM < "hjelpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC til-pcl,
    SYNSEM.LOCAL.KEY-SPEC med-rais,
    SYNSEM [LKEYS.KEYREL [ PRED "_hjelpe_v-intrPrtclObl_rel" ] ]].

sette_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-trScprShft_rel"]].

vise_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-v-trScprShft_rel"]].

sette_seg := v-tr-obRefl &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-tr_rel"]].

sette_ditr-refl := v-ditr-iobRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sette_v-ditr_rel",
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY mål-k].

gi_ditr-refl := v-ditr-iobRefl &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].

sette_pres-refl := v-trNrfPresnt-obRefl &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-trNrfPresnt_rel"]].

sette_pres-refl-locobl := v-trPresntLoc-obRefl &
  [ STEM < "sette" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_sette_v-trPresntLoc_rel"]].

;    SYNSEM.LOCAL.CAT.HEAD prep-or-adv 
sette_scpr := v-trScpr-scObArgCsd_scLoc &
  [ INFLECTION nonfstr-strong,
    STEM < "sette" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sette_v-trScpr_rel"].

kaste_tr-dir := v-tr-obDir &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-tr_rel",
   SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator ].

flytte_tr-dir := v-tr-obDir &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flytte_v-intr_rel" ].

avhenge_subj-equi-pp := v-intrObl-oblEqSuInf &
  [ INFLECTION nonfstr-strong,
    STEM < "avhenge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel" ].

ta_tr-subjdir := v-tr-suDir &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v_rel" ].

gå_road := v-tr-suDir &
 [ INFLECTION nonfstr-strong,
   STEM < "gå" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY path-of-locomotion-inhcmp,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-path,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-tr_rel" ].

gå_trip := v-tr-suDir &
 [ INFLECTION nonfstr-strong,
   STEM < "gå" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY locomotion-event-inhcmp,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-path,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-tr_rel" ].

løpe_secpred-refl := v-trScpr-scObNrgCsd_obRefl &
  [ STEM < "løpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_løpe_v-trScpr_rel"]].

skamme_seg := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "skamme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skamme_v-tr_rel" ].

vaske_seg := v-tr-obRefl &
  [ STEM < "vaske" >,
    INFLECTION nonfstr-et,
    SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-tr_rel"]].

vaske_tr := v-tr &
  [ STEM < "vaske" >,
    INFLECTION nonfstr-et,
    SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-tr_rel"]].

sammenligne_tr-obl := v-trObl &
  [ INFLECTION nonfstr-et,
    STEM < "sammenligne" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sammenligne_v-trObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-assoc ]]> ].

synge_tr-arg12-secpred := v-trScpr-scObNrgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-trScpr_rel" ].

synge_secpred-refl := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-trScpr_rel" ].

synge_tr-particleshift := v-trScprShft-obDir_scObNrgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-trScprShft_rel" ].

synge_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-tr_rel",
   SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD.KEYS.KEY sang-k] > ].

sparke_secpred := v-trScpr-scObArgCsd_scEndpt &
  [ STEM < "sparke" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trScpr_rel"].

;sparke_secpred-refl := v-trScpr-obRefl_scObArgCsd &
;  [ STEM < "sparke" >,
;    INFLECTION nonfstr,
;    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v_rel"].

sparke_particleshift := v-trScprShft-obDir_scObArgCsd &
  [ STEM < "sparke" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trScprShft_rel"].

sparke_adjshift := v-trScprAdjShft-scObArgCsd_scAdj &
  [ STEM < "sparke" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trScprShft_rel"].

legge_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-trScprShft_rel" ].

tørke_detachposs-refl := v-trObl-obRefl_oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-trObl_rel" ].

tørke_detachposs := v-trObl-oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-trObl_rel" ].

tørke_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-tr_rel" ].

kaste_detachposs := v-ditrObl-oblPRTOFiob-PARTWHOLE_AFFECTING &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-ditrObl_rel",
   SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE initiator ].

komme_tr-secpr-dir-refl := v-trScpr-obDir_obRefl_scObNrgCsd &
  [ STEM < "komme" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_komme_v-trScpr_rel"].

prøve_subj-equi := v-tr-obEqInf &
  [ STEM < "prøve" >,
    INFLECTION nonfstr-et_or_de,
    SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-tr_rel"].

prøve_pp-equi := v-intrObl-oblEqSuInf &
  [ STEM < "prøve" >,
    INFLECTION nonfstr-et_or_de,
    SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-rais ]]>].

tillate_obj-equi := v-ditr-obEqIobInf &
  [ STEM < "tillate" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_tillate_v-ditr_rel"]].

tillate_obj-eq-refl := v-ditr-iobRefl_obEqIobInf &
  [ STEM < "tillate" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_tillate_v-ditr_rel"]].

finne_obj-eq-pp-refl-i := v-trObl-obRefl_oblEqObInf &
  [ STEM < "finne" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.ALT-SPEC i-k,
    SYNSEM [LKEYS.KEYREL.PRED "_finne_v-trObl_rel"]].

finne_tr-obl-decl-refl := v-trObl-obRefl_oblDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.KEY-SPEC i-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trObl_rel" ].
be_obj-equi := v-ditr-obEqIobBareinf &
  [ STEM < "be" >,
    INFLECTION finstr-dd,
    SYNSEM [LKEYS.KEYREL.PRED "_be_v-ditr_rel"]].

be_obj-eq-pp := v-trObl-oblEqObInf &
  [ STEM < "be" >,
    INFLECTION finstr-dd,
    SYNSEM [LKEYS.KEYREL.PRED "_be_v-trObl_rel"],
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-rais ]]>].

hjelpe_obj-equi := v-ditr-obEqIobInf &
  [ STEM < "hjelpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_hjelpe_v-ditr_rel"]].

holde_secpred := v-trScpr-scObArgCsd_scLoc &
  [ INFLECTION nonfstr-te,
    STEM < "holde" >,
    SYNSEM.LKEYS.KEYREL.PRED "_holde_v-trScpr_rel" ].

anmode_obj-eq-pp := v-trObl-oblEqObInf &
  [ STEM < "anmode" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_anmode_v-trObl_rel"],
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-rais ]]>].

be_subj-eq-pp := v-intrObl-oblEqSuInf &
  [ STEM < "be" >,
    INFLECTION finstr-dd,
    SYNSEM.LOCAL.KEY-SPEC om-rais,
    SYNSEM [LKEYS.KEYREL.PRED "_be_v-intrObl_rel"]].

håpe_subj-eq-pp := v-intrObl-oblEqSuInf &
  [ STEM < "håpe" >,
    INFLECTION nonfstr-te,
    SYNSEM.LOCAL.KEY-SPEC på-rais,
    SYNSEM [LKEYS.KEYREL.PRED "_håpe_v-intrObl_rel"]].

love_obj-equi := v-ditr-obEqSuInf &
  [ STEM < "love" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_love_v-ditr_rel"]].

vite_subord := v-tr-obDECL &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-tr_rel"]].

vite_obV := v-tr-obDECL_obV &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-tr_rel"]].

vite_intr := v-intr &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-intr_rel"]].

vite_interr := v-intrComp-compINTERR &
  [ STEM < "vite" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_vite_v-intrComp_rel"]].

gjette_interr := v-intrComp-compINTERR &
 [ INFLECTION nonfstr-et,
   STEM < "gjette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjette_v-intrComp_rel" ].

vise_ditr-yn := v-ditr-obYN &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

vise_ditr-yn-refl := v-ditr-obYN_iobRefl &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

vise_ditr-wh := v-ditr-obWH &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

vise_ditr-wh-refl := v-ditr-obWH_iobRefl &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

fortelle_ditr-wh := v-ditr-obWH &
  [ STEM < "fortelle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel"]].

fortelle_ditr-yn := v-ditr-obYN &
  [ STEM < "fortelle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel"]].


håpe_subord := v-tr-obDECL &
  [ STEM < "håpe" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_håpe_v-tr_rel"]].

spørre_interr := v-intrComp-compINTERR &
  [ STEM < "spørre" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_spørre_v-intrComp_rel"]].

;   "se ham komme"
se_bareinf := v-trScpr-scObNrg_scBareinf &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-trScpr_rel"]].

se_intr-dir := v-intr-suDir &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intr_rel"]].

se_tr-dir := v-tr-suDir &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-tr_rel"]].

gjøre_secpred-adj := v-trScpr-scObNrg_scAdj &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

gjøre_secpred-pp := v-trScpr-scObNrg_scPP &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

gjøre_secpred-refl := v-trScpr-obRefl_scObNrg &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_cause_rel" ].

forutsette_acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION nonfstr-strong,
   STEM < "forutsette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-trScpr_rel" ].

forutsette_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION nonfstr-strong,
   STEM < "forutsette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-trScpr_rel" ].

frykte_acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-trScpr_rel" ].

frykte_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-trScpr_rel" ].

forsøke_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forsøke_v-trScpr_rel" ].

søke_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION nonfstr,
   STEM < "søke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_søke_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

søke_intr-obl-om_å := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr,
   STEM < "søke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_søke_v-intrObl_rel",
            LOCAL.KEY-SPEC om-rais ] ].

anta__acc-cum-å-inf := v-trScpr-scObNrg_scInf &
 [ INFLECTION finstr-tt,
   STEM < "anta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anta_v-trScpr_rel" ].

anta_complx-pass := v-trScpr-scObNrg_scPcp &
 [ INFLECTION finstr-tt,
   STEM < "anta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anta_v-trScpr_rel" ].


føle_rais-refl := v-trScpr-scObNrg_obRefl_scBareinf &
  [ STEM < "føle" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_føle_v-trScpr_rel"]].

kjenne_rais-refl := v-trScpr-scObNrg_obRefl_scBareinf &
  [ STEM < "kjenne" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_kjenne_v-trScpr_rel"]].

; "se syk ut"
se_syk-ut := v-intrScprPrtcl-scSuNrg_scAdj_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrScprPrtcl_rel"]].

;se_ut-som-np := v-intrPrtclScpr-scSuNrg_scPredprtclSom_prtclUt &
;  [ STEM < "se" >,
;    INFLECTION finstr-tt,
;    SYNSEM [LKEYS.KEYREL.PRED "_se_v_rel"]].

;  - høres syk ut
høres_syk-ut := v-intrScprPrtcl-scSuNrg_scAdj_prtclUt &
  [ STEM < "høres" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høres_v-intrScprPrtcl_rel"]].

høres_ut-som-np := v-intrPrtclScpr-scSuNrg_prtclUt &
  [ STEM < "høres" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høres_v-intrPrtclScpr_rel"]].

;  "se ut til å komme" (til-rais), 
; "det ser ut til at han kommer" (til-expl
se_ut-til := v-intrPrtclOblRais-oblTil_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrPrtclOblRais_rel"]].

; "det ser ut som at han kommer" (til-expl
; "det ser ut som om han kommer" (til-expl
; "det ser ut som han kommer" (til-expl
se_ut-som := v-intrPrtclOblRais-oblSom_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrPrtclOblRais_rel"]].

; not clear if needed
se_ut-som-or-som-om := v-intrPrtclScpr-scSuNrg_prtclUt &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_se_v-intrPrtclScpr_rel"]].

anse_adj-rais := v-trScpr-scObNrg_scAdj &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_for-rais := v-trScpr-scObNrg_scPredprtclForInf &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_som-rais := v-trScpr-scObNrg_scPredprtclSom &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_refl-adj-rais := v-trScpr-scObNrg_obRefl_scAdj &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_refl-for-rais := v-trScpr-scObNrg_obRefl_scPredprtclFor &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

anse_refl-som-rais := v-trScpr-scObNrg_obRefl_scPredprtclSom &
  [ STEM < "anse" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_anse_v-trScpr_rel"]].

kalle_rais := v-trScpr-scObNrg_scN &
  [ STEM < "kalle" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_kalle_v-trScpr_rel"]].

; doesn't work with "hun kaller seg en venn" - INDEX mismatch. One
; should use the 'instantiate'-analysis here. Meanwhile, ditrans - below
kalle_refl-rais := v-trScpr-scObNrg_obRefl_scN &
  [ STEM < "kalle" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_kalle_v-trScpr_rel"]].

kalle_trdir := v-tr-obDir &
  [ INFLECTION nonfstr-te,
    STEM < "kalle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kalle_v-tr_rel" ].

vise_refl-rais := v-trScpr-scObNrg_obRefl_scPredprtclSom &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trScpr_rel"]].

vise_refl-rais-to-subj := v-trNrfScpr-obReflExpl_scSuNrg_scInf &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trNrfScpr_rel"]].

synes_å-gå := v-intrScpr-scSuNrg_scInf &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_meg-som := v-trScpr-scSuNrg_scPredprtclSomN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_meg-syk := v-trScpr-scSuNrg_scAdj &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_intr-secpr-rais-adj := v-intrScpr-scSuNrg_scAdj &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_tr-secpr-rais-pp := v-trScpr-scSuNrg_scPP &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_intr-secpr-rais-pp := v-intrScpr-scSuNrg_scPP &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_intrScprExpnAdj := v-intrScprExpn-scAdj &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScprExpn_rel"]].

;not working yet TODO
;synes_intrScprExpnPredprtcl := v-intrScprExpn-scPredprtcl &
;  [ STEM < "synes" >,
;    INFLECTION nonfstr-te,
;    SYNSEM [LKEYS.KEYREL.PRED "_synes_v_rel"]].

synes_tr-secpr-raistosubj-n := v-trScpr-scSuNrg_scN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-trScpr_rel"]].

synes_intr-secpr-rais-som-np := v-intrScpr-scSuNrg_scPredprtcl_scSomN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

synes_intr-secpr-n := v-intrScpr-scSuNrg_scN &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

;ville_root := v-intrAuxmodComp-compEqBareinf &
;  [ STEM < "ville" >,
;    INFLECTION nonfstr,
;    SYNSEM.LKEYS.KEYREL.PRED "_ville_v_rel"].

ville_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "ville" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_ville_v-intrAuxmodScpr_rel"]].

burde_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "burde" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_burde_v-intrAuxmodScpr_rel"]].

skulle_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "skulle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_skulle_v-intrAuxmodScpr_rel"]].

kunne_root := v-intrAuxmodComp-compEqBareinf &
  [ STEM < "kunne" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_kunne_v_rel"]].

kunne_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "kunne" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_kunne_v-intrAuxmodScpr_rel"]].

måtte_epist := v-intrAuxmodScpr-scSuNrg_scBareinf &
  [ STEM < "måtte" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_måtte_v-intrAuxmodScpr_rel"]].

kunne__intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "kunne" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_kunne_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

måtte_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "måtte" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_måtte_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

skulle_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "skulle" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_skulle_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

ville_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "ville" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_ville_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

burde_intr-dir := v-intrScpr-scSuNrg &
  [ STEM < "burde" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LKEYS.KEYREL.PRED "_burde_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD prep-or-adv,
    SYNSEM.LOCAL.KEY-SPEC fixpt-dir ].

virke_intr-secpr-rais-adj := v-intrScpr-scSuNrg_scAdj &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

virke_intr-secpr-rais-som-np := v-intrScpr-scSuNrg_scPredprtcl_scSomN &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

; "som" is here som-adj-pred-clse-comp, not prep-clause-word
virke_intr-secpr-rais-som-om := v-intrScpr-scSuNrg_scPredprtcl_scSomOmClse &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

synes_intr-secpr-rais-som-om := v-intrScpr-scSuNrg_scPredprtcl_scSomOmClse &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

; "som" is here som-adj-pred-clse-comp, not prep-clause-word
virke_intr-secpr-rais-som := v-intrScpr-scSuNrg_scPredprtcl_scSomClse &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrScpr_rel"]].

synes_intr-secpr-rais-som := v-intrScpr-scSuNrg_scPredprtcl_scSomClse &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

;intrans-rais-from-pp-arg1-verb-lexeme
late_intrObl-rais := v-intrOblRais-oblTil &
  [ STEM < "late" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_late_v-intrOblRais_rel"]].

; late som
late_intr-obl := v-intrObl-oblDECL-oblSom &
  [ STEM < "late" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_late_v-intrObl_rel"]].

bo_intr-locobl := v-intrObl-oblLoc &
 [ INFLECTION finstr-dd,
   STEM < "bo" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bo_v-intrObl_rel" ].

bo_pres-locobl := v-intrPresntLoc &
 [ INFLECTION finstr-dd,
   STEM < "bo" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bo_v-intrPresntLoc_rel" ].

oppholde_tr-refl-locobl := v-trObl-obRefl-oblLoc &
 [ INFLECTION nonfstr-te,
   STEM < "oppholde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_oppholde_v-trObl_rel" ].

oppholde_pres-refl-locobl := v-trPresntLoc-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "oppholde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_oppholde_v-trPresntLoc_rel" ].

trenge_pres-secpr-dir-refl := v-trNrfPresntPathShft-obRefl_presDir &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-trNrfPresntPathShft_rel" ].

ta_tr-obl := v-trObl &
  [ INFLECTION finstr-tt,
    STEM < "ta" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS <[LOCAL.CAT.HEAD.KEYS.KEY på-assoc]>  ].

; han kommer til å sove
komme_intrObl-rais_Fut := v-intrOblRais-oblTil &
  [ INFLECTION nonfstr-strong,
    STEM < "komme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_komme_v-intrOblRais_rel"].

gå_intr-secpred_adj := v-intrScpr-scSuNrgCsd_scAdj &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

gå_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

koke_intr-secpred_adj := v-intrScpr-scSuNrgCsd_scAdj &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-intrScpr_rel" ].

koke_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-intrScpr_rel" ].

snø_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION finstr,
   STEM < "snø" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snø_v-intrScpr_rel" ].

regne_intr-secpred_adv := v-intrScpr-scSuNrgCsd_scAdv &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-intrScpr_rel" ].

koke_intr-arg-secpred := v-intrScpr-scSuArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-intrScpr_rel" ].

; the 'lightness' in these verbs is reflected in the PRED value, which is like the PRED for the copula:
ligge_lightv  := v-intrLghtScpr-scAdj &
  [ INFLECTION nonfstr-strong,
    STEM < "ligge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_condition_rel" ].

stå_lightv  := v-intrLghtScpr-scAdj &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_condition_rel" ].

; den er fin
være_copstand := v-copAdj &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-property_rel"]].

være_present := v-intrPresnt &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-location_rel"]].

være_coplocpp := v-copPP &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-location_rel"]].

være_coplocppDecl := v-copPP-suDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-location_rel"]].

være_copPredprtc := v-copPredprtcl &
  [ STEM < "være" >,
    INFLECTION nonfstr,
    SYNSEM [LKEYS.KEYREL.PRED "_være-property_rel"]].

være_coplocadv := v-copAdv &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_location_rel"]].

; det er fint i Finnmark
være_abs := v-copImpersAdjLoc &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiated_rel"]].

være_tough := v-copToughAdj &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiated_rel"]].

være_abs-nonepon-decl := v-copAdj-suDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiated_rel"]].

være_abs-nonepon-quest := v-copAdj-suINTERR &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiated_rel"]].

være_copnom := v-copN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copnomDecl := v-copN-suDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copnomYN := v-copN-suYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copnomWH := v-copN-suWH &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copnomAbsinf := v-copN-suAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

; være med
være_atelpartcl := v-intrPrtcl-SUSTAINEDACTIVITY &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM.LOCAL.KEY-SPEC med-pcl,
    SYNSEM [LKEYS.KEYREL.PRED "_være_v-intrPrtcl_rel"]].

være_copclause := v-copIdDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copIdN := v-copIdN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copabsinf := v-copIdAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copIdAbsinf-absinf := v-copIdAbsinf-suAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_indirwhquest := v-copIdWH &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_indir-y-n-quest := v-copIdYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnNYN := v-copExpnN-expnYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnNDECL := v-copExpnN-expnDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnNWH := v-copExpnN-expnWH &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnNAbsinf := v-copExpnN-expnAbsinf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnPPYN := v-copExpnPP-expnYN &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnPPDECL := v-copExpnPP-expnDECL &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

være_copExpnAdj := v-copExpnAdj &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-instantiate_rel"]].

bli_copstand := v-copAdj &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-inchoation_rel"]].

bli_copnom := v-copN &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-incho-instantiate_rel"]].

bli_copExpnAdj := v-copExpnAdj &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-incho-instantiate_rel"]].

bli_abs := v-copImpersAdjLoc &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-incho-instantiated_rel"]].

bli_pres := v-intrPresnt &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-incho-instantiated_rel"]].

bli_copclause := v-copIdDECL &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-instantiate_rel"]].

bli_pass := v-intrAuxpassScpr-scSuNrg_scPass &
  [ STEM < "bli" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_bli-inchoation_rel"]].

ha_perf := v-intrAuxperfScpr-scSuNrg_scPerf &
  [ STEM < "ha" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ha-perfective_rel"]].

;this applies only to ergatives, a distinction not expressed yet. But adjectival derivation combining with standard copula is possible, therefore commenting this out, for so long.
være_perf := v-intrAuxperfScpr-scSuNrg_scPerf &
  [ STEM < "være" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_være-perfective_rel"]].

få_perf := v-intrAuxperfScpr-scSuNrg_scPerf &
  [ STEM < "få" >,
    INFLECTION finstr-tt,
    SYNSEM [LOCAL.CONT.HOOK.INDEX.SIT-TYPE.COMPLETED +,
            LKEYS.KEYREL.PRED "_få-achievement_rel"]].

få_equi := v-intrAuxmodComp-compEqBareinf &
  [ STEM < "få" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_få_v-intrAuxmodComp_rel"]].

ha_secpr := v-trScpr-scObArgCsd_scLoc &
  [ STEM < "ha" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ha_v-trScpr_rel"],
    SYNSEM.LOCAL.CAT.VAL.COMPS <[], [ LOCAL.CAT.HEAD.KEYS.KEY index-sit]>].

ha_pp-shft := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
 [ INFLECTION finstr-tt,
   STEM < "ha" >,
   SYNSEM.LOCAL.KEY-SPEC på-indxsit,
   SYNSEM.LKEYS.KEYREL.PRED "_ha_v-trScprShft_rel" ].

ha_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "ha" >,
   SYNSEM.LOCAL.KEY-SPEC med-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_ha_v-trScprShft_rel" ].

ta_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LOCAL.KEY-SPEC med-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trScprShft_rel" ].

få_particleshift := v-trScprShft-obDir_scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LOCAL.KEY-SPEC med-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-trScprShft_rel" ].

få_secpr := v-trScpr-scObArgCsd_scEndpt &
  [ STEM < "få" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_få_v-trScpr_rel"]].

koke_intr := v-intr &
  [ STEM < "koke" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_koke_v-intr_rel"]].

vise_ditr-decl := v-ditr-obDECL &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_vise_v-ditr_rel" ].

vise_ditr := v-ditr &
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_vise_v-ditr_rel" ].

unne_ditr-refl := v-ditr-iobRefl &
  [ STEM < "unne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel" ].

unne_obj-equi := v-ditr-obEqIobInf &
  [ STEM < "unne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel" ].

unne_obj-equi-refl := v-ditr-iobRefl_obEqIobInf &
  [ STEM < "unne" >,
    INFLECTION nonfstr-et,
    SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel" ].

vente_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "vente" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vente_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

gå_intr-obl-av := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-intrObl_rel",
   SYNSEM.LOCAL.KEY-SPEC av-k  ].

bero__intr-obl-np := v-intrObl-oblN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-basis-of ] ].

stole_intr-obl-np := v-intrObl-oblN &
  [ STEM < "stole" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_stole_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-basis-of ]]>].

avhenge_intr-obl-np := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-obl-clause := v-intrObl-oblDECL &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

stole_intr-obl-clause := v-intrObl-oblDECL &
  [ STEM < "stole" >,
    INFLECTION nonfstr-te,
    SYNSEM.LKEYS.KEYREL.PRED "_stole_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-clse ]]>].

avhenge_intr-obl-clause := v-intrObl-oblDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

fortelle_obl-decl := v-trObl-oblDECL &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LOCAL.KEY-SPEC om-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

fortelle_obl-interr := v-trObl-oblINTERR &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LOCAL.KEY-SPEC om-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

fortelle_obl-absinf := v-trObl-oblAbsinf &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LOCAL.KEY-SPEC om-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

;SYNSEM.LOCAL.KEY-SPEC om-concumm,
 fortelle_obl := v-trObl &
 [ STEM < "fortelle" >,
   INFLECTION nonfstr-strong,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel" ].

bero_intr-pp-yn-clause := v-intrOblExpn-expnYN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

bero_intr-pp-wh-clause := v-intrOblExpn-expnWH &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-pp-wh-clause := v-intrOblExpn-expnWH &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-pp-decl-clause := v-intrOblExpn-expnDECL &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-pp-yn-clause := v-intrOblExpn-expnYN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intr-pp-decl-clause := v-intrOblExpn-expnDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblWH_expnWH := v-intrOblExpn-oblWH_expnWH &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblYN_expnYN := v-intrOblExpn-oblYN_expnYN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblYN_expnWH := v-intrOblExpn-oblYN_expnWH &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intrOblExpn-oblWH_expnYN := v-intrOblExpn-oblWH_expnYN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrOblExpn_rel",
            LOCAL.KEY-SPEC av-k ] ].

; "lure på hva/hvorvidt"
lure_intr-obl-interr-på := v-intrObl-oblINTERR &
  [ INFLECTION nonfstr-te,
    STEM < "lure" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lure_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-clse ]]> ].

; "lure på svaret"
lure_intr-obl-n-på := v-intrObl-oblN &
  [ INFLECTION nonfstr-te,
    STEM < "lure" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lure_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-assoc ]]> ].

; se alvorlig på
se_intr-adv-obl := v-intrOblAdv &
  [ STEM < "se" >,
    INFLECTION finstr-tt,
    SYNSEM.LKEYS.KEYREL.PRED "_se_v-intrOblAdv_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-topic-of ]]>].

snakke_intr-obl-med := v-intrObl-oblN &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-concumm ]]> ].

snakke_intr-obl-n-om := v-intrObl-oblN &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-k ]]> ].

snakke_intr-obl-decl-om := v-intrObl-oblDECL &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-k ]]> ].

snakke_intr-obl-interr-om := v-intrObl-oblINTERR &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY om-k ]]> ].

snakke_intr-obl-til := v-intrObl-oblN &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY til-fct-spec ]]> ].

snakke_intr-2obl-med := v-intrObl2 &
 [ STEM < "snakke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl2_rel",
   SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY med-concumm ]],
                                 [LOCAL.CAT.HEAD [KEYS.KEY om-fct-spec ]]> ].

snakke_equi := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrObl_rel" ].

snakke_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-tr_rel",
   SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY langage ]]> ].

røre_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "røre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_røre_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

røre_oblrefl := v-intrObl-oblRefl &
  [ STEM < "røre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_røre_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k]].

kle_secpr := v-trScpr-scObArgCsd_scLoc &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-trScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [], [LOCAL.CAT.HEAD [KEYS.KEY på-indxsit ]] >].

kle_ppshift := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-trScprShft_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-indxsit ]], []>].

kle_impl-obj := v-intrScpr-scObimplNrgRes_scPP-PLACEMENT &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY index-sit ]]> ].

kle_impl-obj-refl := v-intrScpr-scObimplNrgRes_scPPrefl-PLACEMENT &
  [ STEM < "kle" >,
    INFLECTION finstr-dd,
    SYNSEM.LKEYS.KEYREL.PRED "_kle_v-intrScpr_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD [KEYS.KEY index-sit ]]> ].

spise_tr-secpred-arg1 := v-trScpr-scObNrgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-trScpr_rel" ].

spise-ppshift := v-trScprShft-scObNrgRes_scPPrefl-PLACEMENT &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LOCAL.KEY-SPEC i-indxsit,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-trScprShft_rel" ].

sprekke_impers-pres-obl := v-intrImpersObl &
  [ INFLECTION nonfstr-strong,
    STEM < "sprekke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sprekke_v-intrImpersObl_rel" ].

synge_impers-pres-obl := v-intrImpersObl &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synge_v-intrImpersObl_rel" ] ].

vente_io-pres := v-trPresnt &
  [ STEM < "vente" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_vente_v-trPresnt_rel"]].

vente_intr := v-intr &
  [ STEM < "vente" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_vente_v-intr_rel"]].

forekomme_io-epon := v-trExpnSu-expnDECL &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trExpnSu_rel"]].

; han forekommer meg syk
forekomme_io-rais-adj := v-trScpr-scSuNrg_scAdj &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

forekomme_tr-secpr-rais-pp := v-trScpr-scSuNrg_scPP &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

forekomme_io-rais-som := v-trScpr-scSuNrg_scPredprtclSomN &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].

beklage_trExpnOb := v-trExpnOb-expnDECL &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-trExpnOb_rel" ].

beklage_trExpnObCond := v-trExpnOb-expnCOND &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-trExpnOb_rel" ].

ta_meas-epon := v-trExpnSu-obMeas_expnInfabs &
  [ STEM < "ta" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ta_v-trExpnSu_rel"]].

koste_meas-epon := v-trExpnSu-obMeas_expnInfabs &
  [ STEM < "koste" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_koste_v-trExpnSu_rel"]].

ta_meas-io-epon := v-ditrExpnSu-obMeas_expnEqInf &
  [ STEM < "ta" >,
    INFLECTION finstr-tt,
    SYNSEM [LKEYS.KEYREL.PRED "_ta_v-ditrExpnSu_rel"]].

koste_meas-io-epon := v-ditrExpnSu-obMeas_expnEqInf &
  [ STEM < "koste" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_koste_v-ditrExpnSu_rel"]].

hende_epon := v-intrExpn-expnDECL &
  [ STEM < "hende" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_hende_v-intrExpn_rel"]].

virke_epon := v-intrExpn-expnDECL &
  [ STEM < "virke" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_virke_v-intrExpn_rel"]].

synes_epon := v-intrExpn-expnDECL &
  [ STEM < "synes" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_synes_v-intrScpr_rel"]].

hjelpe_epon := v-intrExpn-expnAbsinf &
  [ STEM < "hjelpe" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_hjelpe_v-intrExpn_rel"]].

høre_expn-prtcl-fin := v-intrPrtclExpn-expnDECL &
  [ STEM < "høre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høre_v-intrPrtclExpn_rel"]].

høre_expn-prtcl-infin := v-intrPrtclExpn-expnAbsinf &
  [ STEM < "høre" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_høre_v-intrPrtclExpn_rel"]].

spørs_epon := v-intrExpn-expnINTERR &
  [ STEM < "spørs" >,
    SYNSEM [LKEYS.KEYREL.PRED "_spørs_v-intrExpn_rel"]].

spørs_suINTERR := v-intr-suINTERR &
  [ STEM < "spørs" >,
    SYNSEM [LKEYS.KEYREL.PRED "_spørs_v-intr_rel"]].

forekomme_io-rais := v-trScpr-scSuNrg_scInf &
  [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_forekomme_v-trScpr_rel"]].


spise_atelobl-på := v-intrObl-oblN-activity &
  [ STEM < "spise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL [ PRED "_spise_v_rel" ] ],
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY på-atelop ]]> ].

slå_tr := v-tr &
  [ INFLECTION finstr-tt,
    STEM < "slå" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slå_v-tr_rel" ].

kjenne_tv-exp := v-tr &
	[STEM <"kjenne">,
	INFLECTION nonfstr-te,
	MORPH-SPLIT <"=kjenn=e">,
	SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-tr_rel",
	SYNSEM.LOCAL.CONT.HOOK.XARG.ROLE experiencer,
	SYNSEM.LOCAL.CONT.HOOK.VARG.ROLE non-initiator,
	SYNSEM.DERIV-POT.CAN-OBJ-DEL -].

overraske_intr := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_v-intr_rel",
            LOCAL.KEY-SPEC med-k ] ].

forekomme_intr-suDecl := v-intr-suDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "forekomme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forekomme_v-intr_rel" ].

hende_intr-suDecl := v-intr-suDECL &
 [ INFLECTION nonfstr-te,
   STEM < "hende" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hende_v-intr_rel" ] ].

koste_intr-suAbsinf := v-intr-suAbsinf &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_koste_v-intr_rel" ] ].

bero_intr-suDecl-obl := v-intrObl-suDECL_oblN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-suInterr-obl := v-intrObl-suINTERR_oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

avhenge_intr-suDecl-obl := v-intrObl-suDECL_oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

; left out ,
;   SYNSEM.LOCAL.KEY-SPEC ut-pcl, since the synsem type misses this part.TODO
regne_tr-prtcl-clause := v-trPrtclShft-obCLAUSE &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-trPrtclShft_rel" ].

; left out ,
;   SYNSEM.LOCAL.KEY-SPEC ut-pcl, since the synsem type misses this part.TODO
finne_tr-prtcl-clause := v-trPrtclShft-obCLAUSE &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trPrtclShft_rel" ].

finne_tr-prtcl-eq := v-trPrtcl-obEqInf &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.ALT-SPEC på-k,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trPrtcl_rel" ].

;avhenge_intr-eventarg1decl-eventoblinterr := v-intrObl-suDECL_oblINTERR &
; [ INFLECTION nonfstr-strong,
;   STEM < "avhenge" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v_rel",
;            LOCAL.KEY-SPEC av-k ] ].

avhenge_intr-eventarg1interr-eventoblinterr := v-intrObl-suINTERR_oblINTERR &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-eventarg1interr-eventoblinterr := v-intrObl-suINTERR_oblINTERR &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

avhenge_intr-eventarg1decl-eventobldecl := v-intrObl-suDECL_oblDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

bero_intr-eventarg1decl-eventobldecl := v-intrObl-suDECL_oblDECL &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

bero_intr-eventarg1decl-obln := v-intrObl-suDECL_oblN &
 [ INFLECTION finstr,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

; at han kommer antyder svik
antyde_tr-decl := v-tr-suDECL & 
  [ STEM < "antyde" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_antyde_v-tr_rel"]].

undre_tr-decl := v-tr-suDECL &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-tr_rel" ].

undre_trExpnDECL := v-trExpnSu-expnDECL &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-trExpnSu_rel" ].

undre_ditr-wh-refl := v-ditr-obWH_iobRefl &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-ditr_rel" ].

undre_ditr-yn-refl := v-ditr-obYN_iobRefl &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-ditr_rel" ].

plage_trExpnDECL := v-trExpnSu-expnDECL &
 [ INFLECTION nonfstr-et,
   STEM < "plage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_plage_v-trExpnSu_rel" ].

;undre_trReflCompInterr := v-trNrfComp-obReflExpl_compYN &
; [ INFLECTION nonfstr,
;   STEM < "undre" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_undre_v_rel" ].

interessere_trExpnYN := v-trExpnSu-expnYN & 
  [ STEM < "interessere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_interessere_v-trExpnSu_rel"]].

overraske_trExpnWH := v-trExpnSu-expnWH &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_v-trExpnSu_rel",
            LOCAL.KEY-SPEC med-k ] ].

;det viser seg at
vise_trExpnDECLrefl := v-trExpnSu-expnDECL_obRefl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trExpnSu_rel"]].

;det viser seg hvorvidt
vise_trExpnYNrefl := v-trExpnSu-expnYN_obRefl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trExpnSu_rel"]].

;det viser seg hvem som
vise_trExpnWFrefl := v-trExpnSu-expnWH_obRefl & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-trExpnSu_rel"]].

interessere_tr-suInterr := v-tr-suINTERR & 
  [ STEM < "interessere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_interessere_v-tr_rel"]].

interessere_tr_suAbsinf := v-tr-suAbsinf & 
  [ STEM < "interessere" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_interessere_v-tr_rel"]].

koste_tr-tr-suAbsinf := v-tr-suAbsinf &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_koste_v-tr_rel" ] ].

; at han kommer antyder at hun kommer
antyde_tr-suDecl-obDecl := v-tr-suDECL_obDECL & 
  [ STEM < "antyde" >,
    INFLECTION nonfstr-et,
    SYNSEM [LKEYS.KEYREL.PRED "_antyde_v-tr_rel"]].

gi_ditr-suDecl := v-ditr-suDECL &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].

gi_ditr-suAbsinf := v-ditr-suAbsinf &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].

; hvorvidt han kommer viser meg løsningen
vise_ditr-suInterr := v-ditr-suINTERR & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

; at han kommer viser oss at han er skyldig
vise_ditr-suDECL_obDECL := v-ditr-suDECL_obDECL & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

; at han kommer viser oss om han er skyldig
vise_ditr-suDECL_obINTERR := v-ditr-suDECL_obINTERR & 
  [ STEM < "vise" >,
    INFLECTION nonfstr-te,
    SYNSEM [LKEYS.KEYREL.PRED "_vise_v-ditr_rel"]].

; hvem som kommer forteller oss hvem som er skyldig
fortelle_ditr-suINTERR_obINTERR := v-ditr-suINTERR_obINTERR & 
  [ STEM < "fortelle" >,
    INFLECTION nonfstr-strong,
    SYNSEM [LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel"]].

adgang_n_masc := masc-relinan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "adgang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adgang_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

akademiker_n_masc := masc-reganim-noun-lxm &
 [ INFLECTION final-full,
   STEM < "akademiker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_akademiker_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

aktivitet_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "aktivitet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aktivitet_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

arbeid := neut-relinan-noun-lxm &
 [ STEM < "arbeid" >,
   INFLECTION final-full-n,
   SYNSEM.LKEYS.KEYREL.PRED "_arbeid_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

barn_n_neut := neut-reganim-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "barn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barn_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bil := masc-dir-noun-lxm &
 [ STEM < "bil" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_bil_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY bil-k ].

bra_stnd-adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "bra" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_bra_a_rel" ].
bra_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "bra" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bra_a_rel" ].
bra_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "bra" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bra_a_rel" ].

bygd_mascorfem := mascorfem-reginan-noun-lxm &
 [ STEM < "bygd" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_bygd_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

by_mascanim := masc-reganim-noun-lxm &
 [ STEM < "by" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_by_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

båt := masc-dir-noun-lxm &
 [ STEM < "båt" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_båt_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY båt-k ].

corner := masc-reginan-noun-lxm &
 [ STEM < "corner" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_corner_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

dal := masc-reginan-noun-lxm &
 [ STEM < "dal" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_dal_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

dyp := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "dyp" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_dyp_a_rel" ].

død_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "død" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_død_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

;død_reg-inh := masc-inher-noun-lxm &
; [ INFLECTION final-full,
;   STEM < "død" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_død_n_rel",
;            LOCAL.CAT.HEAD.KEYS.KEY død-inhcmp ] ].

dårlig := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "dårlig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_dårlig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

elv_masc := mascorfem-reginan-noun-lxm &
 [ STEM < "elv" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_elv_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

ensom_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "ensom" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_ensom_a_rel" ].

farlig_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "farlig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_farlig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

finne_tr := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-tr_rel" ].

; finne ham kvalifisert
finne_tr-secpr-rais := v-trScpr-scObNrg_scAdj &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trScpr_rel" ].

finne_ditr-refl := v-ditr-iobRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-ditr_rel" ].

finne_tr-obl-refl := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.KEY-SPEC i-fct-spec,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trObl_rel" ].

finne_tr-prtcl := v-trPrtclShft &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.KEY-SPEC ut-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trPrtclShft_rel" ].

finne_tr-prtcl_på := v-trPrtclShft &
 [ INFLECTION nonfstr-strong,
   STEM < "finne" >,
   SYNSEM.LOCAL.KEY-SPEC på-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_finne_v-trPrtclShft_rel" ].

fjell := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "fjell" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fjell_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].
flat_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "flat" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_flat_a_rel" ].

flott_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "flott" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_flott_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

flott_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "flott" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flott_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

fly_neut-dirnoun := neut-dir-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "fly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fly_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY fly-k ] ].

forekomme_epon := v-intrExpn-expnDECL &
 [ STEM < "forekomme" >,
    INFLECTION nonfstr-strong,
   SYNSEM.LKEYS.KEYREL.PRED "_forekomme_v-intrExpn_rel" ].

foreløpig_stnsadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "foreløpig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_foreløpig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

fornøyd_stnd-adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "fornøyd" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_fornøyd_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

frisk_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "frisk" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_frisk_a_rel" ].

frispark := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "frispark" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frispark_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

full_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "full" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_full_a_rel" ].

få_tr := v-tr &
  [ STEM < "få" >,
   INFLECTION finstr-tt,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-tr_rel" ].

gammel_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "gammel" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gammel_a_rel" ].

gi_tr-obl := v-trObl &
  [ INFLECTION finstr-tt,
    STEM < "gi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gi_v-trObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY til-assoc ]]> ].

; gjøre mye/ingenting  'q' not sufficient
gjøre_tr-q := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CAT.HEAD q]>,
   SYNSEM.LKEYS.KEYREL.PRED "_gjøre_v-tr_rel" ].

gjøre_tr-pron := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CAT.HEAD pers-pron]>,
   SYNSEM.LKEYS.KEYREL.PRED "_gjøre_v-tr_rel" ].

glad_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "glad" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_glad_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

grønn_stnd := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "grønn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_grønn_a_rel" ].

gå_intrdir := v-intr-suDir &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LOCAL.CONT.HOOK.INDEX.SIT-TYPE activity,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-intr_rel" ].

ha_tr := v-tr &
 [ INFLECTION finstr-tt,
   STEM < "ha" >,
   SYNSEM.LOCAL.CAN-PASTPART-ADJ -,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mainvb-nofreepred,
   SYNSEM.LKEYS.KEYREL.PRED "_ha_v-tr_rel" ].

hav_reg_neut := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "hav" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hav_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

hav_rel_neut := neut-relinan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "hav" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hav_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

hus_neut := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "hus" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hus_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

hytte_mascorfem := fem-reginan-noun-lxm &
 [ STEM < "hytte" >,
   INFLECTION light-e,
   SYNSEM.LKEYS.KEYREL.PRED "_hytte_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

kjenne_obj-rais := v-trScpr-scObNrg_scBareinf &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-tr_rel" ].

høre_obj-rais := v-trScpr-scObNrg_scBareinf &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_høre_v-trScpr_rel" ].

føle_obj-rais := v-trScpr-scObNrg_scBareinf &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-tr_rel" ].

høst_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "høst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_høst_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

jakke_masc := mascorfem-reginan-noun-lxm &
 [ STEM < "jakke" >,
   INFLECTION light-e,
   SYNSEM.LKEYS.KEYREL.PRED "_jakke_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

jente_n_mascorfem := mascorfem-reganim-noun-lxm &
 [ INFLECTION light-e,
   STEM < "jente" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jente_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

jevn_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "jevn" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_jevn_a_rel" ].

kaste_refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-tr_rel" ].

klar_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "klar" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_klar_a_rel" ].

klarne_impers := v-intrImpers &
 [ INFLECTION nonfstr-et,
   STEM < "klarne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_klarne_v-intrImpers_rel" ].

komme_intrdir := v-intr-suDir &
 [ INFLECTION nonfstr-strong,
   STEM < "komme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_komme_v-intr_rel" ].

komme_pres := v-intrPresnt-presDir &
 [ INFLECTION nonfstr-strong,
   STEM < "komme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_komme_v-intrPresnt_rel" ].

konkret_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "konkret" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_konkret_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

kort_neut := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "kort" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kort_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

; unjust ignorance of kings' crowns
;krone_masc := mascorfem-reginan-noun-lxm &
; [ STEM < "krone" >,
;   INFLECTION light-e,
;   SYNSEM.LKEYS.KEYREL.PRED "_krone_n_rel",
;   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

land_neut := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "land" >,
   SYNSEM.LKEYS.KEYREL.PRED "_land_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

lang_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "lang" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_lang_a_rel" ].

lege_n_masc := masc-reganim-noun-lxm &
 [ INFLECTION light-e,
   STEM < "lege" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lege_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

; enough with the secpred version - in v-lrg
;legge_trdir := v-tr-obDir &
; [ STEM < "legge" >,
;   INFLECTION nonfstr-strong,
;   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-tr_rel" ].

lese_tr := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lese_v-tr_rel" ].

like_tr := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "like" >,
   SYNSEM.LKEYS.KEYREL.PRED "_like_v-tr_rel" ].

lærer_masc := masc-relanim-noun-lxm &
 [ STEM < "lærer" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_lærer_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

løpe_intrdir := v-intr-suDir &
 [ INFLECTION nonfstr-strong,
   STEM < "løpe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_løpe_v-intr_rel" ].

løpe_dir-length := v-tr-suDir_obLengthunit &
 [ STEM < "løpe" >,
   INFLECTION nonfstr,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY measnoun,
   SYNSEM.LKEYS.KEYREL.PRED "_løpe_v_rel" ].

løpe_trip := v-tr &
 [ STEM < "løpe" >,
   INFLECTION nonfstr,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY locomotion-event-inhcmp,
   SYNSEM.LKEYS.KEYREL.PRED "_løpe_v_rel" ].

løpe_road := v-tr &
 [ STEM < "løpe" >,
   INFLECTION nonfstr,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY path-of-locomotion-inhcmp,
   SYNSEM.LKEYS.KEYREL.PRED "_løpe_v_rel" ].

løpe_secpr := v-trScpr-scObNrgCsd &
 [ STEM < "løpe" >,
   INFLECTION nonfstr-te,
   SYNSEM.LKEYS.KEYREL.PRED "_løpe_v-trScpr_rel" ].

merkelig_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "merkelig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_merkelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

merkelig_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION nonfstr,
   STEM < "merkelig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_merkelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

merkelig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION nonfstr,
   STEM < "merkelig" >,
   SYNSEM.LKEYS.KEYREL.PRED "_merkelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

modig_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "modig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_modig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

mål_n_neut := neut-relinan-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "mål" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mål_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

måned_reginan := masc-reginan-noun-lxm &
 [ STEM < "måned" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_måned_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

naken_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "naken" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_naken_a_rel" ].

ny_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "ny" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_ny_a_rel" ].

ond_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "ond" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_ond_a_rel" ].

opptatt_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "opptatt" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_opptatt_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

pen_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "pen" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_pen_a_rel" ].

plage_io-epon := v-trExpnSu-expnDECL &
  [ INFLECTION nonfstr-et_or_de,
    STEM < "plage" >,
    SYNSEM.LKEYS.KEYREL.PRED "_plage_v-trExpnSu_rel" ].

plage_tr := v-tr &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "plage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_plage_v-tr_rel" ].

privat_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "privat" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_privat_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

prøve_tr := v-tr &
 [ STEM < "prøve" >,
   INFLECTION nonfstr-et_or_de,
   SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-tr_rel" ].

prøve_n_mascorfem := mascorfem-relinan-noun-lxm &
 [ INFLECTION light-e,
   STEM < "prøve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prøve_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

rar_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "rar" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_rar_a_rel" ].
rar_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "rar" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rar_a_rel" ].
rar_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION finstr,
   STEM < "rar" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rar_a_rel" ].

regn_neut := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "regn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regn_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

regne_tr-prtcl := v-trPrtclShft &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LOCAL.KEY-SPEC ut-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-trPrtclShft_rel" ].

ren_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "ren" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_ren_a_rel" ].

rulle_intrdir := v-intr-suDir &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-intr_rel" ].

rulle_dir-length := v-tr-suDir_obLengthunit &
 [ INFLECTION nonfstr,
   STEM < "rulle" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY measnoun,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v_rel" ].

rød_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "rød" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rød_a_rel" ].

; 'se_trDir suffices
;se_tr := v-tr &
; [ INFLECTION finstr-tt,
;   STEM < "se" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_se_v-tr_rel" ].;

;se_intr-orient := v-intrPath-suDir-PUREORIENTATION &
; [ INFLECTION finstr-tt,
;   STEM < "se" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_se_v-intrPath_rel" ].

;se_tr-orient := v-tr-suDir &
; [ INFLECTION finstr-tt,
;   STEM < "se" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_se_v_rel" ].

se_rais-refl := v-trScpr-scObNrg_obRefl_scBareinf &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-trScpr_rel" ].

se_intr-obl := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LOCAL.KEY-SPEC på-fct-spec,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-intrObl_rel" ].

se_intr-obl-decl := v-intrObl-oblDECL &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LOCAL.KEY-SPEC på-clse,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-intrObl_rel" ].

se_interr := v-intrComp-compINTERR &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-intrComp_rel" ].

sende_tr-dir := v-tr-obDir &
  [ INFLECTION nonfstr-te,
    STEM < "sende" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sende_v-tr_rel" ].

sentral_relinan := masc-relinan-noun-lxm &
 [ STEM < "sentral" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_sentral_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

sentral_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "sentral" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_sentral_a_rel" ].

sikker_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "sikker" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_sikker_a_rel" ].

sikker_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION nonfstr,
   STEM < "sikker" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sikker_a_rel" ].

sikker_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION nonfstr,
   STEM < "sikker" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sikker_a_rel" ].

sitte-intr := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "sitte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sitte_v-intr_rel" ].

sko_mascorfem := mascorfem-reginan-noun-lxm &
 [ STEM < "sko" >,
   INFLECTION infl_m_fshort,
   SYNSEM.LKEYS.KEYREL.PRED "_sko_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

skole_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION light-e,
   STEM < "skole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skole_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

slå_trdir := v-tr-obDir &
 [ STEM < "slå" >,
   INFLECTION finstr-tt,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-tr_rel" ].

snill_stnd := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "snill" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_snill_a_rel" ].

snø_impers := v-intrImpers &
 [ INFLECTION finstr,
   STEM < "snø" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snø_v-intrImpers_rel" ].

snø_noun := masc-reginan-noun-lxm &
 [ STEM < "snø" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_snø_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

sove_telprtcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "sove" >,
   SYNSEM.LOCAL.KEY-SPEC ut-pcl,
   SYNSEM.LKEYS.KEYREL.PRED "_sove_v-intrPrtcl_rel" ].

sparke_trdir := v-tr-obDir &
 [ STEM < "sparke" >,
   INFLECTION nonfstr-et,
   SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-tr_rel" ].

spiller_relanim := masc-relanim-noun-lxm &
 [ STEM < "spiller" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_spiller_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

spise_tr := v-tr &
  [ INFLECTION nonfstr-te,
    STEM < "spise" >,
    SYNSEM.LKEYS.KEYREL.PRED "_spise_v-tr_rel" ].

spise_atelobl-av := v-intrObl-oblN-ACTIVITY &
  [ INFLECTION nonfstr-te,
    STEM < "spise" >,
    SYNSEM.LKEYS.KEYREL.PRED "_spise_v-intrObl_rel",
    SYNSEM.LOCAL.CAT.VAL.ICOMPS < [LOCAL.CAT.HEAD [KEYS.KEY av-atelop ]]> ].

stor_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "stor" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_stor_a_rel" ].

stå_intr := v-intr &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stå_v-intr_rel" ].

svak_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "svak" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_svak_a_rel" ].

syk_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "syk" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_syk_a_rel" ].

synes_io-epon := v-trExpnSu-expnDECL &
 [ STEM < "synes" >,
   INFLECTION nonfstr-te,
   SYNSEM.LKEYS.KEYREL.PRED "_synes_v-trExpnSu_rel" ].

synes_io-rais := v-trScpr-scSuNrg_scInf &
 [ STEM < "synes" >,
   INFLECTION nonfstr-te,
   SYNSEM.LKEYS.KEYREL.PRED "_synes_v-trScpr_rel" ].

synge_intr := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-intr_rel" ].

ta_intrdir := v-intr-suDir &
 [ STEM < "ta" >,
   INFLECTION finstr-tt,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-intr_rel" ].

;ta_trdir-length := v-tr-suDir_obLengthunit &
; [ STEM < "ta" >,
;   INFLECTION finstr-tt,
;   SYNSEM.LKEYS.KEYREL.PRED "_ta_v_rel" ].

tett_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "tett" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_tett_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

tidlig_stnsadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "tidlig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_tidlig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

tre_reginan := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nlong,
   STEM < "tre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tre_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tørr_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "tørr" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_tørr_a_rel" ].

tørke_tr-secpr := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-trScpr_rel" ].

universitet_n_neut := neut-reganim-noun-lxm &
 [ INFLECTION final-full-nlong,
   STEM < "universitet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_universitet_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

unne_ditr := v-ditr &
 [ INFLECTION nonfstr-et,
   STEM < "unne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_unne_v-ditr_rel",
   SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [CONT.HOOK.INDEX.SORT anim-thing] ].

vanskelig_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "vanskelig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_vanskelig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

varm_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "varm" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_varm_a_rel" ].

viktig_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "viktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_viktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

viktig_abs := abs0-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "viktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_viktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

viktig_abs-epon-dcl := abs-adj-epon-decl-lxm &
 [ INFLECTION nonfstr,
   STEM < "viktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_viktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

viktig_abs-epon-inf := abs-adj-epon-infin-lxm &
 [ INFLECTION nonfstr,
   STEM < "viktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_viktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

viktig_abs-nonepon-dcl := abs-adj-nonepon-decl-lxm &
 [ INFLECTION nonfstr,
   STEM < "viktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_viktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

viktig_tough := abs-adj-tough-lxm &
 [ INFLECTION nonfstr,
   STEM < "viktig" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_viktig_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

vinter_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "vinter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vinter_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

vise_tr-interr := v-intrComp-compINTERR &
 [ INFLECTION nonfstr-te,
    STEM < "vise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vise_v-intrComp_rel" ].

vise-tr-obl := v-trObl &
  [ INFLECTION nonfstr-te,
    STEM < "vise" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vise_v-trObl_rel" ].

vite_tr := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "vite" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vite_v-tr_rel" ].

vite_tr-obl := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "vite" >,
   SYNSEM.LOCAL.KEY-SPEC om-topic-of,
   SYNSEM.LKEYS.KEYREL.PRED "_vite_v-trObl_rel" ].

vite_intr-obl := v-intrObl &
 [ INFLECTION nonfstr-strong,
   STEM < "vite" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vite_v-intrObl_rel" ].

vær_regin := neut-reginan-noun-lxm &
 [ INFLECTION final-full-nshort,
   STEM < "vær" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vær_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

økonomisk_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "økonomisk" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_økonomisk_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

åpen_stnd := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "åpen" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_åpen_a_rel" ].

; assuming these can all come from adjectives, and gender is indeterminate, they could be omitted. But then the derivation rules would be more powerful, both bare and non-bare, so probably no difference

engelsk_n_mascorneut := mascorneut-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "engelsk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engelsk_n_rel",
            LOCAL.CONT.HOOK.INDEX.PNG.NG sg,
            LOCAL.CAT.HEAD.KEYS.KEY langage ] ].

norsk_n_mascorneut := mascorneut-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "norsk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_norsk_n_rel",
	    LOCAL.CONT.HOOK.INDEX.PNG.NG sg,
            LOCAL.CAT.HEAD.KEYS.KEY langage ] ].

sjåfør_n_masc := masc-relanim-noun-lxm &
 [ INFLECTION final-full,
   STEM < "sjåfør" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sjåfør_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

genser_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "genser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genser_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

oppholdstillatelse_n_masc := masc-relinan-noun-lxm &
 [ INFLECTION light-e,
   STEM < "oppholdstillatelse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppholdstillatelse_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

gate_n_mascorfem := mascorfem-reginan-noun-lxm &
 [ INFLECTION light-e,
   STEM < "gate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gate_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bestefar_n_masc := masc-relanim-noun-lxm &
 [ INFLECTION final-full,
   STEM < "bestefar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bestefar_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

far_n_masc := masc-relanim-noun-lxm &
 [ INFLECTION final-full,
   STEM < "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

mor_n_mascorfem := mascorfem-relanim-noun-lxm &
 [ INFLECTION final-full,
   STEM < "mor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mor_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

fotball_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "fotball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fotball_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

euro_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "euro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euro_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bygg_n_neut := neut-reginan-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "bygg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bygg_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

sol_n_mascorfem := mascorfem-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "sol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sol_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

soldat_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "soldat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soldat_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bekk_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "bekk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bekk_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

storm_n_masc := masc-reginan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "storm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_storm_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

migrant_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "migrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_migrant_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

anmode_tr-obl := v-trObl &
 [ INFLECTION nonfstr-et,
   STEM < "anmode" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anmode_v-trObl_rel" ].

anta_tr-subord := v-tr-obDECL &
 [ INFLECTION finstr-tt,
   STEM < "anta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anta_v-tr_rel" ].

anta_tv := v-tr &
 [ INFLECTION finstr-tt,
   STEM < "anta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_anta_v-tr_rel" ].

antyde_tr-interr := v-intrComp-compINTERR &
 [ INFLECTION nonfstr-et,
   STEM < "antyde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_antyde_v-intrComp_rel" ].

antyde_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-et,
   STEM < "antyde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_antyde_v-tr_rel" ].

antyde_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "antyde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_antyde_v-tr_rel" ].

avhenge_intr-obl-av := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "avhenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avhenge_v-intrObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

be_intr-obl-for := v-intrObl-oblN &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_be_v-intrObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

be_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_be_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

be_intr-obl-til := v-intrObl-oblN &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_be_v-intrObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

be_iv := v-intr &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM.LKEYS.KEYREL.PRED "_be_v-intr_rel" ].

be_tr-obl-om := v-trObl &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_be_v-trObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

be_tr-obl-på := v-trObl &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_be_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

be_tv := v-tr &
 [ INFLECTION finstr-dd,
   STEM < "be" >,
   SYNSEM.LKEYS.KEYREL.PRED "_be_v-tr_rel" ].

beklage_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-intr_rel" ].

beklage_tr-interr := v-intrComp-compINTERR &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-intrComp_rel" ].

beklage_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-tr_rel" ].

beklage_tr-refl-obl-for := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beklage_v-trObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

beklage_tr-refl-obl-over := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beklage_v-trObl_rel",
            LOCAL.KEY-SPEC over-k ] ].

beklage_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-tr_rel" ].

beklage_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "beklage" >,
   SYNSEM.LKEYS.KEYREL.PRED "_beklage_v-tr_rel" ].

bero_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION finstr-dd,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

bero_iv := v-intr &
 [ INFLECTION finstr-dd,
   STEM < "bero" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bero_v-intr_rel" ].

bli_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "bli" >,
   SYNSEM.LKEYS.KEYREL.PRED "_bli_v-intrPrtcl_rel" ].

;bo_intr-obl-i := v-intrObl-oblN &
; [ INFLECTION finstr-dd,
;   STEM < "bo" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_bo_v_rel",
;            LOCAL.KEY-SPEC i-k ] ].

by_ditr := v-ditr &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM.LKEYS.KEYREL.PRED "_by_v-ditr_rel" ].

by_intr-obl-over := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by_v-intrObl_rel",
            LOCAL.KEY-SPEC over-k ] ].

by_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

by_subj-doublobj-equi := v-ditr-obEqSuInf &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM.LKEYS.KEYREL.PRED "_by_v-ditr_rel" ].

by_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM.LKEYS.KEYREL.PRED "_by_v-trPrtcl_rel" ].

by_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM.LKEYS.KEYREL.PRED "_by_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC ut-k ].

by_tr-obl-på := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

by_tr-obl-til := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by_v-trObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

by_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM.LKEYS.KEYREL.PRED "_by_v-tr_rel" ].

by_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "by" >,
   SYNSEM.LKEYS.KEYREL.PRED "_by_v-tr_rel" ].

dette_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "dette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_dette_v-intrPrtcl_rel" ].

fly_intr-dir := v-intr-suDir &
 [ INFLECTION finstr-dd,
   STEM < "fly" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fly_v-intr_rel" ].

fly_iv := v-intr &
 [ INFLECTION finstr-dd,
   STEM < "fly" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fly_v-intr_rel" ].

fly_trip := v-tr &
 [ INFLECTION finstr-dd,
   STEM < "fly" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY locomotion-event-inhcmp,
   SYNSEM.LKEYS.KEYREL.PRED "_fly_v-tr_rel" ].

fly_vehicle := v-tr &
 [ INFLECTION finstr-dd,
   STEM < "fly" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY vehicle-for-locomotion-inhcmp,
;   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-vehicle,
   SYNSEM.LKEYS.KEYREL.PRED "_fly_v-tr_rel" ].

fly_road := v-tr &
 [ INFLECTION finstr-dd,
   STEM < "fly" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY path-of-locomotion-inhcmp,
;   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CONT.HOOK.INDEX.SORT one-dim-thing-path,
   SYNSEM.LKEYS.KEYREL.PRED "_fly_v-tr_rel" ].


flytte_intr-obl-fra := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flytte_v-intrObl_rel",
            LOCAL.KEY-SPEC fra-k ] ].

flytte_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flytte_v-intr_rel" ].

flytte_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flytte_v-trScpr_rel" ].

flytte_tr-obl := v-trObl &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flytte_v-trObl_rel" ].

flytte_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "flytte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_flytte_v-tr_rel" ].

forekomme_iv := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "forekomme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forekomme_v-intr_rel" ].

forsøke_subj-equi := v-tr-obEqInf &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forsøke_v-tr_rel" ].

forsøke_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forsøke_v-tr_rel" ].

forsøke_tr-refl-obl-med := v-trObl-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forsøke_v-trObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

forsøke_tr-refl-obl-på := v-trObl-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forsøke_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

forsøke_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "forsøke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forsøke_v-tr_rel" ].

fortelle_ditr := v-ditr &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel" ].

fortelle_ditr-subord := v-ditr-obDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-ditr_rel" ].

fortelle_tr-interr := v-intrComp-compINTERR &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-intrComp_rel" ].

fortelle_tr-obl-om := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortelle_v-trObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

fortelle_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-tr_rel" ].

fortelle_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-tr_rel" ].

fortelle_intrObl-inf := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr-strong,
   STEM < "fortelle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fortelle_v-tr_rel" ].

forutsette_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "forutsette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-tr_rel" ].

forutsette_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "forutsette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_forutsette_v-tr_rel" ].

frykte_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-intrObl_rel" ].

frykte_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-tr_rel" ].

frykte_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "frykte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_frykte_v-tr_rel" ].

fylle_intr-obl-med := v-intrObl-oblN &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_v-intrObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

fylle_tr-arg12-secpred-opp := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "fylle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fylle_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC opp-k ].

fylle_tr-arg12-secpred-igjen := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "fylle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fylle_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC igjen-k ].

fylle_tr-obl-med := v-trObl &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_v-trObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

fylle_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "fylle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fylle_v-tr_rel" ].

fylle_tv := v-tr &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "fylle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_fylle_v-tr_rel" ].

få_ditr-refl := v-ditr-iobRefl &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-ditr_rel" ].

få_obj-eq-pp := v-trObl-oblEqObInf &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-trObl_rel" ].

få_obj-eq-pp-refl := v-trObl-obRefl_oblEqObInf &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-trObl_rel" ].

få_tr-arg1-secpred := v-trScpr-scObNrgCsd &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-trScpr_rel" ].

få_tr-obl-av := v-trObl &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_få_v-trObl_rel",
            LOCAL.KEY-SPEC av-k ] ].

få_tr-obl-fra := v-trObl &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_få_v-trObl_rel",
            LOCAL.KEY-SPEC fra-k ] ].

få_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION finstr-tt,
   STEM < "få" >,
   SYNSEM.LKEYS.KEYREL.PRED "_få_v-trScprShft_rel" ].

føle_intr-obl-med := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_føle_v-intrObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

føle_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_føle_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

føle_tr-detachposs := v-trObl-oblPRTOFob &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-trObl_rel" ].

føle_tr-refl-dir := v-trPath-obRefl_obDir &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-trPath_rel" ].

føle_tr-refl-rais := v-trScpr-scObNrg_obRefl_scAdj &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-trScpr_rel" ].

føle_tr-refl-rais-som := v-trScpr-scObNrg_obRefl_scPredprtclSom &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-trScpr_rel" ].

føle_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-tr_rel" ].

føle_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "føle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_føle_v-tr_rel" ].

gi_ditr := v-ditr &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-ditr_rel" ].

gi_intr-obl-til := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gi_v-intrObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

gi_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-intrPrtcl_rel" ].

gi_obj-eq-pp-refl-14 := v-trObl-obRefl_oblEqObInf &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-trObl_rel" ].

gi_tr-arg1-refl-telicpart-12 := v-trPrtcl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-trPrtcl_rel" ].

gi_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-trScprShft_rel" ].

gi_tr-refl := v-tr-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-tr_rel" ].

gi_tr-refl-obl-13 := v-trObl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-trObl_rel" ].

gi_tr-subord := v-tr-obDECL &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-tr_rel" ].

gi_tv := v-tr &
 [ INFLECTION finstr-tt,
   STEM < "gi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gi_v-tr_rel" ].

gjette_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "gjette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjette_v-intr_rel" ].

gjette_tr-refl-obl-til := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "gjette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gjette_v-trObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

gjette_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-et,
   STEM < "gjette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjette_v-tr_rel" ].

gjette_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "gjette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjette_v-tr_rel" ].

gjøre_tr-secpr-nonv := v-trScpr-scObNrg_scPredprtclTil &
 [ INFLECTION nonfstr-strong,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjøre_v-trScpr_rel" ].

gjøre_tr := v-tr &
 [ INFLECTION nonfstr,
   STEM < "gjøre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gjøre_v_rel" ].

grense_intr-obl-til := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "grense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grense_v-intrObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

gå_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-trPrtcl_rel" ].

gå_tr-secpred-arg1-refl := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v-trScpr_rel" ].

gå_dir-length := v-tr-suDir_obLengthunit &
 [ INFLECTION finstr-tt,
   STEM < "gå" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY measnoun,
   SYNSEM.LKEYS.KEYREL.PRED "_gå_v_rel" ].

ha_ditr-refl := v-ditr-iobRefl &
 [ INFLECTION finstr-tt,
   STEM < "ha" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ha_v-ditr_rel" ].

hende_iv := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "hende" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hende_v-intr_rel" ].

hjelpe_intr-obl-mot := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hjelpe_v-intrObl_rel",
            LOCAL.KEY-SPEC mot-k ] ].

hjelpe_tr-obl-med := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hjelpe_v-trObl_rel"] ].

hjelpe_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hjelpe_v-intrPrtcl_rel" ].

hjelpe_iv := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hjelpe_v-intr_rel" ].

hjelpe_obj-eq-pp := v-trObl-oblEqObInf &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hjelpe_v-trObl_rel" ].

hjelpe_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hjelpe_v-trScpr_rel" ].

hjelpe_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "hjelpe" >,
   SYNSEM.LKEYS.KEYREL.PRED "_hjelpe_v-tr_rel" ].

holde_intr-obl-for := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "holde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holde_v-intrObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

holde_tr-refl-obl-for := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "holde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holde_v-trObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

holde_tr-secpred-arg1-refl := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "holde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_holde_v-trScpr_rel" ].

holde_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "holde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_holde_v-tr_rel" ].

håpe_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "håpe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_håpe_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

;håpe_subj-equi := v-tr-obEqInf &
; [ INFLECTION nonfstr-et_or_te,
;   STEM < "håpe" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_håpe_v-tr_rel" ].

høre_intr-obl-etter := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_høre_v-intrObl_rel",
            LOCAL.KEY-SPEC etter-k ] ].

høre_intr-obl-fra := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_høre_v-intrObl_rel",
            LOCAL.KEY-SPEC fra-k ] ].

høre_intr-obl-med := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_høre_v-intrObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

høre_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_høre_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

høre_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_høre_v-intrPrtcl_rel" ].

høre_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_høre_v-tr_rel" ].

høre_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "høre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_høre_v-tr_rel" ].

høres_iv := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "høres" >,
   SYNSEM.LKEYS.KEYREL.PRED "_høres_v-intr_rel" ].

interessere_obj-eq-pp-refl := v-trObl-obRefl_oblEqObInf &
 [ INFLECTION nonfstr-te,
   STEM < "interessere" >,
   SYNSEM.LKEYS.KEYREL.PRED "_interessere_v-trObl_rel" ].

interessere_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "interessere" >,
   SYNSEM.LKEYS.KEYREL.PRED "_interessere_v-tr_rel" ].

interessere_tr-refl-obl-for := v-trObl-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "interessere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interessere_v-trObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

interessere_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "interessere" >,
   SYNSEM.LKEYS.KEYREL.PRED "_interessere_v-tr_rel" ].

kalle_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "kalle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kalle_v-intrObl_rel" ].

kalle_iv := v-intr &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "kalle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kalle_v-intr_rel" ].

kalle_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "kalle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kalle_v-trScpr_rel" ].

kalle_tr-obl-for := v-trObl &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "kalle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kalle_v-trObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

kalle_tr-refl-rais := v-trScpr-scObNrg_obRefl_scAdj &
 [ INFLECTION nonfstr-et_or_te,
   STEM < "kalle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kalle_v-trScpr_rel" ].

kaste_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-intrObl_rel" ].

kaste_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kaste_v-intrPrtcl_rel",
            LOCAL.KEY-SPEC opp-k ] ].

kaste_tr-detachposs-refl := v-trObl-obRefl_oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-trObl_rel" ].

kaste_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION nonfstr-et,
   STEM < "kaste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kaste_v-trScprShft_rel" ].

kjenne_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kjenne_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

kjenne_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-intrPrtcl_rel" ].

kjenne_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-trPrtcl_rel" ].

kjenne_tr-refl-rais-som := v-trScpr-scObNrg_obRefl_scPredprtclSom &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-trScpr_rel" ].

kjenne_tr-secpr-som := v-trScpr-scObNrg_scPredprtclSom &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-trScpr_rel" ].

kjenne_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-tr_rel" ].

kjenne_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "kjenne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kjenne_v-tr_rel" ].

klarne_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "klarne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_klarne_v-intr_rel" ].

kle_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION finstr-dd,
   STEM < "kle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kle_v-trPrtcl_rel",
   SYNSEM.LOCAL.KEY-SPEC ut-k ].

kle_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION finstr-dd,
   STEM < "kle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kle_v-trScpr_rel" ].

kle_tr-refl := v-tr-obRefl &
 [ INFLECTION finstr-dd,
   STEM < "kle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kle_v-tr_rel" ].

kle_tv := v-tr &
 [ INFLECTION finstr-dd,
   STEM < "kle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kle_v-tr_rel" ].

koke_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-trScpr_rel" ].

koke_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "koke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koke_v-tr_rel" ].

komme_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "komme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_komme_v-intrPrtcl_rel" ].

komme_tr-refl-11 := v-tr-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "komme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_komme_v-tr_rel" ].

komme_tr-refl-obl-12 := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "komme" >,
   SYNSEM.LKEYS.KEYREL.PRED "_komme_v-trObl_rel" ].

koste_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koste_v-intrObl_rel" ].

koste_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koste_v-intr_rel" ].

koste_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "koste" >,
   SYNSEM.LKEYS.KEYREL.PRED "_koste_v-tr_rel" ].

kunne_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "kunne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_kunne_v-tr_rel" ].

late_pp-shft := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION nonfstr-et,
   STEM < "late" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_v-trScprShft_rel",
            LOCAL.KEY-SPEC etter-k ] ].

late_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "late" >,
   SYNSEM.LKEYS.KEYREL.PRED "_late-seg_v-tr_rel" ].

late_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "late" >,
   SYNSEM.LKEYS.KEYREL.PRED "_late_v-tr_rel" ].

legge_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-intrObl_rel" ].

legge_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-intrPrtcl_rel" ].

legge_tr-arg12-secpred := v-trScpr-scObArgCsd &  ; removed _scLoc, to get 'legge turen mot nord'
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-trScpr_rel" ].

legge_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-trScprShft_rel" ].

legge_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-tr_rel" ].

legge_tr-refl-obl-bak := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legge_v-trObl_rel",
            LOCAL.KEY-SPEC bak-k ] ].

legge_tr-refl-obl-i := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legge_v-trObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

legge_tr-refl-obl-inni := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legge_v-trObl_rel",
            LOCAL.KEY-SPEC inni-k ] ].

legge_tr-refl-obl-på := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legge_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

legge_tr-refl-obl-under := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legge_v-trObl_rel",
            LOCAL.KEY-SPEC under-k ] ].

legge_tr-secpred-arg1-refl := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "legge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_legge_v-trScpr_rel" ].

lese_intr-obl-i := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lese_v-intrObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

lese_intr-obl-igjennom := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lese_v-intrObl_rel",
            LOCAL.KEY-SPEC igjennom-k ] ].

lese_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lese_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

lese_intr-obl-til := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lese_v-intrObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

lese_iv := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lese_v-intr_rel" ].

lese_tr-arg12-secpred-ut := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "lese" >,
   SYNSEM [LKEYS.KEYREL.PRED "_lese_v-trScpr_rel",
            LOCAL.CAT.QVAL.PREDIC.LOCAL.CAT.HEAD.KEYS.KEY ut-k] ].

ligge_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "ligge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ligge_v-intrPrtcl_rel" ].

like_subj-equi := v-tr-obEqInf &
 [ INFLECTION nonfstr-te,
   STEM < "like" >,
   SYNSEM.LKEYS.KEYREL.PRED "_like_v-tr_rel" ].

like_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "like" >,
   SYNSEM.LKEYS.KEYREL.PRED "_like_v-tr_rel" ].

like_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-te,
   STEM < "like" >,
   SYNSEM.LKEYS.KEYREL.PRED "_like_v-tr_rel" ].

lite_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr,
   STEM < "lite" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lite_v-intrObl_rel",
   SYNSEM.LOCAL.KEY-SPEC på-k ].

love_ditr := v-ditr &
 [ INFLECTION nonfstr,
   STEM < "love" >,
   SYNSEM.LKEYS.KEYREL.PRED "_love_v-ditr_rel" ].

love_ditr-subord := v-ditr-obDECL &
 [ INFLECTION nonfstr,
   STEM < "love" >,
   SYNSEM.LKEYS.KEYREL.PRED "_love_v-ditr_rel" ].

love_iv := v-intr &
 [ INFLECTION nonfstr,
   STEM < "love" >,
   SYNSEM.LKEYS.KEYREL.PRED "_love_v-intr_rel" ].

love_subj-equi := v-tr-obEqInf &
 [ INFLECTION nonfstr,
   STEM < "love" >,
   SYNSEM.LKEYS.KEYREL.PRED "_love_v-tr_rel" ].

love_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr,
   STEM < "love" >,
   SYNSEM.LKEYS.KEYREL.PRED "_love_v-tr_rel" ].

lukte_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "lukte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lukte_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

lukte_intr-obladv := v-intrAdv &
 [ INFLECTION nonfstr-et,
   STEM < "lukte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lukte_v-intrAdv_rel" ].

lukte_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "lukte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lukte_v-tr_rel" ].

lure_obj-eq-pp-refl := v-trObl-obRefl_oblEqObInf &
 [ INFLECTION nonfstr-te,
   STEM < "lure" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lure_v-trObl_rel" ].

lure_tr-refl-dir := v-trPath-obRefl_obDir &
 [ INFLECTION nonfstr-te,
   STEM < "lure" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lure_v-trPath_rel" ].

lure_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "lure" >,
   SYNSEM.LKEYS.KEYREL.PRED "_lure_v-tr_rel" ].

;måtte_intr-obl := v-intrObl-oblN &
; [ INFLECTION nonfstr-strong,
;   STEM < "måtte" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_måtte_v-intrObl_rel" ].

;måtte_intr-telicpartcl := v-intrPrtcl &
; [ INFLECTION nonfstr-strong,
;   STEM < "måtte" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_måtte_v-intrPrtcl_rel" ].

oppholde_tr-refl-obl-bak := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "oppholde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppholde_v-trObl_rel",
            LOCAL.KEY-SPEC bak-k ] ].

oppholde_tr-refl-obl-i := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "oppholde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppholde_v-trObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

oppholde_tr-refl-obl-på := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "oppholde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppholde_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

oppholde_tr-refl-obl-under := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "oppholde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppholde_v-trObl_rel",
            LOCAL.KEY-SPEC under-k ] ].

oppholde_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "oppholde" >,
   SYNSEM.LKEYS.KEYREL.PRED "_oppholde_v-tr_rel" ].

overraske_intr-obl-med := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_v-intrObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

overraske_tr-obl-med := v-trObl &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_v-trObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

overraske_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "overraske" >,
   SYNSEM.LKEYS.KEYREL.PRED "_overraske_v-tr_rel" ].

prøve_obj-eq-pp-refl := v-trObl-obRefl_oblEqObInf &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-trObl_rel" ].

prøve_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-trPrtcl_rel",
   SYNSEM.LOCAL.KEY-SPEC frem-k ].

prøve_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC ut-k ].

prøve_tr-obl := v-trObl &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-trObl_rel" ].

prøve_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM.LKEYS.KEYREL.PRED "_prøve_v-tr_rel" ].

prøve_tr-refl-obl-med := v-trObl-obRefl &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prøve_v-trObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

prøve_tr-refl-obl-på := v-trObl-obRefl &
 [ INFLECTION nonfstr-et_or_de,
   STEM < "prøve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prøve_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

regne_intr-dir := v-intr-suDir &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-intr_rel" ].

regne_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-intrObl_rel" ].

regne_tr-secpr-som := v-trScpr-scObNrg_scPredprtclSom &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-trScpr_rel" ].

regne_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "regne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_regne_v-tr_rel" ].

reise_intr-dir := v-intr-suDir &
 [ INFLECTION nonfstr-te,
   STEM < "reise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_v-intr_rel" ].

reise_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-te,
   STEM < "reise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_v-intrPrtcl_rel" ].

reise_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "reise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_v-trPrtcl_rel",
   SYNSEM.LOCAL.KEY-SPEC opp-k ].

reise_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "reise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC opp-k ].

reise_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "reise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_v-tr_rel" ].

reise_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "reise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_reise_v-tr_rel" ].

rulle_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-intrObl_rel" ].

rulle_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-trPrtcl_rel" ].

rulle_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-trScpr_rel" ].

rulle_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "rulle" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rulle_v-tr_rel" ].

røre_intr-obl-ved := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "røre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_røre_v-intrObl_rel",
            LOCAL.KEY-SPEC ved-k ] ].

røre_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "røre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_røre_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC rundt-k ].

røre_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "røre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_røre_v-tr_rel" ].

røre_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "røre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_røre_v-tr_rel" ].

sammenligne_tr-refl-obl-med := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "sammenligne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sammenligne_v-trObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

sammenligne_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "sammenligne" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sammenligne_v-tr_rel" ].

se_intr-telicpartcl-opp := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_se_v-intrPrtcl_rel",
            LOCAL.KEY-SPEC opp-k ] ].

se_subj-equi := v-tr-obEqInf &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-tr_rel" ].

se_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-trPrtcl_rel" ].

se_tr-subord := v-tr-obDECL &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-tr_rel" ].

se_tr-obV := v-tr-obDECL_obV &
 [ INFLECTION finstr-tt,
   STEM < "se" >,
   SYNSEM.LKEYS.KEYREL.PRED "_se_v-tr_rel" ].

sende_ditr := v-ditr &
 [ INFLECTION nonfstr-te,
   STEM < "sende" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sende_v-ditr_rel" ].

sette_intr-telicpartcl-10 := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sette_v-intrPrtcl_rel" ].

sette_subj-eq-pp := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sette_v-intrObl_rel" ].

sette_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sette_v-trPrtcl_rel" ].

sette_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sette_v-trScprShft_rel" ].

sette_tr-refl-obl-i := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sette_v-trObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

sette_tr-refl-obl-på := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "sette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sette_v-trObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

sitte_intr-obl-i := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "sitte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sitte_v-intrObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

sitte_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "sitte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sitte_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

sitte_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "sitte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sitte_v-intrPrtcl_rel" ].

sitte_tr-arg1-secpred := v-trScpr-scObNrgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "sitte" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sitte_v-trScpr_rel" ].

skamme_tr-refl-obl-for := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "skamme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skamme_v-trObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

skamme_tr-refl-obl-over := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "skamme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skamme_v-trObl_rel",
            LOCAL.KEY-SPEC over-k ] ].

skrive_ditr := v-ditr &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skrive_v-ditr_rel" ].

skrive_intr-obl-for := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skrive_v-intrObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

skrive_intr-obl-i := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skrive_v-intrObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

skrive_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skrive_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

skrive_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skrive_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

skrive_intr-obl-til := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skrive_v-intrObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

skrive_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skrive_v-intrPrtcl_rel" ].

skrive_iv := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skrive_v-intr_rel" ].

skrive_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skrive_v-trScpr_rel" ].

skrive_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skrive_v-trScprShft_rel" ].

skrive_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "skrive" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skrive_v-tr_rel" ].

slå_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slå_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

slå_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-intrPrtcl_rel" ].

slå_iv-13 := v-intr &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-intr_rel" ].

slå_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-trPrtcl_rel" ].

slå_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-trScpr_rel" ].

slå_tr-detachposs-refl-11 := v-trObl-obRefl_oblPRTOFob &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-trObl_rel" ].

slå_tr-ppshift-10 := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-trScprShft_rel" ].

slå_tr-refl := v-tr-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-tr_rel" ].

slå_tr-refl-obl-17-til := v-trObl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slå_v-trObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

slå_tr-secpred-arg1-refl-19 := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION finstr-tt,
   STEM < "slå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_slå_v-trScpr_rel" ].

smake_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "smake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smake_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

smake_intr-secpr := v-intrScpr-scSuNrgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "smake" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smake_v-intrScpr_rel" ].

smake_iv := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "smake" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smake_v-intr_rel" ].

smake_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "smake" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smake_v-tr_rel" ].

smyge_tr-refl-dir := v-trPath-obRefl_obDir &
 [ INFLECTION nonfstr-strong,
   STEM < "smyge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_smyge_v-trPath_rel" ].

snakke_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intrPrtcl_rel" ].

snakke_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-intr_rel" ].

snakke_tr-arg12-refl-secpred := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "snakke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snakke_v-trScpr_rel" ].

snø_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-dd,
   STEM < "snø" >,
   SYNSEM.LKEYS.KEYREL.PRED "_snø_v-intrPrtcl_rel" ].

sove_tr-arg1-refl-secpred := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "sove" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sove_v-trScpr_rel" ].

sparke_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "sparke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sparke_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

sparke_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-et,
   STEM < "sparke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-intrPrtcl_rel" ].

sparke_tr-detachposs := v-trObl-oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "sparke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sparke_v-trObl_rel" ].

spise_iv := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-intr_rel" ].

spise_tr-refl-obl := v-trObl-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-trObl_rel" ].

spise_tr-secpred-arg1-refl := v-trScpr-scObNrgCsd_obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "spise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spise_v-trScpr_rel" ].

sprekke_iv := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "sprekke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sprekke_v-intr_rel" ].

spørre_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spørre_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

spørre_iv := v-intr &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spørre_v-intr_rel" ].

spørre_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spørre_v-trPrtcl_rel" ].

spørre_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spørre_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC ut-k ].

spørre_tr-obl-om := v-trObl &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spørre_v-trObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

spørre_tr-refl-obl-om := v-trObl-obRefl &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spørre_v-trObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

spørre_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "spørre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_spørre_v-tr_rel" ].

stå_intr-obl-for := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stå_v-intrObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

stå_intr-obl-over := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stå_v-intrObl_rel",
            LOCAL.KEY-SPEC over-k ] ].

stå_intr-obl-på := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stå_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

stå_intr-obl-ved := v-intrObl-oblN &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stå_v-intrObl_rel",
            LOCAL.KEY-SPEC ved-k ] ].

stå_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stå_v-intrPrtcl_rel" ].

stå_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stå_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC av-k ].

stå_tr-refl := v-tr-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "stå" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stå_v-tr_rel" ].

synes_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "synes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synes_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

synes_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-te,
   STEM < "synes" >,
   SYNSEM.LOCAL.CAT.QVAL.DOBJECT.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-at,
   SYNSEM.LKEYS.KEYREL.PRED "_synes_v-tr_rel" ].

synge_intr-obl-for := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synge_v-intrObl_rel",
            LOCAL.KEY-SPEC for-k ] ].

synge_intr-obl-med := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synge_v-intrObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

synge_intr-obl-om := v-intrObl-oblN &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synge_v-intrObl_rel",
            LOCAL.KEY-SPEC om-k ] ].

synge_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-strong,
   STEM < "synge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_synge_v-intrPrtcl_rel" ].

så_iv := v-intr &
 [ INFLECTION finstr-dd,
   STEM < "så" >,
   SYNSEM.LKEYS.KEYREL.PRED "_så_v-intr_rel" ].

så_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION finstr-dd,
   STEM < "så" >,
   SYNSEM.LKEYS.KEYREL.PRED "_så_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC til-k ].

så_tv := v-tr &
 [ INFLECTION finstr-dd,
   STEM < "så" >,
   SYNSEM.LKEYS.KEYREL.PRED "_så_v-tr_rel" ].

søke_intr-obl-etter := v-intrObl-oblN &
 [ INFLECTION nonfstr-te,
   STEM < "søke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_søke_v-intrObl_rel",
            LOCAL.KEY-SPEC etter-k ] ].

søke_iv := v-intr &
 [ INFLECTION nonfstr-te,
   STEM < "søke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_søke_v-intr_rel" ].

søke_subj-equi := v-tr-obEqInf &
 [ INFLECTION nonfstr-te,
   STEM < "søke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_søke_v-tr_rel" ].

søke_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "søke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_søke_v-tr_rel" ].

ta_ditr-refl-20 := v-ditr-iobRefl &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-ditr_rel" ].

ta_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-intrPrtcl_rel" ].

ta_tr-arg1-refl-telicpart := v-trPrtcl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trPrtcl_rel" ].

ta_tr-detachposs-refl := v-trObl-obRefl_oblPRTOFob &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trObl_rel" ].

ta_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trScprShft_rel" ].

ta_tr-refl-obl-15 := v-trObl-obRefl &
 [ INFLECTION finstr-tt,
   STEM < "ta" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ta_v-trObl_rel" ].

tillate_ditr := v-ditr &
 [ INFLECTION nonfstr-strong,
   STEM < "tillate" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tillate_v-ditr_rel" ].

tillate_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "tillate" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tillate_v-tr_rel" ].

tillate_tv := v-tr &
 [ INFLECTION nonfstr-strong,
   STEM < "tillate" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tillate_v-tr_rel" ].

trenge_subj-equi := v-tr-obEqInf &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-tr_rel" ].

trenge_tr-arg12-secpred := v-trScpr-scObArgCsd_scEndpt &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-trScpr_rel" ].

trenge_tr-arg12-reflsecpred_på := v-trScpr-obRefl_scObArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC på-k ].

trenge_tr-arg12-reflsecpred_frem := v-trScpr-obRefl_scObArgCsd &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-trScpr_rel",
   SYNSEM.LOCAL.KEY-SPEC frem-k ].

trenge_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "trenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_trenge_v-tr_rel" ].

tørke_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-intrPrtcl_rel" ].

tørke_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-intr_rel" ].

tørke_tr-ppshift := v-trScprShft-scObNrgRes_scPP-PLACEMENT &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-trScprShft_rel" ].

tørke_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "tørke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_tørke_v-tr_rel" ].

undre_intr-obl := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-intrObl_rel" ].

undre_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM.LKEYS.KEYREL.PRED "_undre_v-tr_rel" ].

undre_tr-refl-obl-over := v-trObl-obRefl &
 [ INFLECTION nonfstr-et,
   STEM < "undre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undre_v-trObl_rel",
            LOCAL.KEY-SPEC over-k ] ].

vaske_intr := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "vaske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-intr_rel" ] ].

vaske_intr-obl-i := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "vaske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-intrObl_rel",
            LOCAL.KEY-SPEC i-k ] ].

vaske_intr-obl-med := v-intrObl-oblN &
 [ INFLECTION nonfstr-et,
   STEM < "vaske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vaske_v-intrObl_rel",
            LOCAL.KEY-SPEC med-k ] ].

vaske_intr-telicpartcl := v-intrPrtcl &
 [ INFLECTION nonfstr-et,
   STEM < "vaske" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vaske_v-intrPrtcl_rel" ].

vaske_tr-arg12-secpred := v-trScpr-scObArgCsd &
 [ INFLECTION nonfstr-et,
   STEM < "vaske" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vaske_v-trScpr_rel" ].

vaske_tr-detachposs-refl := v-trObl-obRefl_oblPRTOFob &
 [ INFLECTION nonfstr-et,
   STEM < "vaske" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vaske_v-trObl_rel" ].

vente_subj-eq-pp := v-intrObl-oblEqSuInf &
 [ INFLECTION nonfstr-et,
   STEM < "vente" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vente_v-intrObl_rel" ].

vente_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-et,
   STEM < "vente" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vente_v-tr_rel" ].

vente_tv := v-tr &
 [ INFLECTION nonfstr-et,
   STEM < "vente" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vente_v-tr_rel" ].

ville_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-strong,
   STEM < "ville" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ville_v-tr_rel" ].

virke_intr-obl-på := v-intrObl &
 [ INFLECTION nonfstr-et,
   STEM < "virke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virke_v-intrObl_rel",
            LOCAL.KEY-SPEC på-k ] ].

virke_iv := v-intr &
 [ INFLECTION nonfstr-et,
   STEM < "virke" >,
   SYNSEM.LKEYS.KEYREL.PRED "_virke_v-intr_rel" ].

vise_intr-obl-til := v-intrObl &
 [ INFLECTION nonfstr-te,
   STEM < "vise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vise_v-intrObl_rel",
            LOCAL.KEY-SPEC til-k ] ].

vise_tr-refl := v-tr-obRefl &
 [ INFLECTION nonfstr-te,
   STEM < "vise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vise_v-tr_rel" ].

vise_tr-subord := v-tr-obDECL &
 [ INFLECTION nonfstr-te,
   STEM < "vise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vise_v-tr_rel" ].

vise_tv := v-tr &
 [ INFLECTION nonfstr-te,
   STEM < "vise" >,
   SYNSEM.LKEYS.KEYREL.PRED "_vise_v-tr_rel" ].

afghansk_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "afghansk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afghansk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

alene_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "alene" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alene_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

behagelig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "behagelig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behagelig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

billig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "billig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

blå_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "blå" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blå_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

død_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "død" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_død_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

engelsk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "engelsk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engelsk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

feig_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "feig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

fransk_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "fransk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fransk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

hurtig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "hurtig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurtig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

hvit_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "hvit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hvit_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

indisk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "indisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indisk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

irakisk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "irakisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irakisk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

japansk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "japansk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_japansk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kald_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "kald" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kald_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kinesisk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "kinesisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kinesisk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kjedelig_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "kjedelig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kjedelig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kort_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "kort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kort_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kraftig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "kraftig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kraftig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

langsom_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "langsom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_langsom_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

lav_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "lav" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lav_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

ledig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "ledig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ledig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

lett_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "lett" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lett_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

levende_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "levende" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_levende_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

oppmuntrende_adj := stnd-adj-lxm &
  [ INFLECTION finstr,
    STEM < "oppmuntrende" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_oppmuntrende_a_rel",
             LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

likedan_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "likedan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_likedan_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

liten_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "liten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liten_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

mektig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "mektig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mektig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

merkelig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "merkelig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merkelig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

mild_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "mild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

mulig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "mulig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mulig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

norsk_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "norsk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_norsk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

nøyaktig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "nøyaktig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nøyaktig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

palestinsk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "palestinsk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palestinsk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

presis_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "presis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presis_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

rask_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "rask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rask_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

selvsagt_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "selvsagt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_selvsagt_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

sen_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "sen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sen_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

;sjelden_adj := stnd-adj-lxm &
; [ INFLECTION nonfstr,
;   STEM < "sjelden" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_sjelden_a_rel",
;            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

skitten_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "skitten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skitten_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

slem_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "slem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slem_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

stygg_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "stygg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stygg_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

svart_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "svart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_svart_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

syrisk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "syrisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_syrisk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tom_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "tom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tom_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

trist_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "trist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trist_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tysk_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "tysk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tysk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

umulig_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "umulig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_umulig_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

ung_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "ung" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ung_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

vanskelig_abs-epon-dcl := abs-adj-epon-decl-lxm &
  [ INFLECTION nonfstr,
    STEM < "vanskelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vanskelig_a_rel" ].

vond_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "vond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vond_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

advokat_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "advokat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advokat_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

amerikansk_adj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "amerikansk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amerikansk_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

ansettelse_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "ansettelse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ansettelse_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

barnebarn_n_neut := neut-re-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "barnebarn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barnebarn_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bero_n_neut := neut-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "bero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bero_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bestemor_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "bestemor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bestemor_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bo_n_neut := neut-re-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "bo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bo_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

bukse_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "bukse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bukse_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

dollar_n_masc := masc-re-noun-lxm &
 [ INFLECTION infl_mshort,
   STEM < "dollar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

dommer_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "dommer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dommer_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

elektriker_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "elektriker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elektriker_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

eng_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "eng" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eng_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

fengsel_n_neut := neut-re-noun-lxm &
 [ INFLECTION final-full-nlong,
   STEM < "fengsel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fengsel_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

finne_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "finne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finne_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].
;
fjord_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "fjord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fjord_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

flukt_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "flukt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flukt_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

fransk_n_mascorneut := mascorneut-re-noun-lxm &
 [ INFLECTION infl_m_nshort,
   STEM < "fransk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fransk_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

frihet_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "frihet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frihet_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

fylle_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "fylle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fylle_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

gang_n_masc := masc-relinan-noun-lxm &
 [ INFLECTION final-full,
   STEM < "gang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gang_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

gram_neut-meas := neut-measure-weight-noun-lxm &
 [ INFLECTION final-full-mm-nshort,
   STEM < "gram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gram_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY measurnoun ] ].

grense_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "grense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grense_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

ham_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full-mm,
   STEM < "ham" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ham_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

heller_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "heller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heller_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

hjem_n_neut := neut-re-noun-lxm &
 [ INFLECTION final-full-mm-nshort,
   STEM < "hjem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hjem_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

hotell_n_neut := neut-re-noun-lxm &
 [ INFLECTION final-full-n,
   STEM < "hotell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotell_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

håndverker_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "håndverker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_håndverker_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

innkast_n_neut := neut-re-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "innkast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_innkast_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

japansk_n_mascorneut := mascorneut-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "japansk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_japansk_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

kinesisk_n_mascorneut := mascorneut-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "kinesisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kinesisk_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

mottak_n_neut := neut-re-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "mottak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mottak_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].
måne_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "måne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_måne_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

natt_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "natt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_natt_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

onkel_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "onkel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_onkel_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

overraske_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "overraske" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overraske_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

pike_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "pike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pike_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

plen_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "plen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plen_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

reise_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "reise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reise_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

reserve_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "reserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reserve_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

rådgiver_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "rådgiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rådgiver_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

rørlegger_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "rørlegger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rørlegger_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

skjorte_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "skjorte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skjorte_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

sne_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "sne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sne_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

snekker_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "snekker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snekker_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

straffespark_n_neut := neut-re-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "straffespark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straffespark_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tante_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "tante" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tante_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tiende_n_masc := masc-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "tiende" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiende_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

trener_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "trener" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trener_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tysk_n_mascorneut := mascorneut-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "tysk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tysk_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

tørke_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "tørke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tørke_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

underbukse_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION light-e,
   STEM < "underbukse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underbukse_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

utspill_n_neut := neut-re-noun-lxm &
 [ INFLECTION infl_nshort,
   STEM < "utspill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utspill_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

vokter_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "vokter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vokter_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

vår_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "vår" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vår_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

ås_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "ås" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ås_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

øre_n_neut := neut-re-noun-lxm &
 [ INFLECTION light-e-nlong,
   STEM < "øre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_øre_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

øy_n_mascorfem := mascorfem-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "øy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_øy_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

sokk_n_masc := masc-re-noun-lxm &
 [ INFLECTION final-full,
   STEM < "sokk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sokk_n_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

elev_relanim  := masc-relanim-noun-lxm &
 [ STEM < "elev" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.PRED "_elev_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

politi_reganim  := neut-reganim-noun-lxm &
 [ INFLECTION final-full-nlong,
   STEM < "politi" >,
   SYNSEM.LKEYS.KEYREL.PRED "_politi_n_rel",
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

sterk_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "sterk" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sterk_a_rel" ].

effektiv_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "effektiv" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_effektiv_a_rel" ].

jødisk_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "jødisk" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_jødisk__a_rel_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

treg_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "treg" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_treg_a_rel" ].

annerledes_stndadj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "annerledes" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_annerledes_a_rel",
   SYNSEM.LOCAL.CAT.HEAD adj-no_gd ].

tradisjonell_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "tradisjonell" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_tradisjonell_a_rel" ].

profesjonell_stndadj := stnd-adj-lxm &
 [ INFLECTION finstr,
   STEM < "profesjonell" >,
   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
   SYNSEM.LKEYS.KEYREL.PRED "_profesjonell_a_rel" ].

lukket_adj := stnd-adj-lxm &
 [ INFLECTION nonfstr,
   STEM < "lukket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lukket_a_rel",
            LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].


#|
sove
ligge
sitte
stå
regne
skamme
smyge
sette
løpe
rulle
komme
koke
klarne
fylle ut
vise
holde
finne
hjelpe
kaste
flytte
sende
ta
gå
vaske
spise
synge
sammenligne
sparke
legge
tørke
prøve
forsøke
love
tillate
be
anmode
håpe
vite
gjette
vise
fortelle
håpe
spørre
se
gjøre
forutsette
frykte
søke
anta
føle
kjenne
smake
høre
lukte
høres
kalle
anse
synes
virke
late
bo
|#

 

