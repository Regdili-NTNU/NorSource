; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;              - NorSource -
;;; 
;;;    Copyright (c)  NorSource 1.0
;;;                     
;;;
;;;                     2014-2021
;;;
;;;            Lars Hellan and Tore Bruland
;;;
;;;			2010-2014
;;;
;;;    Lars Hellan, Mads H. Sandøy, Elias Aamot, Tore Bruland
;;;                         and
;;;                      Dan Flickinger
;;;
;;;
;;;    Norwegian University of Science and Technology, 7491 Trondheim
;;;    
;;;
;;;  
;;;            Earlier developments: 
;;;            2004-2008 Lars Hellan, Dorothee Beermann, Ben Waldron
;;;            2001-2003 Lars Hellan, Petter Haugereid

;;;

;;; -*- Mode: TDL; Coding: utf-8 -*-
; DON'T DELETE!
; (setf mrs (mrs::get-mrs-string (first *parse-record*)))
; (setf *empty-semantics-lexical-entries* nil)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;være_copExpnNAbsinf_vlxm
;;;             lex1.close.tdl   mao, dvs, feks
;;;
;;;  Definitions of closed-class lexical items 
;;;
;;; lex.close.tdl contains all closed class items, apart from spatio-temporal
;;; prepositions and adverbs. It also contains one or two specimens of each 
;;; type of open class lexical items, so as to enable this lexicon solely to
;;; serve for development of the grammar. NB: this file is ordered by
;;; category/theme, and not alphabetically.


; Order of presentation:
; - proper names
; - 'selected' prepositions of many kinds
; - prepositions much like complementizers
; - partitive prepositions
; - possessive prepositions
; - comparative and degree items
; - s-adv
; - enumeration
; - other special adverbs
; - complementizers
; - punctuation
; - conjunction and connective items
; - measure nouns and directional nouns
; - sample regular noun and adjective types
; - pronouns
; - determiners, articles and demonstratives
; - cardinals and ordinals
; - quantifiers and degree words
; - interjections
; - samples of all verb lexeme types


;;;; 250311 MHS
;; Removed two versions of "ikke".



;Ola-abbr_nlxm := mascsg-anim-proper-name-word &
; [ STEM < "O." >,
;   SYNSEM.LKEYS.KEYREL.CARG "Ola" ].

Ola-firstname_pn := firstname-mascsg-anim-proper-name-word &
 [ STEM < "Ola" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Ola" ].

Per-firstname_pn := firstname-mascsg-anim-proper-name-word &
 [ STEM < "Per" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Per" ].

Jon-firstname_pn := firstname-mascsg-anim-proper-name-word &
 [ STEM < "Jon" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Jon" ].

Ask-firstname_pn := firstname-mascsg-anim-proper-name-word &
 [ STEM < "Ask" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Ask" ].

Jens-firstname_pn := firstname-mascsg-anim-proper-name-word &
 [ STEM < "Jens" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Jens" ].

Armani-lastname_pn := lastname-mascsg-anim-proper-name-word &
 [ STEM < "Armani" >,
   INFLECTION final-full,
   SYNSEM.LKEYS.KEYREL.CARG "Armani" ].

Kari-firstname_pn := firstname-femsg-anim-proper-name-word &
 [ STEM < "Kari" >,
   SYNSEM.LKEYS.KEYREL.CARG "Kari" ].

Gro-firstname_pn := firstname-femsg-anim-proper-name-word &
 [ STEM < "Gro" >,
   SYNSEM.LKEYS.KEYREL.CARG "Gro" ].

Marit-firstname_pn := firstname-femsg-anim-proper-name-word &
 [ STEM < "Marit" >,
   SYNSEM.LKEYS.KEYREL.CARG "Marit" ].

Embla-firstname_pn := firstname-femsg-anim-proper-name-word &
 [ STEM < "Embla" >,
   SYNSEM.LKEYS.KEYREL.CARG "Embla" ].

Finnmark_pn := neutsg-anim-proper-name-word &
  [ STEM < "Finnmark" >,
    INFLECTION final-full-nlong,
    SYNSEM.LKEYS.KEYREL.CARG "Finnmark" ].

Østlandet_pn := neutsg-anim-proper-name-word &
  [ STEM < "østlandet" >,
    SYNSEM.LKEYS.KEYREL.CARG "Østlandet" ].

Stortinget_pn := neutsg-anim-proper-name-word &
  [ STEM < "Stortinget" >,
    SYNSEM.LKEYS.KEYREL.CARG "Stortinget" ].

prosent_neut-meas_nlxm := mascorneut-measure-amount-noun-lxm &
   [ INFLECTION infl_m_nshort,
      STEM < "%" >,
       SYNSEM.LKEYS.KEYREL.PRED "_prosent_n_rel"].

;prosent-sign_relinan_nlxm := masc-relinan-noun-lxm &
; [ STEM < "%" >,
;   INFLECTION final-full-long-or-short,
;   SYNSEM.LKEYS.KEYREL.PRED "_prosent_n_rel",
;   SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nom-k ].

iranskmann_n_masc_nlxm := masc-reginan-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "iranskmann" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_iranskmann_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

;for EngNoGram:
girl_n_fem_nlxm := fem-reganim-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "girl" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_girl_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

boy_n_masc_nlxm := masc-reganim-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "boy" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_boy_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

woman_n_fem_nlxm := fem-reganim-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "woman" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_woman_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

uncle_n_masc_nlxm := masc-reganim-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "uncle" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_uncle_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

spear_n_masc_nlxm := masc-reganim-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "spear" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_spear_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

gun_n_masc_nlxm := masc-reganim-noun-lxm &
  [ INFLECTION final-full-strong,
      STEM < "gun" >,
      SYNSEM [ LKEYS.KEYREL.PRED "_gun_n_rel",
               LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].



; "sett telefonen på Stille"
;Stille-pn_nlxm := mascsg-inan-proper-name-word &
;  [ STEM < "Stille" >,
;    INFLECTION light-e,
;    SYNSEM.LKEYS.KEYREL.CARG "Stille" ].

; rather treat "opphøye" as directional verb? no
til_opphøye-til := som-n-pred-comp &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY predcomp-til ] ].

; PREP-INDIRWHQUEST
;om_indirwhquest := prep-indirwhquest-word &
;  [ STEM < "om" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_om_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-indirqu]].

;på_indirwhquest := prep-indirwhquest-word &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-indirqu]].

;angående_indirwhquest := prep-indirwhquest-word &
;  [ STEM < "angående" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_angående_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY angående-indirqu]].

; PREP-CLAUSE
på_clause := prep-clause-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-clse]].

om_clause := prep-clause-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-clse]].

over_clause := prep-clause-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY over-clse]].

;for_clause := prep-clause-word &
;  [ STEM < "for" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_for_p-subcl_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-clse]].

etter_clause := prep-clause-word &
  [ STEM < "etter" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY etter-clse]].

av_clause := prep-clause-word &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-clse]].

i_clause := prep-clause-word &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-clse]].

til_clause := prep-clause-word &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-clse]].

med_clause := prep-clause-word &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-clse]].

; not obvious that needed
;som_clause := prep-clause-word &
;  [ STEM < "som" >,
;    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CAT.HEAD.DECL -] >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_p-subcl_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY som-clse]].

angående_clause := prep-clause-word &
  [ STEM < "angående" >,
    SYNSEM.LKEYS.KEYREL.PRED "_angående_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY angående-k]].

;etter_clause := prep-clause-word &
;  [ STEM < "etter" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-indxsit,
;    SYNSEM.LKEYS.KEYREL.PRED "_etter_p_rel"].

for_clause := prep-clause-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-clse,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p_rel"].

i-henhold-til_clause := prep-clause-word &
  [ STEM < "i", "henhold", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-clse,
    SYNSEM.LKEYS.KEYREL.PRED "_i-henhold-til_p_rel"].

med-hensyn-til__clause := prep-clause-word &
  [ STEM < "med", "hensyn", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-clse,
    SYNSEM.LKEYS.KEYREL.PRED "_med-hensyn-til_p_rel"].

i-forhold-til_clause := prep-clause-word &
  [ STEM < "i", "forhold", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-clse,
    SYNSEM.LKEYS.KEYREL.PRED "_i-forhold-til_p_rel"].

i-relasjon-til_clause := prep-clause-word &
  [ STEM < "i", "relasjon", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-clse,
    SYNSEM.LKEYS.KEYREL.PRED "_i-relasjon-til_p_rel"].

ut-fra_clause := prep-clause-word &
  [ STEM < "ut", "fra" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-clse,
    SYNSEM.LKEYS.KEYREL.PRED "_ut-fra_p_rel"].

;;;;;

angående_reg-wh-p := prep-word-wh-clause &
  [ STEM < "angående" >,
    SYNSEM.LKEYS.KEYREL.PRED "_angående_p-subcl_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY angående-indxsit]].

etter_reg-wh-p := prep-word-wh-clause &
  [ STEM < "etter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p_rel"].

for_reg-wh-p := prep-word-wh-clause &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p_rel"].

i-henhold-til_reg-wh-p := prep-word-wh-clause &
  [ STEM < "i", "henhold", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY i-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_i-henhold-til_p_rel"].

med-hensyn-til_reg-wh-p := prep-word-wh-clause &
  [ STEM < "med", "hensyn", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_med-hensyn-til_p_rel"].

i-forhold-til_reg-wh-p := prep-word-wh-clause &
  [ STEM < "i", "forhold", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY i-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_i-forhold-til_p_rel"].

i-relasjon-til_reg-wh-p := prep-word-wh-clause &
  [ STEM < "i", "relasjon", "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY i-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_i-relasjon-til_p_rel"].

ut-fra_reg-wh-p := prep-word-wh-clause &
  [ STEM < "ut", "fra" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ut-fra-indxsit,
    SYNSEM.LKEYS.KEYREL.PRED "_ut-fra_p_rel"].


;;;;;;;;;;;
; redundant - prep-clause
;som_bareclause := prep-bareclause-word &
;  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY som-clse]].

på_atelop := prep-atelic-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-atelop]].

av_atelop := prep-atelic-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-atelop]].

;ved_atelop := prep-atelic-word &
;;  [ STEM < "ved" >,
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY ved-atelop]].


;LH180718
hvorvidt_subord := y-n-quest-subord-comp &
 [ STEM < "hvorvidt" >,
   SYNSEM.LKEYS.KEYREL.PRED "hvorvidt_rel" ].

;hvorvidt_subord := decl-subord-comp &
; [ STEM < "hvorvidt" >,
;   SYNSEM.LOCAL.CAT.HEAD.DECL -,
 ;  SYNSEM.LKEYS.KEYREL.PRED "hvorvidt_rel" ].

;; should be in lex3.p-adv-full.tdl, but experiments with a use of
;; KEYS.KEY information not used in that file
;om_dir := dir-fixpoint-prep-word &
;  [ STEM < "om" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_om_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-pathconsumpt-dir]].

; PREP-SEL
dummy_sel := prep-word-sel &
  [ STEM < "PREPOSITION" >,
    SYNSEM.LKEYS.KEYREL.PRED "_selected_prep_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY selct ]].

om_sel := prep-word-sel &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-fct-spec ]].

mot_sel := prep-word-sel &
  [ STEM < "mot" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mot_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY mot-fct-spec ] ].

i_sel := prep-word-sel &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-fct-spec ] ].

unna_sel := prep-word-sel &
  [ STEM < "unna" >,
    SYNSEM.LKEYS.KEYREL.PRED "_unna_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY unna-fct-spec ] ].

overfor_sel := prep-word-sel &
  [ STEM < "overfor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_overfor_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY overfor-fct-spec ]].

til_sel := prep-word-sel &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-fct-spec ]].


etter_sel := prep-word-sel &
  [ STEM < "etter" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY etter-fct-spec ]].

;med_concumm-sel := prep-word-sel &
;  [ STEM < "med" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_med_p-sel_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-concumm ]].

med_sel := prep-word-sel &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-fct-spec ]].

for_sel := prep-word-sel &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-fct-spec ]].

av_sel := prep-word-sel &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-fct-spec ]].

;i_assoc-sel := prep-word-sel &
;  [ STEM < "i" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_i_p-sel_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-assoc ]].

på_sel := prep-word-sel &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-fct-spec ]].

;på_sel-basis := prep-word-sel &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p-sel_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-basis-of ]].

;på_sel-topic := prep-word-sel &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-topic-of ]].

;på_sel-assoc := prep-word-sel &
;  [ STEM < "på" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-assoc ]].

fra_sel := prep-word-sel &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra_p-sel_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY fra-fct-spec ]].

; det er hinsides/under/opp for vurdering hvorvidt...
hinsides_arg1prop-epon-p := prep-arg1prop-epon-lxm &
  [ STEM < "hinsides" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hinsides_p_rel" ].

under_arg1prop-epon-p := prep-arg1prop-epon-lxm &
  [ STEM < "under" >,
    SYNSEM.LKEYS.KEYREL.PRED "_under_p_rel" ].

opp_for_arg1prop-epon-p := prep-arg1prop-epon-lxm &
  [ STEM < "opp", "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_opp-for_p_rel" ].

; "det er for andre gang at han..."
for_arg1prop-epon-p := prep-arg1prop-epon-lxm &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p_rel" ].

; "det er som en forbannelse at han..."
som_arg1prop-epon-p := prep-arg1prop-epon-lxm &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_p_rel" ].

; "det er på høy tid at han..."
på_arg1prop-epon-p := prep-arg1prop-epon-lxm &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p_rel" ].



på_detachposs := prep-detachposs-word &
  [ STEM < "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-possrais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY på-detch]].

i_detachposs := prep-detachposs-word &
  [ STEM < "i" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_p-possrais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-detch]].

; for now entered as prep-word-reg; but there is obviously more to them
unntagen_reg-p := prep-word-reg &
 [ STEM < "unntagen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_unntagen_p_rel" ].

unntatt_reg-p := prep-word-reg &
 [ STEM < "unntatt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_unntatt_p_rel" ].

istedenfor_reg-p := prep-word-reg &
 [ STEM < "istedenfor" >,
   SYNSEM.LKEYS.KEYREL.PRED "_istedenfor_p_rel" ].

istedetfor_reg-p := prep-word-reg &
 [ STEM < "istedetfor" >,
   SYNSEM.LKEYS.KEYREL.PRED "_istedenfor_p_rel" ].

i-stedet-for_reg-p := prep-word-reg &
 [ STEM < "i", "stedet", "for" >,
   SYNSEM.LKEYS.KEYREL.PRED "_istedenfor_p_rel" ].

liksom_reg-p := prep-word-reg &
 [ STEM < "liksom" >,
   SYNSEM.LKEYS.KEYREL.PRED "_liksom_p_rel" ].

;cases where this is needed must be built into the entry. han sover som om han er uskyldig - instead with prep-s-word-reg-irreal
;som_reg-p := prep-word-reg &
; [ STEM < "som" >,
;   SYNSEM.LOCAL.CAT.HEAD.MOD <[LOCAL.CAT.HEAD nom]>, ; hytta som ny var vakker - must be a smallclause predprtcl som instead
;   SYNSEM.LKEYS.KEYREL.PRED "_som_p_rel" ].

; conjunction instead
;samt_reg-p := prep-word-reg &
; [ STEM < "samt" >,
;   SYNSEM.LKEYS.KEYREL.PRED "_samt_p_rel" ].

per_dot_reg-p := prep-word-reg &
 [ STEM < "pr", "." >,
   SYNSEM.LOCAL.CAT.HEAD.MOD <[LOCAL.CAT.HEAD comm-noun]>,
   SYNSEM.LKEYS.KEYREL [PRED "_per_p_rel" ],
   SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CONT.HOOK.INDEX.PNG.NG sg]>].

per_reg-p := prep-word-reg &
 [ STEM < "per" >,
   SYNSEM.LOCAL.CAT.HEAD.MOD <[LOCAL.CAT.HEAD comm-noun]>,
   SYNSEM.LKEYS.KEYREL [PRED "_per_p_rel" ],
   SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CONT.HOOK.INDEX.PNG.NG sg]>].

ifølge_reg-p := prep-word-reg &
 [ STEM < "ifølge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ifølge_p_rel" ].


i_følge_reg-p := prep-word-reg &
 [ STEM < "i", "følge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_ifølge_p_rel" ].



ved_advprtcl := adv-particle-word &
  [ STEM < "ved" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY ved-pcl],
    SYNSEM.LKEYS.KEYREL.PRED "_ved_pcl_rel"].

fore_advprtcl := adv-particle-word &
  [ STEM < "fore" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY fore-pcl],
    SYNSEM.LKEYS.KEYREL.PRED "_fore_pcl_rel"].

på_partcl := adv-particle-word &
  [ STEM < "på" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY på-pcl,
            LKEYS.KEYREL.PRED "_på_pcl_rel"]].

; "gå rundt og..."
rundt_partcl := adv-particle-word &
  [ STEM < "rundt" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY rundt-pcl,
            LKEYS.KEYREL.PRED "_rundt_pcl_rel"]].

med_partcl := adv-particle-word &
  [ STEM < "med" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY med-pcl,
            LKEYS.KEYREL.PRED "_med_pcl_rel"]].

ned_partcl := adv-particle-word &
  [ STEM < "ned" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY ned-pcl,
            LKEYS.KEYREL.PRED "_med_pcl_rel"]].

ut_partcl := adv-particle-word &
  [ STEM < "ut" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY ut-pcl,
            LKEYS.KEYREL.PRED "_ut-of-appearance_a_rel"]].

opp_partcl := adv-particle-word &
  [ STEM < "opp" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY opp-pcl,
            LKEYS.KEYREL.PRED "_opp_pcl_rel"]].

bort_partcl := adv-particle-word &
  [ STEM < "bort" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY bort-pcl,
            LKEYS.KEYREL.PRED "_bort_a_rel"]].

hen_partcl := adv-particle-word &
  [ STEM < "hen" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY hen-pcl,
            LKEYS.KEYREL.PRED "_hen_a_rel"]].

fram_partcl := adv-particle-word &
  [ STEM < "fram" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY frem-pcl,
            LKEYS.KEYREL.PRED "_frem_pcl_rel"]].

frem_partcl := adv-particle-word &
  [ STEM < "frem" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY frem-pcl,
            LKEYS.KEYREL.PRED "_frem_pcl_rel"]].

til_partcl := adv-particle-word &
  [ STEM < "til" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY til-pcl,
            LKEYS.KEYREL.PRED "_til_pcl_rel"]].

om_partcl := adv-particle-word &
  [ STEM < "om" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY om-pcl,
            LKEYS.KEYREL.PRED "_om_pcl_rel"]].

inn_partcl := adv-particle-word &
  [ STEM < "inn" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY inn-pcl,
            LKEYS.KEYREL.PRED "_inn_pcl_rel"]].

inne_partcl := adv-particle-word &
  [ STEM < "inne" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY inne-pcl,
            LKEYS.KEYREL.PRED "_inne_pcl_rel"]].

av_partcl := adv-particle-word &
  [ STEM < "av" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY av-pcl,
            LKEYS.KEYREL.PRED "_av_pcl_rel"]].

an_partcl := adv-particle-word &
  [ STEM < "an" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY an-pcl,
            LKEYS.KEYREL.PRED "_an_pcl_rel"]].

løs_partcl := adv-particle-word &
  [ STEM < "løs" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY løs-pcl,
            LKEYS.KEYREL.PRED "_løs_pcl_rel"]].

sammen_partcl := adv-particle-word &
  [ STEM < "sammen" >,
    SYNSEM [LOCAL.CAT.HEAD.KEYS.KEY sammen-pcl,
            LKEYS.KEYREL.PRED "_sammen_pcl_rel"]].

igjennom_partcl := adv-particle-word &
  [ STEM < "igjennom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_igjennom_pcl_rel"].

gjennom_partcl := adv-particle-word &
  [ STEM < "gjennom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gjennom_pcl_rel"].

unna_partcl := adv-particle-word &
  [ STEM < "unna" >,
    SYNSEM.LKEYS.KEYREL.PRED "_unna_pcl_rel"].



; COMPLEMENTIZER-LIKE PREPOSITIONS (NON-PREDSORT)

når_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_når-same_time_c_rel"].

da_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "da" >,
    SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CONT.HOOK.INDEX.E.TENSE pret]>,
    SYNSEM.LKEYS.KEYREL.PRED "_da-same_time_c_rel"].

før_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "før" >,
    SYNSEM.LKEYS.KEYREL.PRED "_før-before-time_c_rel"].

etter_at_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "etter", "at" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etter-after_time_rel"].

etterat_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "etterat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etterat-after_time_rel"].

inntil_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_inntil-concluded_at_time-rel"].

fra_prep-vmod-time := prep-s-word-vmod-reg-time &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra-initiated_at_time_rel"].


da_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "da" >,
    SYNSEM.LKEYS.KEYREL.PRED "_da-same_time_c_rel"].

når_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_når-same_time_c_rel"].

før_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "før" >,
    SYNSEM.LKEYS.KEYREL.PRED "_før-before-time_c_rel"].

etter_at_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "etter", "at" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_at-after_time_rel"].

etterat_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "etterat" >,
    SYNSEM.LKEYS.KEYREL.PRED "_etterat-after_time_rel"].

inntil_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "inntil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_inntil-concluded_at_time-rel"].

fra_prep-nmod-time := prep-s-word-nmod-reg-time &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fra-initiated_at_time_rel"].

der_prep-plce := prep-s-word-reg-plce &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED "_der-same_place_as_rel"].

; EAA removed for efficiency purposes. Too few constraints.
; Example: "[Hvor mange timer i uka jobber] er du?"
; reactivated LH080713
hvor_prep-plce := prep-s-word-reg-plce &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-same_place_as_rel"].

der_hvor_prep-plce := prep-s-word-reg-plce &
  [ STEM < "der", "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_der-hvor-same_place_as_rel"].

; "overalt der"
der_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "der" >,
    SYNSEM.LKEYS.KEYREL.PRED "_der-same_place_as_rel"].
; "overalt hvor"
hvor_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-same_place_as_rel"].
; "overalt der hvor"
der_hvor_prep-modadv-plce := prep-s-word-modadvreg-plce &
  [ STEM < "der", "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_der-hvor-same_place_as_rel"].



hvis_prep-cond := prep-s-word-reg-cond &
 [ STEM < "hvis" >,
   SYNSEM.LKEYS.KEYREL.PRED "hvis-depend-on_rel" ].

;og_prep-vp-time := prep-vp-word-reg-time &
;  [ STEM < "og" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_og-before-time_c_rel"].

;men_prep-vp-time := prep-vp-word-reg-time &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_men-before-time_c_rel"].


; PARTITIVE PREP

av_part-spec-q := part-q-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-num := part-num-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-card := part-card-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-spec-mass := part-q-mass-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-measure := part-measurenp-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-adj := part-adj-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_part-adj2 := part-adj-prep2-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-partitive] ].

av_measure := measure-out-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-measout] ].

med_measure := measure-out-prep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY med-measout] ].


;;;;;;
;av_part-spec-card-mass := part-card-mass-prep-word &
;  [ STEM < "av" > ].




; POSS-PREP 
til_poss := prep-word-poss &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_til-possessed_by_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-poss ] ].

; not obvious if needed alongside av_rel, and has explosive forest effects
;av_poss := prep-word-poss &
;  [ STEM < "av" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_av-possessed_by_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY av-poss ] ].

; not obvious if needed alongside for_rel, and has explosive forest effects
;for_poss := prep-word-poss &
;  [ STEM < "for" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_for-possessed_by_rel",
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-poss ] ].

;fra_poss := prep-word-poss &
;  [ STEM < "fra" >,
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY fra-poss ]].

; PREP-EXPL 
#|
til_expl-dep := prep-expl-dep-word &
  [ STEM < "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "til-expl-dep_rel",
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY til-rais]].

med_expl-dep := prep-expl-dep-word &
  [ STEM < "med" >,
    SYNSEM.LKEYS.KEYREL.PRED "med-expl-dep_rel",
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY med-rais] ].

som_prep-expl-dep := prep-expl-dep-word &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "som-expl-dep_rel",
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY som-rais]].
|#
; to see what wrong...
som_prep-s := prep-s-expl-dep-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD prep-comp & [KEYS.KEY som-rais] ].


; PREP-RAIS 
mot_rais := prep-rais-word &
  [ STEM < "mot" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY mot-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mot_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_mot_p-rais_rel"] !>  ].

med_rais := prep-rais-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_med_p-rais_rel"] !>  ].

av_rais := prep-rais-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_av_p-rais_rel"] !> ].

fra_rais := prep-rais-word &
  [ STEM < "fra" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fra-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fra_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_fra_p-rais_rel"] !>  ].

over_rais := prep-rais-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_over_p-rais_rel"] !>  ].

på_rais := prep-rais-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_på_p-rais_rel"] !>  ].

om_rais := prep-rais-word &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rais_rel",
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY om-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_om_p-rais_rel"] !> ].

til_rais := prep-rais-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-rais ],
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_til_p-rais_rel"] !>  ].

ut-til_rais := prep-rais-word &
  [ STEM < "ut", "til" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY til-rais ],
    SYNSEM.LKEYS.KEYREL.PRED "_ut-til_p-rais_rel",
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_ut-til_p-rais_rel"] !>  ].

for_rais := prep-rais-word &
  [ STEM < "for" >,
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY for-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_p-rais_rel"] !> ].

i_rais := prep-rais-word &
  [ STEM < "i" >,
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY i-rais ],
    SYNSEM.LOCAL.CONT.RELS <! [PRED "_i_p-rais_rel"] !> ].


for_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rais_rel"].

etter_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "etter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY etter-k,
    SYNSEM.LKEYS.KEYREL.PRED "_etter_p-rais_rel"].

uten_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "uten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY uten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_uten_p-rais_rel"].

unna_rais-vmod := prep-rais-vp-mod-word &
  [ STEM < "unna" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY unna-k,
    SYNSEM.LKEYS.KEYREL.PRED "_unna_p-rais_rel"].



; PREP-REL 
for_rel-p := rel-prep-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rel_rel" ].

om_rel-p := rel-prep-word &
  [ STEM < "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY om-k,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rel_rel" ].

over_rel-p := rel-prep-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rel_rel" ].

av_rel-p := rel-prep-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rel_rel" ].

med_rel-p := rel-prep-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rel_rel" ].

på_rel-p := rel-prep-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

;på_måte_p := prep-word-reg &
;  [ STEM < "på" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
;    SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CAT.HEAD.KEYS.KEY måte-k]>,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

til_rel-p := rel-prep-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY til-k,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rel_rel" ].

;;
for_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for_p-rel_rel" ].

om_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY om-k,
    SYNSEM.LKEYS.KEYREL.PRED "_om_p-rel_rel" ].

over_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY over-k,
    SYNSEM.LKEYS.KEYREL.PRED "_over_p-rel_rel" ].

av_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "av" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY av-k,
    SYNSEM.LKEYS.KEYREL.PRED "_av_p-rel_rel" ].

med_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_med_p-rel_rel" ].

på_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "på" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

;på_måte_p := prep-word-reg &
;  [ STEM < "på" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY på-k,
;    SYNSEM.LOCAL.CAT.VAL.COMPS <[LOCAL.CAT.HEAD.KEYS.KEY måte-k]>,
;    SYNSEM.LKEYS.KEYREL.PRED "_på_p-rel_rel" ].

til_rel-wh-clause-p := rel-prep-wh-clause-word &
  [ STEM < "til" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY til-k,
    SYNSEM.LKEYS.KEYREL.PRED "_til_p-rel_rel" ].

;;


av_agent := prep-word-agent &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_performed-by_rel"  ].

#|
; "av glede, av hensyn til,..."
av_hensyn := prep-word-reg &
  [ STEM < "av" >,
    SYNSEM.LKEYS.KEYREL.PRED "_av-rel_rel",
    SYNSEM.LOCAL.CAT.VAL.COMPS < [LOCAL.CONT.HOOK.INDEX.SORT relatum,
                                  LOCAL.CONT.HOOK.INDEX.PNG.NG sg,
                                  LOCAL.CAT.HEAD.KEYS.KEY rel-hensyn] >].

; "motta støtte fra landsmøtet" - close to agent-prep, but goes also with active
fra_p-rel := rel-prep-word &
  [ STEM < "fra" >,
    SYNSEM.LKEYS.KEYREL [PRED "_fra_p-rel_rel"]].
|#



;;;; comparatives ;;;

mer_cmpar-reg := comparative-adv-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mest_superlat := superlative-adv-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mest-exceed_c_rel"].

mer_vp-mod-cmpar-reg := comparative-adv-vp-mod-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mest_vp-mod-superlat := superlative-adv-vp-mod-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mest-exceed_c_rel"].

mer_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mer_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mer-exceed_c_rel"].

mere_cmpar-reg := comparative-adv-word &
  [ STEM < "mere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mere-exceed_c_rel"].

mere_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mere-exceed_c_rel"].

mere_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mere-exceed_c_rel"].

mindre_cmpar-reg := comparative-adv-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].

minst_superlat := superlative-adv-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_minst-less-than_c_rel"].

mindre_vp-mod-cmpar-reg := comparative-adv-vp-mod-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].

minst_vp-mod-superlat := superlative-adv-vp-mod-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_minst-less-than_c_rel"].

mindre_cmpar-close := comparative-closecomp-adv-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].

mindre_cmpar-close-with-cmpar := comparative-closecomp-with-cmpar-word &
  [ STEM < "mindre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mindre-less-than_c_rel"].


enn_cmpardep-reg := cmpar-dep-reg-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar ].

som_cmpardep-reg := cmpar-dep-reg-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardep-clause-reg := cmpar-dep-reg-with-clause-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar].

som_cmpardep-clause-reg := cmpar-dep-reg-with-clause-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardep-p-adv-reg := cmpar-dep-reg-with-p-adv-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar].

som_cmpardep-p-adv-reg := cmpar-dep-reg-with-p-adv-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

som-helst_cmpardep-reg := cmpar-dep-reg-cluster-word &
  [ STEM < "som", "helst" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

som-mulig_cmpardep-reg := cmpar-dep-reg-cluster-word &
  [ STEM < "som", "mulig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar,
    SYNSEM.LOCAL.CAT.HEAD.MOD <[ LEX - ]> ].

enn_cmpardiff-n := cmpar-dep-diff-for-noun-word &
  [ STEM < "enn" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY enn-cmpar ].

som_cmpareq-n := cmpar-dep-equal-for-noun-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

enn_cmpardep-close := cmpar-dep-close-word &
  [ STEM < "enn" >].

like := comparative-adv-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED "_equate_c_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-cmpar].

for := comparative-adv-word &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_excessive_c_rel"].

;likedan_compar := comparative-adv-word &
;    [ STEM < "likedan" >,
;      SYNSEM.LKEYS.KEYREL.PRED "_likedan_rel" ].

;slik_compar := comparative-adv-word &
;    [ STEM < "slik" >,
;      SYNSEM.LKEYS.KEYREL.PRED "_slik_rel" ].

likedan-som_equalzr := equalizer-word &
    [ STEM < "likedan", "som" >,
      SYNSEM.LKEYS.KEYREL.PRED "_likedan-som_rel" ].

slik-som_equalzr := equalizer-word &
    [ STEM < "slik", "som" >,
      SYNSEM.LKEYS.KEYREL.PRED "_slik-som_rel" ].

;180709 slik_adj_alxm := stnd-adj-lxm &
;180709  [ INFLECTION finstr,
;180709    STEM < "slik" >,
;180709    SYNSEM [ LKEYS.KEYREL.PRED "_slik_a_rel",
;180709             LOCAL.CAT.HEAD.KEYS.KEY anonym-k ] ].

;LH061215  This has an exceptional weak inflection - min egen gutt, mitt eget hus - and since there is only one infl-rule weak-adj-nonfstr_infl for all genders and both numbers in the weak form, there is no infl-rule to pin the fact on in irregs list. Provisionally it is stated there, as
;egen weak-adj-nonfstr_infl_rule egen
;eget weak-adj-nonfstr_infl_rule egen
;just to get parses for the forms, but we probably need a special new lexical item. Generation from 'min egen katt sover' gives both 'egen' and 'eget' as it is now. Scandalo! TODO!

;180709 egen_alxm := stnd-adj-lxm &
;180709  [ INFLECTION nonfstr,
;180709    STEM < "egen" >,
;180709    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY anonym-k,
;180709    SYNSEM.LKEYS.KEYREL.PRED "_egen_a_rel" ].

egen_masc-weak := stnd-adj-lxm & ;ordinal-word &
  [ STEM < "egen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY egen-k,
    SYNSEM.LKEYS.KEYREL.CARG "own-rel"].

eget_neut-weak := stnd-adj-lxm & ;ordinal-word &
  [ STEM < "eget" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY eget-k,
    SYNSEM.LKEYS.KEYREL.CARG "own-rel"].


;;s-adv
ikke_s-adv := s-operadv-stnd-word &
  [ STEM < "ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ikke-neg_adv_rel"].

slettes-ikke_s-adv := s-operadv-stnd-word &
  [ STEM < "slettes","ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_slettes-ikke-neg_adv_rel"].

slett-ikke_s-adv := s-operadv-stnd-word &
  [ STEM < "slett","ikke" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_slett-ikke-neg_adv_rel"].

overhodet_s-adv := s-operadv-stnd-word &
  [ STEM < "overhodet" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY overhodet-k,
    SYNSEM.LKEYS.KEYREL.PRED "_overhodet-neg_adv_rel"].

ikke-lenger_s-adv := s-operadv-stnd-word &
  [ STEM < "ikke", "lenger" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ikke-lenger-neg_adv_rel"].

ikke-lengre_s-adv := s-operadv-stnd-word &
  [ STEM < "ikke", "lengre" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ikke-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ikke-lengre-neg_adv_rel"].

; fine adverb, but creates too much confusion in mal-interpretation etc
;ei_s-adv := s-operadv-init-word &
;  [ STEM < "ei" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ei-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_ei-neg_adv_rel"].

egentlig_s-adv := s-operadv-init-word &
  [ STEM < "egentlig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY egentlig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_egentlig_adv_rel"].

kun_s-adv := s-operadv-stnd-word &
  [ STEM < "kun" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kun-k,
    SYNSEM.LKEYS.KEYREL.PRED "_kun_c_rel"].

neppe_s-adv := s-operadv-stnd-word &
  [ STEM < "neppe" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY neppe-k,
    SYNSEM.LKEYS.KEYREL.PRED "_neppe_adv_rel"].

iallfall_s-adv := s-operadv-init-word &
  [ STEM < "iallfall" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY iallfall-k,
    SYNSEM.LKEYS.KEYREL.PRED "_iallfall_adv_rel"].

heller_s-adv := s-operadv-stnd-word &
  [ STEM < "heller" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY heller-k,
    SYNSEM.LKEYS.KEYREL.PRED "_heller_adv_rel"].

helst_s-adv := s-operadv-init-word &
  [ STEM < "helst" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY helst-k,
    SYNSEM.LKEYS.KEYREL.PRED "_helst_adv_rel"].

likeledes_s-adv := s-operadv-init-word &
  [ STEM < "likeledes" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likeledes-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likeledes_adv_rel"].

likeså_s-adv := s-operadv-init-word &
  [ STEM < "likeså" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likeså-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likeså_adv_rel"].

likså_s-adv := s-operadv-init-word &
  [ STEM < "likså" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likeså-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likså_adv_rel"].

herved_s-adv := s-operadv-init-word &
  [ STEM < "herved" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY herved-k,
    SYNSEM.LKEYS.KEYREL.PRED "_herved_adv_rel"].

ergo_s-adv := s-operadv-init-word &
  [ STEM < "ergo" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ergo-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ergo_adv_rel"].

sannsynligvis_s-adv := s-operadv-init-word &
  [ STEM < "sannsynligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY sannsynligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sannsynligvis_adv_rel"].

virkelig_s-adv := s-operadv-stnd-word &
  [ STEM < "virkelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY virkelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_virkelig_adv_rel"].

antakeligvis_s-adv := s-operadv-init-word &
  [ STEM < "antakeligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antakeligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakeligvis_adv_rel"].

antageligvis_s-adv := s-operadv-init-word &
  [ STEM < "antageligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antageligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakeligvis_adv_rel"].

nødvendigvis_s-adv := s-operadv-stnd-word &
  [ STEM < "nødvendigvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nødvendigvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nødvendigvis_adv_rel"].

antydningsvis_s-adv := s-operadv-init-word & 
 [ STEM < "antydningsvis" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_antydningsvis_adv_rel" ].

antagelig_s-adv := s-operadv-init-word &
  [ STEM < "antagelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antagelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakelig_adv_rel"].

antakelig_s-adv := s-operadv-init-word &
  [ STEM < "antakelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY antakelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_antakelig_adv_rel"].

trolig_s-adv := s-operadv-init-word &
  [ STEM < "trolig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY trolig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_trolig_adv_rel"].

endatil_s-adv := s-operadv-init-word &
  [ STEM < "endatil" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY endatil-k,
    SYNSEM.LKEYS.KEYREL.PRED "_endatil_adv_rel"].

attpåtil_s-adv := s-operadv-init-word &
  [ STEM < "attpåtil" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY attpåtil-k,
    SYNSEM.LKEYS.KEYREL.PRED "_attpåtil_adv_rel"].

endog_s-adv := s-operadv-stnd-word &
  [ STEM < "endog" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY endog-k,
    SYNSEM.LKEYS.KEYREL.PRED "_endog_adv_rel"].

; special marking for the purpose of s-adv-front-noninver-x-spec-v-rule, x= kanskje, så, mon, mon tro - . See also enumeration-item last in this section, such as 'enumeration-with-paranth-1'.
kanskje_s-adv := s-operadv-init-word &
  [ STEM < "kanskje" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_kanskje_adv_rel"].

visst_s-adv := s-operadv-init-word &
  [ STEM < "visst" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY visst-k,
    SYNSEM.LKEYS.KEYREL.PRED "_visst_adv_rel"].

mon_s-adv := s-operadv-init-word &
  [ STEM < "mon" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mon_adv_rel"].

mon-tro_s-adv := s-operadv-init-word &
  [ STEM < "mon", "tro" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_mon-tro_adv_rel"].

må-tro_s-adv := s-operadv-init-word &
  [ STEM < "må", "tro" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_må-tro_adv_rel"].

må-tru_s-adv := s-operadv-init-word &
  [ STEM < "må", "tru" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL.PRED "_må-tru_adv_rel"].

så_s-adv := s-operadv-init-word &
  [ STEM < "så" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY så-k,
    SYNSEM.LKEYS.KEYREL.PRED "_så_adv_rel"].

aldri_s-adv := s-operadv-init-word &
  [ STEM < "aldri" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY aldri-k,
    SYNSEM.LKEYS.KEYREL.PRED "_aldri_adv_rel"].

aldri-noensinne_s-adv := s-operadv-stnd-word &
  [ STEM < "aldri", "noensinne" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY aldri-noensinne-k,
    SYNSEM.LKEYS.KEYREL.PRED "_aldri-noensinne_adv_rel"].

noensinne_s-adv := s-operadv-final-word &
  [ STEM < "noensinne" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY noensinne-k,
    SYNSEM.LKEYS.KEYREL.PRED "_noensinne_adv_rel"].

muligens_s-adv := s-operadv-init-word &
  [ STEM < "muligens" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY muligens-k,
    SYNSEM.LKEYS.KEYREL.PRED "_muligens_adv_rel"].

muligvis_s-adv := s-operadv-init-word &
  [ STEM < "muligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY muligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_muligvis_adv_rel"].

riktignok_s-adv := s-operadv-init-word &
  [ STEM < "riktignok" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY riktignok-k,
    SYNSEM.LKEYS.KEYREL.PRED "_riktignok_adv_rel"].

hittil_s-adv := s-operadv-init-word &
  [ STEM < "hittil" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY hittil-k,
    SYNSEM.LKEYS.KEYREL.PRED "_hittil_adv_rel"].

alltid_s-adv := s-operadv-init-word &
  [ STEM < "alltid" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY alltid-k,
    SYNSEM.LKEYS.KEYREL.PRED "_alltid_adv_rel"].

sjelden_s-adv := s-operadv-init-final-word &
  [ STEM < "sjelden" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY sjelden-k,
    SYNSEM.LKEYS.KEYREL.PRED "_sjelden_a_rel"].

tidligere_s-adv := s-operadv-init-final-word &
  [ STEM < "tidligere" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY tidligere-k,
    SYNSEM.LKEYS.KEYREL.PRED "_tidligere_a_rel"].

;adv-word-reg instead. test: kan be preceded by 'hvor'
;ofte_s-adv := s-operadv-init-final-word &
;  [ STEM < "ofte" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ofte-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_ofte_adv_rel"].

en-gang-iblant_s-adv := s-operadv-init-final-word &
  [ STEM < "en", "gang", "iblant" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ofte-k,
    SYNSEM.LKEYS.KEYREL.PRED "_en-gang-iblant_adv_rel"].

nylig_s-adv := s-operadv-init-final-word &
  [ STEM < "nylig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nylig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nylig_adv_rel"].

jevnlig_s-adv := s-operadv-init-final-word &
  [ STEM < "jevnlig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY jevnlig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nylig_adv_rel"].

noen-ganger_s-adv := s-operadv-init-final-word &
  [ STEM < "noen", "ganger" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY noen-ganger-k,
    SYNSEM.LKEYS.KEYREL.PRED "_noen-ganger_adv_rel"].

heldigvis_s-adv := s-operadv-init-word &
  [ STEM < "heldigvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY heldigvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_heldigvis_adv_rel"].

eksempelvis_s-adv := s-operadv-init-word &
  [ STEM < "eksempelvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY eksempelvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_eksempelvis_adv_rel"].

for-eksempel-dot_s-adv := s-operadv-init-word &
  [ STEM < "f", ".", "eks">,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

for-eksempel-dot-dot_s-adv := s-operadv-init-word &
  [ STEM < "f", ".", "eks", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

for-eksempel_s-adv := s-operadv-init-word &
  [ STEM < "for", "eksempel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-eksempel_adv_rel"].

nettopp_s-adv := s-operadv-stnd-word &
  [ STEM < "nettopp" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nettopp-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nettopp_adv_rel"].



;derivable
;ensidig_s-adv := s-operadv-stnd-word &
;  [ STEM < "ensidig" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ensidig-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_ensidig_adv_rel"].

akkurat_s-adv := s-operadv-stnd-word &
  [ STEM < "akkurat" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY akkurat-k,
    SYNSEM.LKEYS.KEYREL.PRED "_akkurat_adv_rel"].

altså_s-adv := s-operadv-init-final-word &
  [ STEM < "altså" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY altså-k,
    SYNSEM.LKEYS.KEYREL.PRED "_altså_adv_rel"].

uansett_s-adv := s-operadv-init-final-word &
  [ STEM < "uansett" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY uansett-k,
    SYNSEM.LKEYS.KEYREL.PRED "_uansett_adv_rel"].

fremdeles_s-adv := s-operadv-init-final-word &
  [ STEM < "fremdeles" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fremdeles-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fremdeles_adv_rel"].

forhåpentlig_s-adv := s-operadv-init-final-word &
  [ STEM < "forhåpentlig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forhåpentlig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forhåpentlig_adv_rel"].

forhåpentligvis_s-adv := s-operadv-init-final-word &
  [ STEM < "forhåpentligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forhåpentligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forhåpentligvis_adv_rel"].

også_s-adv := s-operadv-stnd-word &
  [ STEM < "også" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY også-k,
    SYNSEM.LKEYS.KEYREL.PRED "_også_adv_rel"].

;ok, but so many og's...
;og_s-adv := s-operadv-stnd-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY og-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_og_adv_rel"].

bare_s-adv := s-operadv-init-word &
  [ STEM < "bare" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY bare-k,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].

følgelig_s-adv := s-operadv-init-word &
  [ STEM < "følgelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY følgelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_følgelig_adv_rel"].

forresten_s-adv := s-operadv-init-final-word &
  [ STEM < "forresten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forresten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_adv_rel"].

fortrinnsvis_s-adv := s-operadv-init-final-word &
  [ STEM < "fortrinnsvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY fortrinnsvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_fortrinnsvis_adv_rel"].

for-resten_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "resten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forresten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_adv_rel"].

faktisk_s-adv := s-operadv-init-final-word &
  [ STEM < "faktisk" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY faktisk-k,
    SYNSEM.LKEYS.KEYREL.PRED "_faktisk_adv_rel"].

for-så-vidt_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "så", "vidt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-så-vidt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-så-vidt_adv_rel"].

just_s-adv := s-operadv-stnd-word &
  [ STEM < "just" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY just-k,
    SYNSEM.LKEYS.KEYREL.PRED "_just_adv_rel"].

nemlig_s-adv := s-operadv-stnd-word &
  [ STEM < "nemlig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nemlig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nemlig_adv_rel"].

igjen_s-adv := s-operadv-init-final-word &
  [ STEM < "igjen" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY igjen-k,
    SYNSEM.LKEYS.KEYREL.PRED "_igjen_adv_rel"].

likevel_s-adv := s-operadv-init-final-word &
  [ STEM < "likevel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY likevel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_likevel_adv_rel"].

naturligvis_s-adv := s-operadv-init-final-word &
  [ STEM < "naturligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY naturligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_naturligvis_adv_rel"].

selvfølgelig_s-adv := s-operadv-init-final-word &
  [ STEM < "selvfølgelig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY selvfølgelig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_selvfølgelig_adv_rel"].

selvsagt_s-adv := s-operadv-init-final-word &
  [ STEM < "selvsagt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY selvsagt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_selvsagt_adv_rel"].

allikevel_s-adv := s-operadv-init-final-word &
  [ STEM < "allikevel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY allikevel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_allikevel_adv_rel"].

forøvrig_s-adv := s-operadv-init-final-word &
  [ STEM < "forøvrig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forøvrig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forøvrig_adv_rel"].

for-øvrig_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "øvrig" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY forøvrig-k,
    SYNSEM.LKEYS.KEYREL.PRED "_forøvrig_adv_rel"].

vel_s-adv := s-operadv-init-word &
  [ STEM < "vel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY vel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_vel_adv_rel"].

derfor_s-adv := s-operadv-init-word &
  [ STEM < "derfor" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY derfor-k,
    SYNSEM.LKEYS.KEYREL.PRED "_derfor_adv_rel"].

gjerne_s-adv := s-operadv-stnd-word &
  [ STEM < "gjerne" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY gjerne-k,
    SYNSEM.LKEYS.KEYREL.PRED "_gjerne_adv_rel"].

alternativt_s-adv := s-operadv-init-final-word &
  [ STEM < "alternativt" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY alternativt-k,
    SYNSEM.LKEYS.KEYREL.PRED "_alternativt_adv_rel"].

dessverre_s-adv := s-operadv-init-final-word &
  [ STEM < "dessverre" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dessverre-k,
    SYNSEM.LKEYS.KEYREL.PRED "_dessverre_adv_rel"].

dessuten_s-adv := s-operadv-init-word &
  [ STEM < "dessuten" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dessuten-k,
    SYNSEM.LKEYS.KEYREL.PRED "_dessuten_adv_rel"].

dernest_s-adv := s-operadv-init-word &
  [ STEM < "dernest" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dernest-k,
    SYNSEM.LKEYS.KEYREL.PRED "_dernest_adv_rel"].

derimot_s-adv := s-operadv-init-final-word &
  [ STEM < "derimot" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY derimot-k,
    SYNSEM.LKEYS.KEYREL.PRED "_derimot_adv_rel"].

tydeligvis_s-adv := s-operadv-init-final-word &
  [ STEM < "tydeligvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY tydeligvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_tydeligvis_adv_rel"].

nok_s-adv := s-operadv-stnd-word &
  [ STEM < "nok" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nok-k,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_adv_rel"].

ellers_s-adv := s-operadv-init-word &
  [ STEM < "ellers" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ellers-k,
    SYNSEM.LKEYS.KEYREL.PRED "_ellers_adv_rel"].

; twice
;så_s-adv := s-operadv-init-word &
;  [ STEM < "så" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY så-k,
;    SYNSEM.LKEYS.KEYREL [PRED "så_rel"]].

deriblant_s-adv := s-operadv-init-word &
  [ STEM < "deriblant" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY deriblant-k,
    SYNSEM.LKEYS.KEYREL.PRED "_deriblant_adv_rel"].

engang_s-adv := s-operadv-init-final-word &
  [ STEM < "engang" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY engang-k,
    SYNSEM.LKEYS.KEYREL.PRED "_engang_adv_rel"].

for-det-meste_s-adv := s-operadv-init-final-word &
  [ STEM < "for", "det", "meste" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-det-meste-k,
    SYNSEM.LKEYS.KEYREL.PRED "_for-det-meste_adv_rel"].

;for-det-meste_adv-reg := adv-word-reg &
;  [ STEM < "for", "det", "meste" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-det-meste-k,
;    SYNSEM.LKEYS.KEYREL.PRED "_for-det-meste_adv_rel"].

videre_s-adv := s-operadv-init-word &
  [ STEM < "videre" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY videre-k,
    SYNSEM.LKEYS.KEYREL [PRED "_videre_rel"]].

deretter_s-adv := s-operadv-init-final-word &
  [ STEM < "deretter" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY deretter-k,
    SYNSEM.LKEYS.KEYREL [PRED "deretter_rel"]].

halvveis_s-adv := s-operadv-init-final-word &
  [ STEM < "halvveis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY halvveis-k,
    SYNSEM.LKEYS.KEYREL [PRED "halvveis_rel"]].

imidlertid_s-adv := s-operadv-init-word &
  [ STEM < "imidlertid" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY imidlertid-k,
    SYNSEM.LKEYS.KEYREL [PRED "_imidlertid_rel"]].

dog_s-adv := s-operadv-init-word &
  [ STEM < "dog" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dog-k,
    SYNSEM.LKEYS.KEYREL [PRED "_dog_rel"]].

istedet_s-adv := s-operadv-init-word &
  [ STEM < "istedet" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_istedet_rel"]].

i-stedet_s-adv := s-operadv-init-word &
  [ STEM < "i", "stedet" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_istedet_rel"]].

isteden_s-adv := s-operadv-init-word &
  [ STEM < "isteden" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY istedet-k,
    SYNSEM.LKEYS.KEYREL [PRED "_isteden_rel"]].

ingenlunde_s-adv := s-operadv-init-word &
  [ STEM < "ingenlunde" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY ingenlunde-k,
    SYNSEM.LKEYS.KEYREL [PRED "_ingenlunde_rel"]].

dermed_s-adv := s-operadv-init-word &
  [ STEM < "dermed" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY dermed-k,
    SYNSEM.LKEYS.KEYREL [PRED "_dermed_rel"]].

slik_s-adv := s-operadv-init-word &
  [ STEM < "slik" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY slik-k,
    SYNSEM.LKEYS.KEYREL [PRED "_slik_rel"]].


;;;; Enumerations

enumeration-by-id-with-parenth-1 := enumeration-by-identity &
  [ STEM < "(", "1", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 1-in-enumeration ]].

enumeration-by-id-with-parenth-2 := enumeration-by-identity &
  [ STEM < "(", "2", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 2-in-enumeration ]].

enumeration-by-id-with-parenth-3 := enumeration-by-identity &
  [ STEM < "(", "3", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 3-in-enumeration ]].

enumeration-by-id-with-parenth-4 := enumeration-by-identity &
  [ STEM < "(", "4", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 4-in-enumeration ]].

enumeration-by-id-with-parenth-5 := enumeration-by-identity &
  [ STEM < "(", "5", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 5-in-enumeration ]].

enumeration-by-id-with-parenth-6 := enumeration-by-identity &
  [ STEM < "(", "6", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 6-in-enumeration ]].

enumeration-by-id-with-parenth-7 := enumeration-by-identity &
  [ STEM < "(", "7", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 7-in-enumeration ]].

enumeration-by-id-with-parenth-8 := enumeration-by-identity &
  [ STEM < "(", "8", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 8-in-enumeration ]].

enumeration-by-id-with-parenth-9 := enumeration-by-identity &
  [ STEM < "(", "9", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 9-in-enumeration ]].

enumeration-by-id-with-parenth-10 := enumeration-by-identity &
  [ STEM < "(", "10", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 10-in-enumeration ]].

enumeration-by-id-with-half-parenth-1 := enumeration-by-identity &
  [ STEM < "1", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 1-in-enumeration ]].

enumeration-by-id-with-half-parenth-2 := enumeration-by-identity &
  [ STEM < "2", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 2-in-enumeration ]].

enumeration-by-id-with-half-parenth-3 := enumeration-by-identity &
  [ STEM < "3", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 3-in-enumeration ]].

enumeration-by-id-with-half-parenth-4 := enumeration-by-identity &
  [ STEM < "4", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 4-in-enumeration ]].

enumeration-by-id-with-half-parenth-5 := enumeration-by-identity &
  [ STEM < "5", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 5-in-enumeration ]].

enumeration-by-id-with-half-parenth-6 := enumeration-by-identity &
  [ STEM < "6", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 6-in-enumeration ]].

enumeration-by-id-with-half-parenth-7 := enumeration-by-identity &
  [ STEM < "7", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 7-in-enumeration ]].

enumeration-by-id-with-half-parenth-8 := enumeration-by-identity &
  [ STEM < "8", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 8-in-enumeration ]].

enumeration-by-id-with-half-parenth-9 := enumeration-by-identity &
  [ STEM < "9", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 9-in-enumeration ]].

enumeration-by-id-with-half-parenth-10 := enumeration-by-identity &
  [ STEM < "10", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 10-in-enumeration ]].


#|
; confusion with other dot expressions
enumeration-by-id-with-dot-1 := enumeration-by-identity &
  [ STEM < "1", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 1-in-enumeration ]].

enumeration-by-id-with-dot-2 := enumeration-by-identity &
  [ STEM < "2", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 2-in-enumeration ]].

enumeration-by-id-with-dot-3 := enumeration-by-identity &
  [ STEM < "3", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 3-in-enumeration ]].

enumeration-by-id-with-dot-4 := enumeration-by-identity &
  [ STEM < "4", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 4-in-enumeration ]].

enumeration-by-id-with-dot-5 := enumeration-by-identity &
  [ STEM < "5", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 5-in-enumeration ]].

enumeration-by-id-with-dot-6 := enumeration-by-identity &
  [ STEM < "6", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 6-in-enumeration ]].

enumeration-by-id-with-dot-7 := enumeration-by-identity &
  [ STEM < "7", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 7-in-enumeration ]].

enumeration-by-id-with-dot-8 := enumeration-by-identity &
  [ STEM < "8", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 8-in-enumeration ]].

enumeration-by-id-with-dot-9 := enumeration-by-identity &
  [ STEM < "9", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 9-in-enumeration ]].

enumeration-by-id-with-dot-10 := enumeration-by-identity &
  [ STEM < "10", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 10-in-enumeration ]].

|#



enumeration-by-id-with-parenth-i := enumeration-by-identity &
  [ STEM < "(", "i", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 1-in-enumeration ]].

enumeration-by-id-with-parenthii := enumeration-by-identity &
  [ STEM < "(", "ii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 2-in-enumeration ]].

enumeration-by-id-with-parenth-iii := enumeration-by-identity &
  [ STEM < "(", "iii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 3-in-enumeration ]].

enumeration-by-id-with-parenth-iv := enumeration-by-identity &
  [ STEM < "(", "iv", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 4-in-enumeration ]].

enumeration-by-id-with-parenth-v := enumeration-by-identity &
  [ STEM < "(", "v", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 5-in-enumeration ]].

enumeration-by-id-with-parenth-vi := enumeration-by-identity &
  [ STEM < "(", "vi", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 6-in-enumeration ]].

enumeration-by-id-with-parenth-vii := enumeration-by-identity &
  [ STEM < "(", "vii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 7-in-enumeration ]].

enumeration-by-id-with-parenth-viii := enumeration-by-identity &
  [ STEM < "(", "viii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 8-in-enumeration ]].

enumeration-by-id-with-parenth-ix := enumeration-by-identity &
  [ STEM < "(", "ix", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 9-in-enumeration ]].

enumeration-by-id-with-parenth-x := enumeration-by-identity &
  [ STEM < "(", "x", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 10-in-enumeration ]].

enumeration-by-id-with-half-parenth-i := enumeration-by-identity &
  [ STEM < "i", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 1-in-enumeration ]].

enumeration-by-id-with-half-parenth-ii := enumeration-by-identity &
  [ STEM < "ii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 2-in-enumeration ]].

enumeration-by-id-with-half-parenth-iii := enumeration-by-identity &
  [ STEM < "iii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 3-in-enumeration ]].

enumeration-by-id-with-half-parenth-iv := enumeration-by-identity &
  [ STEM < "iv", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 4-in-enumeration ]].

enumeration-by-id-with-half-parenth-v := enumeration-by-identity &
  [ STEM < "v", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 5-in-enumeration ]].

enumeration-by-id-with-half-parenth-vi := enumeration-by-identity &
  [ STEM < "vi", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 6-in-enumeration ]].

enumeration-by-id-with-half-parenth-vii := enumeration-by-identity &
  [ STEM < "vii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 7-in-enumeration ]].

enumeration-by-id-with-half-parenth-viii := enumeration-by-identity &
  [ STEM < "vii", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 8-in-enumeration ]].

enumeration-by-id-with-half-parenth-ix := enumeration-by-identity &
  [ STEM < "ix", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 9-in-enumeration ]].

enumeration-by-id-with-half-parenth-x := enumeration-by-identity &
  [ STEM < "x", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 10-in-enumeration ]].


enumeration-by-id-with-dot-i := enumeration-by-identity &
  [ STEM < "i", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 1-in-enumeration ]].

enumeration-by-id-with-dot-ii := enumeration-by-identity &
  [ STEM < "ii", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 2-in-enumeration ]].

enumeration-by-id-with-dot-iii := enumeration-by-identity &
  [ STEM < "iii", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 3-in-enumeration ]].

enumeration-by-id-with-dot-iv := enumeration-by-identity &
  [ STEM < "iv", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 4-in-enumeration ]].

enumeration-by-id-with-dot-v := enumeration-by-identity &
  [ STEM < "v", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 5-in-enumeration ]].

enumeration-by-id-with-dot-vi := enumeration-by-identity &
  [ STEM < "vi", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 6-in-enumeration ]].

enumeration-by-id-with-dot-vii := enumeration-by-identity &
  [ STEM < "vii", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 7-in-enumeration ]].

enumeration-by-id-with-dot-viii := enumeration-by-identity &
  [ STEM < "vii", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 8-in-enumeration ]].

enumeration-by-id-with-dot-ix := enumeration-by-identity &
  [ STEM < "ix", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 9-in-enumeration ]].

enumeration-by-id-with-dot-x := enumeration-by-identity &
  [ STEM < "x", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE 10-in-enumeration ]].





enumeration-by-id-with-parenth-a := enumeration-by-identity &
  [ STEM < "(", "a", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE a-in-enumeration ]].

enumeration-by-id-with-parenth-b := enumeration-by-identity &
  [ STEM < "(", "b", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE b-in-enumeration ]].

enumeration-by-id-with-parenth-c := enumeration-by-identity &
  [ STEM < "(", "c", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE c-in-enumeration ]].

enumeration-by-id-with-parenth-d := enumeration-by-identity &
  [ STEM < "(", "d", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE d-in-enumeration ]].

enumeration-by-id-with-parenth-e := enumeration-by-identity &
  [ STEM < "(", "e", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE e-in-enumeration ]].

enumeration-by-id-with-parenth-f := enumeration-by-identity &
  [ STEM < "(", "f", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE f-in-enumeration ]].

enumeration-by-id-with-parenth-g := enumeration-by-identity &
  [ STEM < "(", "g", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE g-in-enumeration ]].

enumeration-by-id-with-parenth-h := enumeration-by-identity &
  [ STEM < "(", "h", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE h-in-enumeration ]].

enumeration-by-id-with-parenth-letter-i := enumeration-by-identity &
  [ STEM < "(", "i", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE i-in-enumeration ]].

enumeration-by-id-with-parenth-j := enumeration-by-identity &
  [ STEM < "(", "j", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE j-in-enumeration ]].

enumeration-by-id-with-half-parenth-a := enumeration-by-identity &
  [ STEM < "a", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE a-in-enumeration ]].

enumeration-by-id-with-half-parenth-b := enumeration-by-identity &
  [ STEM < "b", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE b-in-enumeration ]].

enumeration-by-id-with-half-parenth-c := enumeration-by-identity &
  [ STEM < "c", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE c-in-enumeration ]].

enumeration-by-id-with-half-parenth-d := enumeration-by-identity &
  [ STEM < "d", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE d-in-enumeration ]].

enumeration-by-id-with-half-parenth-e := enumeration-by-identity &
  [ STEM < "e", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE e-in-enumeration ]].

enumeration-by-id-with-half-parenth-f := enumeration-by-identity &
  [ STEM < "f", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE f-in-enumeration ]].

enumeration-by-id-with-half-parenth-g := enumeration-by-identity &
  [ STEM < "g", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE g-in-enumeration ]].

enumeration-by-id-with-half-parenth-h := enumeration-by-identity &
  [ STEM < "h", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE h-in-enumeration ]].

enumeration-by-id-with-half-parenth-letter-i := enumeration-by-identity &
  [ STEM < "i", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE i-in-enumeration ]].

enumeration-by-id-with-half-parenth-j := enumeration-by-identity &
  [ STEM < "j", ")" >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE j-in-enumeration ]].



enumeration-by-id-with-dot-a := enumeration-by-identity &
  [ STEM < "a", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE a-in-enumeration ]].

enumeration-by-id-with-dot-b := enumeration-by-identity &
  [ STEM < "b", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE b-in-enumeration ]].

enumeration-by-id-with-dot-c := enumeration-by-identity &
  [ STEM < "c", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE c-in-enumeration ]].

enumeration-by-id-with-dot-d := enumeration-by-identity &
  [ STEM < "d", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE d-in-enumeration ]].

enumeration-by-id-with-dot-e := enumeration-by-identity &
  [ STEM < "e", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE e-in-enumeration ]].

enumeration-by-id-with-dot-f := enumeration-by-identity &
  [ STEM < "f", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE f-in-enumeration ]].

enumeration-by-id-with-dot-g := enumeration-by-identity &
  [ STEM < "g", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE g-in-enumeration ]].

enumeration-by-id-with-dot-h := enumeration-by-identity &
  [ STEM < "h", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE h-in-enumeration ]].

enumeration-by-id-with-dot-letter-i := enumeration-by-identity &
  [ STEM < "i", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE i-in-enumeration ]].

enumeration-by-id-with-dot-j := enumeration-by-identity &
  [ STEM < "j", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_role-in-enumeration-held-by_rel",
			 ARG1.ROLE j-in-enumeration ]].






enumeration-with-parenth-1 := s-operadv-init-word &
  [ STEM < "(", "1", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-1_rel"]].

enumeration-with-parenth-2 := s-operadv-init-word &
  [ STEM < "(", "2", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-2_rel"]].

enumeration-with-parenth-3 := s-operadv-init-word &
  [ STEM < "(", "3", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-3_rel"]].

enumeration-with-parenth-4 := s-operadv-init-word &
  [ STEM < "(", "4", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-4_rel"]].

enumeration-with-parenth-5 := s-operadv-init-word &
  [ STEM < "(", "5", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-5_rel"]].

enumeration-with-parenth-6 := s-operadv-init-word &
  [ STEM < "(", "6", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-6_rel"]].

enumeration-with-parenth-7 := s-operadv-init-word &
  [ STEM < "(", "7", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-7_rel"]].

enumeration-with-parenth-8 := s-operadv-init-word &
  [ STEM < "(", "8", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-8_rel"]].

enumeration-with-parenth-9 := s-operadv-init-word &
  [ STEM < "(", "9", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-9_rel"]].

enumeration-with-parenth-10 := s-operadv-init-word &
  [ STEM < "(", "10", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-10_rel"]].


enumeration-with-half-parenth-1 := s-operadv-init-word &
  [ STEM < "1", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-1_rel"]].

enumeration-with-half-parenth- := s-operadv-init-word &
  [ STEM < "2", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-2_rel"]].

enumeration-with-half-parenth-3 := s-operadv-init-word &
  [ STEM < "3", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-3_rel"]].

enumeration-with-half-parenth-4 := s-operadv-init-word &
  [ STEM < "4", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-4_rel"]].

enumeration-with-half-parenth-5 := s-operadv-init-word &
  [ STEM < "5", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-5_rel"]].

enumeration-with-half-parenth-6 := s-operadv-init-word &
  [ STEM < "6", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-6_rel"]].

enumeration-with-half-parenth-7 := s-operadv-init-word &
  [ STEM < "7", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-7_rel"]].

enumeration-with-half-parenth-8 := s-operadv-init-word &
  [ STEM < "8", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-8_rel"]].

enumeration-with-half-parenth-9 := s-operadv-init-word &
  [ STEM < "9", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-9_rel"]].

enumeration-with-half-parenth-10 := s-operadv-init-word &
  [ STEM < "10", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-10_rel"]].

#|
enumeration-with-dot-1 := s-operadv-init-word &
  [ STEM < "1", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-1_rel"]].

enumeration-with-dot-2 := s-operadv-init-word &
  [ STEM < "2", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-2_rel"]].

enumeration-with-dot-3 := s-operadv-init-word &
  [ STEM < "3", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-3_rel"]].

enumeration-with-dot-4 := s-operadv-init-word &
  [ STEM < "4", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-4_rel"]].

enumeration-with-dot-5 := s-operadv-init-word &
  [ STEM < "5", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-5_rel"]].

enumeration-with-dot-6 := s-operadv-init-word &
  [ STEM < "6", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-6_rel"]].

enumeration-with-dot-7 := s-operadv-init-word &
  [ STEM < "7", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-7_rel"]].

enumeration-with-dot-8 := s-operadv-init-word &
  [ STEM < "8", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-8_rel"]].

enumeration-with-dot-9 := s-operadv-init-word &
  [ STEM < "9", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-9_rel"]].

enumeration-with-dot-10 := s-operadv-init-word &
  [ STEM < "10", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-10_rel"]].
|#


enumeration-with-parenth-i := s-operadv-init-word &
  [ STEM < "(", "i", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-1_rel"]].

enumeration-with-parenth-ii := s-operadv-init-word &
  [ STEM < "(", "ii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-2_rel"]].

enumeration-with-parenth-iii := s-operadv-init-word &
  [ STEM < "(", "iii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-3_rel"]].

enumeration-with-parenth-iv := s-operadv-init-word &
  [ STEM < "(", "iv", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-4_rel"]].

enumeration-with-parenth-v := s-operadv-init-word &
  [ STEM < "(", "v", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-5_rel"]].

enumeration-with-parenth-vi := s-operadv-init-word &
  [ STEM < "(", "vi", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-6_rel"]].

enumeration-with-parenth-vii := s-operadv-init-word &
  [ STEM < "(", "vii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-7_rel"]].

enumeration-with-parenth-viii := s-operadv-init-word &
  [ STEM < "(", "viii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-8_rel"]].

enumeration-with-parenth-ix := s-operadv-init-word &
  [ STEM < "(", "ix", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-9_rel"]].

enumeration-with-parenth-x := s-operadv-init-word &
  [ STEM < "(", "x", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-10_rel"]].


enumeration-with-half-parenth-i := s-operadv-init-word &
  [ STEM < "i", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-1_rel"]].

enumeration-with-half-parenth-ii := s-operadv-init-word &
  [ STEM < "ii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-2_rel"]].

enumeration-with-half-parenth-iii := s-operadv-init-word &
  [ STEM < "iii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-3_rel"]].

enumeration-with-half-parenth-iv := s-operadv-init-word &
  [ STEM < "iv", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-4_rel"]].

enumeration-with-half-parenth-v := s-operadv-init-word &
  [ STEM < "v", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-5_rel"]].

enumeration-with-half-parenth-vi := s-operadv-init-word &
  [ STEM < "vi", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-6_rel"]].

enumeration-with-half-parenth-vii := s-operadv-init-word &
  [ STEM < "vii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-7_rel"]].

enumeration-with-half-parenth-viii := s-operadv-init-word &
  [ STEM < "viii", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-8_rel"]].

enumeration-with-half-parenth-ix := s-operadv-init-word &
  [ STEM < "ix", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-9_rel"]].

enumeration-with-half-parenth-x := s-operadv-init-word &
  [ STEM < "x", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-10_rel"]].

enumeration-with-dot-i := s-operadv-init-word &
  [ STEM < "i", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-1_rel"]].

enumeration-with-dot-ii := s-operadv-init-word &
  [ STEM < "ii", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-2_rel"]].

enumeration-with-dot-iii := s-operadv-init-word &
  [ STEM < "iii", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-3_rel"]].

enumeration-with-dot-iv := s-operadv-init-word &
  [ STEM < "iv", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-4_rel"]].

enumeration-with-dot-v := s-operadv-init-word &
  [ STEM < "v", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-5_rel"]].

enumeration-with-dot-vi := s-operadv-init-word &
  [ STEM < "vi", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-6_rel"]].

enumeration-with-dot-vii := s-operadv-init-word &
  [ STEM < "vii", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-7_rel"]].

enumeration-with-dot-viii := s-operadv-init-word &
  [ STEM < "viii", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-8_rel"]].

enumeration-with-dot-ix := s-operadv-init-word &
  [ STEM < "ix", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-9_rel"]].

enumeration-with-dot-x := s-operadv-init-word &
  [ STEM < "x", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-10_rel"]].


;;;;

enumeration-with-parenth-a := s-operadv-init-word &
  [ STEM < "(", "a", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-a_rel"]].

enumeration-with-parenth-b := s-operadv-init-word &
  [ STEM < "(", "b", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-b_rel"]].

enumeration-with-parenth-c := s-operadv-init-word &
  [ STEM < "(", "c", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-c_rel"]].

enumeration-with-parenth-d := s-operadv-init-word &
  [ STEM < "(", "d", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-d_rel"]].

enumeration-with-parenth-e := s-operadv-init-word &
  [ STEM < "(", "e", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-e_rel"]].

enumeration-with-parenth-f := s-operadv-init-word &
  [ STEM < "(", "f", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-f_rel"]].

enumeration-with-parenth-g := s-operadv-init-word &
  [ STEM < "(", "g", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-g_rel"]].

enumeration-with-parenth-h := s-operadv-init-word &
  [ STEM < "(", "h", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-h_rel"]].

enumeration-with-parenth-letter-i := s-operadv-init-word &
  [ STEM < "(", "i", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-i_rel"]].

enumeration-with-parenth-j := s-operadv-init-word &
  [ STEM < "(", "j", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-j_rel"]].


enumeration-with-half-parenth-a := s-operadv-init-word &
  [ STEM < "a", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-a_rel"]].

enumeration-with-half-parenth-b := s-operadv-init-word &
  [ STEM < "b", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-b_rel"]].

enumeration-with-half-parenth-c := s-operadv-init-word &
  [ STEM < "c", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-c_rel"]].

enumeration-with-half-parenth-d := s-operadv-init-word &
  [ STEM < "d", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-d_rel"]].

enumeration-with-half-parenth-e := s-operadv-init-word &
  [ STEM < "e", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-e_rel"]].

enumeration-with-half-parenth-f := s-operadv-init-word &
  [ STEM < "f", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-f_rel"]].

enumeration-with-half-parenth-g := s-operadv-init-word &
  [ STEM < "g", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-g_rel"]].

enumeration-with-half-parenth-letter-i := s-operadv-init-word &
  [ STEM < "i", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-i_rel"]].

enumeration-with-half-parenth-h := s-operadv-init-word &
  [ STEM < "h", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-h_rel"]].

enumeration-with-half-parenth-j := s-operadv-init-word &
  [ STEM < "j", ")" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-j_rel"]].


enumeration-with-dot-a := s-operadv-init-word &
  [ STEM < "a", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-a_rel"]].

enumeration-with-dot-b := s-operadv-init-word &
  [ STEM < "b", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-b_rel"]].

enumeration-with-dot-c := s-operadv-init-word &
  [ STEM < "c", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-c_rel"]].

enumeration-with-dot-d := s-operadv-init-word &
  [ STEM < "d", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-d_rel"]].

enumeration-with-dot-e := s-operadv-init-word &
  [ STEM < "e", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-e_rel"]].

enumeration-with-dot-f := s-operadv-init-word &
  [ STEM < "f", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-f_rel"]].

enumeration-with-dot-g := s-operadv-init-word &
  [ STEM < "g", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-g_rel"]].

enumeration-with-dot-letter-i := s-operadv-init-word &
  [ STEM < "i", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-i_rel"]].

enumeration-with-dot-h := s-operadv-init-word &
  [ STEM < "h", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-h_rel"]].

enumeration-with-dot-j := s-operadv-init-word &
  [ STEM < "j", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kanskje-k,
    SYNSEM.LKEYS.KEYREL [PRED "_as-for-enumerated-item-j_rel"]].

;;;


;; m-adv ('manner'
alvorlig_m-adv := m-adv-word &
  [ STEM < "alvorlig" >,
    SYNSEM.LOCAL.CAT.HEAD.POS tag-ADV,
    SYNSEM.LKEYS.KEYREL.PRED "_alvorlig_adv_rel"].

sammen_m-adv := adv-word-reg &
  [ STEM < "sammen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sammen_adv_rel"].

slik_m-adv := adv-word-reg &
  [ STEM < "slik" >,
    SYNSEM.LKEYS.KEYREL.PRED "_slik_adv_rel"].

overens_m-adv := adv-word-reg &
  [ STEM < "overens" >,
    SYNSEM.LKEYS.KEYREL.PRED "_overens_adv_rel"].

alene_m-adv := adv-word-reg &
  [ STEM < "alene" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alene_adv_rel"].

på_egen_hånd_m-adv := adv-word-reg &
  [ STEM < "på", "egen", "hånd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_egen_hånd_adv_rel"].

på_egenhånd_m-adv := adv-word-reg &
  [ STEM < "på", "egenhånd" >,
    SYNSEM.LKEYS.KEYREL.PRED "_på_egen_hånd_adv_rel"].

som_sådan_adv := adv-word-reg &
  [ STEM < "som", "sådan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_sådan_adv_rel"].

i_og_for_seg_adv := adv-word-reg &
  [ STEM < "i", "og", "for", "seg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_og_for_seg_adv_rel"].

per_se_adv := adv-word-reg &
  [ STEM < "per", "se" >,
    SYNSEM.LKEYS.KEYREL.PRED "_per_se_adv_rel"].

i_søvne_adv := adv-word-reg &
  [ STEM < "i", "søvne" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_søvne_adv_rel"].

i_tide_adv := adv-word-reg &
  [ STEM < "i", "tide" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_tide_adv_rel"].

i_utide_adv := adv-word-reg &
  [ STEM < "i", "utide" >,
    SYNSEM.LKEYS.KEYREL.PRED "_i_utide_adv_rel"].

best_mulig_adv := adv-word-reg &
  [ STEM < "best", "mulig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_best_mulig_adv_rel"].

;rett_adv := adv-word-reg &
;  [ STEM < "rett" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_rett_adv_rel"].

lett_adv := adv-word-reg &
  [ STEM < "lett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lett_adv_rel"].

greit_adv := adv-word-reg &
  [ STEM < "greit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_greit_adv_rel"].

mye_adv := adv-word-vp-mod &
  [ STEM < "mye" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_adv_rel"].

lite_adv := adv-word-vp-mod &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_adv_rel"].

litt_adv := adv-word-vp-mod &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_adv_rel"].

noe_adv := adv-word-vp-mod &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noe_adv_rel"].

litt-til_adv := adv-word-vp-mod &
  [ STEM < "litt", "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt-til_adv_rel"].



;; refl-adv
selv_refl := refl-adv-word &
  [ STEM < "selv" > ].

selv_regadv := adv-word-reg &
  [ STEM < "selv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_selv_adv_rel" ].

;sjølv_refl := refl-adv-word &
;  [ STEM < "sjølv" > ].

;sjølv_regadv := adv-word-reg &
;  [ STEM < "sjølv" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_sjølv_adv_rel" ].

sjøl_refl := refl-adv-word &
  [ STEM < "sjøl" > ].

sjøl_regadv := adv-word-reg &
  [ STEM < "sjøl" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sjøl_adv_rel" ].

;sjæl_refl := refl-adv-word &
;  [ STEM < "sjæl" > ].

;sjæl_regadv := adv-word-reg &
;  [ STEM < "sjøl" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_sjæl_adv_rel" ].


hvor_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-at-which-place_adv_rel"].

hvori_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvori" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvori_adv_rel"].

hvoriblant_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvoriblant" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvoriblant_adv_rel"].

; very old form
hvo_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvo-at-which-place_adv_rel"].

når_wh-regadv := wh-adv-word-reg &
  [ STEM < "når" >,
    SYNSEM.LKEYS.KEYREL.PRED "_når-at-which-time_adv_rel"].

hvorfor_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorfor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorfor-for-which-reason_adv_rel"].

; very old form  - and gives extra parses with "hvis"-constructions
;hvi_wh-regadv := wh-adv-word-reg &
;  [ STEM < "hvi" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_hvi-for-which-reason_adv_rel"].

hvordan_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvordan" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvordan-in-which-manner_adv_rel"].

hvorledes_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorledes" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorledes-in-which-manner_adv_rel"].

kossen_wh-regadv := wh-adv-word-reg &
  [ STEM < "kossen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kossen-in-which-manner_adv_rel"].

åssen_wh-regadv := wh-adv-word-reg &
  [ STEM < "åssen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_åssen-in-which-manner_adv_rel"].

korsen_wh-regadv := wh-adv-word-reg &
  [ STEM < "korsen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_korsen-in-which-manner_adv_rel"].

hvor_wh-orientadv := wh-orient-adv-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-at-which-place_adv_rel"].

hvortil_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvortil" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvortil-to-which-place_adv_rel"].

hvor-til_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvor", "til" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvortil-to-which-place_adv_rel"].

hvorhen_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvorhen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorhen-to-which-place_adv_rel"].

hvorimot_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvorimot" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorimot-towards-which-place_adv_rel"].

hvor-hen_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvor", "hen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorhen-to-which-place_adv_rel"].

hvorfra_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvorfra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorfra-from-which-place_adv_rel"].

hvor-fra_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvor", "fra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorfra-from-which-place_adv_rel"].

hvoretter_wh-orientadv := wh-dirarg-telic-adv-word &
  [ STEM < "hvoretter" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvoretter-along-what_adv_rel"].

hvorav_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorav" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorav-from-what_adv_rel"].

hvormed_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorav" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvormed-with-what_adv_rel"].

hvorom_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorom-about-what_adv_rel"].

hvorpå_wh-regadv := wh-adv-word-reg &
  [ STEM < "hvorpå" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvorpå-on-what_adv_rel"].

;hvorvidt_wh-regadv := wh-adv-word-reg &
;  [ STEM < "hvorvidt" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_hvorvidt-to-what-extent_adv_rel"].


;;;;;;; COMPLEMENTIZERS, SELECTED PREPOSITIONS and more

å_inf-comp := inf-comp &
  [ STEM < "å" >].

å_arb-inf-comp := inf-arbref-comp &
  [ STEM < "å" >].

at_subord := decl-subord-comp &
  [ STEM < "at" >,
;    SYNSEM.LOCAL.CAT.HEAD.DECL +,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-at,
    SYNSEM.LKEYS.KEYREL.PRED "_at_comp_rel"].

; NB: correct entry, but rarely used, and doubles parses all the time
;at_main-subord := subord-maincl-comp &
;  [ STEM < "at" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_at_comp_rel"].

det_subord := pre-subord-comp &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "_det_comp_rel"].

; "virke som om"
;som-om_subord := decl-subord-comp &
;  [ STEM < "som", "om" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
;    SYNSEM.LKEYS.KEYREL.PRED "_som-om_rel"].

; "virke som" ;ok det virker som han kommer
som_low-veridic := decl-subord-comp &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som, 
    SYNSEM.LKEYS.KEYREL.PRED "_som_rel"].

; low-veridic-subord-comp
;ok  det virker som om han kommer
som-om_low-veridic := decl-subord-comp &  
  [ STEM < "som", "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_som-om_rel"].

; low-veridic-subord-comp
som-at_low-veridic := decl-subord-comp &  ;ok  det virker som at han kommer
  [ STEM < "som", "at" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_som-at_rel"].

; low-veridic-subord-comp
ut-til-at_low-veridic := decl-subord-comp &  ;ok  det ser ut til at han kommer
  [ STEM < "ut", "til", "at" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_ut-til-at_rel"].

; low-veridic-subord-comp
til-at_low-veridic := decl-subord-comp &  ;ok  det ser ut til han kommer
  [ STEM < "til", "at" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_til-at_rel"].

; low-veridic-subord-comp
;med-at_low-veridic := low-veridic-subord-comp &  ;ok  det haster med at han kommer
;  [ STEM < "med", "at" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
;    SYNSEM.LKEYS.KEYREL.PRED "_med-at_rel"].

; low-veridic-subord-comp
ut-som-om_low-veridic := decl-subord-comp &  ;ok  det ser ut som om han kommer
  [ STEM < "ut", "som", "om" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_ut-som-om_rel"].

; low-veridic-subord-comp
ut-som_low-veridic := decl-subord-comp &  ;ok  det ser ut som han kommer
  [ STEM < "ut", "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_ut-som_rel"].

; low-veridic-subord-comp
ut-som-at_low-veridic := decl-subord-comp &  ;ok  det ser ut som at han kommer
  [ STEM < "ut", "som", "at" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_ut-som-at_rel"].


; low-veridic-subord-comp
; "virke som"
likesom_low-veridic := decl-subord-comp &
  [ STEM < "likesom" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_likesom_rel"].

; "virke som"
; only instance where 'low-veridic-subord-comp' is still used- LH200822  not yet working
liksom_low-veridic := low-veridic-subord-comp &
  [ STEM < "liksom" >,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY finit-comp-som,
    SYNSEM.LKEYS.KEYREL.PRED "_liksom_rel"].

;LH180718
om_y-n-subord := y-n-quest-subord-comp &
  [ STEM < "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_om_comp_rel"].

;om_y-n-subord := decl-subord-comp &
;  [ STEM < "om" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_om_comp_rel"].

; from large na-lexicon
; TODO: wrong to have these as prepositions
best-som__prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "best", "som" >,
   SYNSEM.LKEYS.KEYREL.PRED "_best-som-same_time_c_rel" ].

dersom_comp := prep-s-word-reg-cond &
 [ STEM < "dersom" >,
   SYNSEM.LKEYS.KEYREL.PRED "dersom-depend-on_rel" ].

enskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "enskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "enskjønt_rel" ].

ennskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "ennskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "ennskjønt_rel" ].

omennskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "omennskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "omennskjønt_rel" ].

uaktet_comp := prep-s-word-reg-cond &
 [ STEM < "uaktet" >,
   SYNSEM.LKEYS.KEYREL.PRED "uaktet_rel" ].

etter_som_comp := prep-s-word-reg-cond &
 [ STEM < "etter", "som" >,
   SYNSEM.LKEYS.KEYREL.PRED "ettersom-cause-of_rel" ].

ettersom_comp := prep-s-word-reg-cond &
 [ STEM < "ettersom" >,
   SYNSEM.LKEYS.KEYREL.PRED "ettersom-cause-of_rel" ].

;; sbu, pos i norsource: [p]
best-som_comp := prep-s-word-reg-cond & 
 [ STEM < "best","som" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_best-som_rel" ].

for_at_comp := prep-s-word-reg-cond &
 [ STEM < "for", "at" >,
   SYNSEM.LKEYS.KEYREL.PRED "for-at-purpose-of_rel" ].

uten_at_comp := prep-s-word-reg-cond &
 [ STEM < "uten", "at" >,
   SYNSEM.LKEYS.KEYREL.PRED "uten-at_rel" ].

forat_comp := prep-s-word-reg-cond &
 [ STEM < "forat" >,
   SYNSEM.LKEYS.KEYREL.PRED "forat-purpose-of_rel" ].

slik_at_comp := prep-s-word-reg-cond &
 [ STEM < "slik", "at" >,
   SYNSEM.LKEYS.KEYREL.PRED "slik-at-purpose-of_rel" ].

slikat_comp := prep-s-word-reg-cond &
 [ STEM < "slikat" >,
   SYNSEM.LKEYS.KEYREL.PRED "slik at-purpose-of_rel" ].

sånn_at_comp := prep-s-word-reg-cond &
 [ STEM < "sånn", "at" >,
   SYNSEM.LKEYS.KEYREL.PRED "sånn-at-purpose-of_rel" ].

sånnat_comp := prep-s-word-reg-cond &
 [ STEM < "sånnat" >,
   SYNSEM.LKEYS.KEYREL.PRED "sånn-at-purpose-of_rel" ].

så_at_comp := prep-s-word-reg-cond &
 [ STEM < "så", "at" >,
   SYNSEM.LKEYS.KEYREL.PRED "så-at-purpose-of_rel" ].

fordi_comp := prep-s-word-reg-cond &
 [ STEM < "fordi" >,
   SYNSEM.LKEYS.KEYREL.PRED "fordi-cause-of_rel" ].

da_comp := prep-s-word-reg-cond &
 [ STEM < "da" >,
   SYNSEM.LKEYS.KEYREL.PRED "da-cause-of_rel" ].

for-di_comp := prep-s-word-reg-cond &
 [ STEM < "for", "di" >,
   SYNSEM.LKEYS.KEYREL.PRED "for-di-cause-of_rel" ].

for_comp := prep-s-word-reg-cond &
 [ STEM < "for" >,
   SYNSEM.LKEYS.KEYREL.PRED "for-cause-of_rel" ].

siden_comp := prep-s-word-reg-cond &
 [ STEM < "siden" >,
   SYNSEM.LKEYS.KEYREL.PRED "siden-cause-of_rel" ].

før-enn_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "før", "enn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_før-enn_c_rel" ].

førenn_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "førenn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_førenn-time_c_rel" ].

rett-som_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "rett", "som" >,
   SYNSEM.LKEYS.KEYREL.PRED "_rett-som_c_rel" ].

som_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "som" >,
   SYNSEM.LKEYS.KEYREL.PRED "_same-time-som_c_rel" ].

i_fall_comp := prep-s-word-reg-cond &
 [ STEM < "i", "fall" >,
   SYNSEM.LKEYS.KEYREL.PRED "i-fall-depend-on_rel" ].

i_allfall_comp := prep-s-word-reg-cond &
 [ STEM < "i", "allfall" >,
   SYNSEM.LKEYS.KEYREL.PRED "i-fall-depend-on_rel" ].

i_alle_fall_comp := prep-s-word-reg-cond &
 [ STEM < "i", "alle", "fall" >,
   SYNSEM.LKEYS.KEYREL.PRED "i-fall-depend-on_rel" ].

ifall_comp := prep-s-word-reg-cond &
 [ STEM < "ifall" >,
   SYNSEM.LKEYS.KEYREL.PRED "ifall-depend-on_rel" ].

i_hvertfall_comp := prep-s-word-reg-cond &
 [ STEM < "i", "hvertfall" >,
   SYNSEM.LKEYS.KEYREL.PRED "i-hvertfall-depend-on_rel" ].

i_hvert_fall_comp := prep-s-word-reg-cond &
 [ STEM < "i", "hvert", "fall" >,
   SYNSEM.LKEYS.KEYREL.PRED "i-hvertfall-depend-on_rel" ].

hvertfall_comp := prep-s-word-reg-cond &
 [ STEM < "hvertfall" >,
   SYNSEM.LKEYS.KEYREL.PRED "i-hvertfall-depend-on_rel" ].


idet__prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "idet" >,
   SYNSEM.LKEYS.KEYREL.PRED "_idet-same_time_c_rel" ].

i-det__prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "i", "det" >,
   SYNSEM.LKEYS.KEYREL.PRED "_i-det-same_time_c_rel" ].

med-mindre_comp := prep-s-word-reg-cond &
 [ STEM < "med", "mindre" >,
   SYNSEM.LKEYS.KEYREL.PRED "med-mindre_rel" ].

om-enn_comp := prep-s-word-reg-cond &
 [ STEM < "om", "enn" >,
   SYNSEM.LKEYS.KEYREL.PRED "om-enn_rel" ].

så-lenge_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "så", "lenge" >,
   SYNSEM.LKEYS.KEYREL.PRED "_så-lenge_time_c_rel" ].

mens_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "mens" >,
   SYNSEM.LKEYS.KEYREL.PRED "_mens-same_time_c_rel" ].

imens_prep-time := prep-s-word-vmod-reg-time &
 [ STEM < "imens" >,
   SYNSEM.LKEYS.KEYREL.PRED "_imens-same_time_c_rel" ].

om_comp_cond := prep-s-word-reg-cond &
 [ STEM < "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "om-cond_rel" ].

omenn_comp := prep-s-word-reg-cond &
 [ STEM < "omenn" >,
   SYNSEM.LKEYS.KEYREL.PRED "_omenn_rel" ].

omenskjønt_comp := prep-s-word-reg-cond &
 [ STEM < "omenskjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_omennskjønt_rel" ].

selv_om_comp := prep-s-word-reg-cond &
 [ STEM < "selv", "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "_selv-om_rel" ].

sjøl_om_comp := prep-s-word-reg-cond &
 [ STEM < "sjøl", "om" >,
   SYNSEM.LKEYS.KEYREL.PRED "_selv-om_rel" ].

skjønt_comp := prep-s-word-reg-cond &
 [ STEM < "skjønt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_skjønt_rel" ].

så_framt_comp := prep-s-word-reg-cond &
 [ STEM < "så", "framt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_så-framt-depend-on_rel" ].

så_fremt_comp := prep-s-word-reg-cond &
 [ STEM < "så", "fremt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_så-fremt-depend-on_rel" ].

såframt_comp := prep-s-word-reg-cond &
 [ STEM < "såframt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_såfremt-depend-on_rel" ].

såfremt_comp := prep-s-word-reg-cond &
 [ STEM < "såfremt" >,
   SYNSEM.LKEYS.KEYREL.PRED "_såfremt-depend-on_rel" ].

viss_comp := prep-s-word-reg-cond &
 [ STEM < "viss" >,
   SYNSEM.LKEYS.KEYREL.PRED "_viss-depend-on_rel" ].

; the "som" that sits in COMP. Combines with N by 

som_fillerrelpron := som_filler-relpron &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.POS tag-PN,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-fillerrelprn ].

hvilket_fillerrelpron := hvilket_filler-relpron &
  [ STEM < "hvilket" >,
    SYNSEM.LOCAL.CAT.HEAD.POS tag-PN,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY hvilket-fillerrelprn ].

; the "som" that sits in subject position. Combines with N by: 
som_subjrelpron := som_subj-relpron &
  [ STEM < "som" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-subjrelprn ].

hvilket_subjrelpron := hvilket_subj-relpron &
  [ STEM < "hvilket" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY hvilket-subjrelprn ].

; LH20092018  do without this, instead hvem-som as COMP. 16022019: now the opposite - it's far more general, as in "jeg vet hvor mange båter med flyktninger som komer"
som_subjgap := som-resumpt-word &
  [ STEM < "som" >,
    SYNSEM.LOCAL.SUBJ-SOM +,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-subjgap ].

; not really used - not even grammatical
;som_anse-som-å := som-or-for-comp &
;  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-inf,
;   SYNSEM.LOCAL.CONT.RELS <! [PRED "_som_eq_rel"] !>,
;   SYNSEM.LOCAL.CONT.HCONS <!  !>].

;for_anse-for-å := som-or-for-comp &
for_anse-for-å := for-comp &
  [ STEM < "for" >,
    SYNSEM.LKEYS.KEYREL.PRED "_for_eq_rel",
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-pred-inf,
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-rais, ;predcomp-for,
   SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_eq_rel"] !>,
   SYNSEM.LOCAL.CONT.HCONS <!  !>].

#|
som-om_prep-irreal := prep-s-word-reg-irreal &
  [ STEM < "som", "om" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-om-irreal_rel" ].

som_prep-irreal := prep-s-word-reg-irreal &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som-irreal_rel" ].

liksom_prep-irreal := prep-s-word-reg-irreal &
  [ STEM < "liksom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_liksom_eq_rel" ].

likesom_prep-irreal := prep-s-word-reg-irreal &
  [ STEM < "likesom" >,
    SYNSEM.LKEYS.KEYREL.PRED "_likesom_eq_rel" ].
|#


som_stille-som-n := som-n-pred-comp &
  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-n ].

som_anse-som-adj := som-adj-pred-comp &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY predcomp-adj ].

som_synes-som-a := som-adj-pred-pp-comp &
  [ STEM < "som" >,
    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-adj ].

;som_synes-som-derived-a := som-derivedadj-pred-pp-comp &
;  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_som_eq_rel",
;    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY som-pred-adj ].


;;; punctuation

p-adv-comma := p-adv-connect-punctuation &
  [ STEM < "," > ].

; new, and maybe superfluous, now that commq-leftmod-for-v works
;p-adv-clause-comma := p-adv-clause-connect-punctuation &
;  [ STEM < "," > ].

p-clse-comma := p-clse-connect-punctuation &
  [ STEM < "," > ].

vcond-comma := vcond-connect-punctuation &
  [ STEM < "," > ].

vcond-hvis-comma := vcond-hvis-punctuation &
  [ STEM < "," > ].

interjct-comma := interject-connect-punctuation &
  [ STEM < "," > ].

adj-interjct-comma := adj-interject-connect-punctuation &
  [ STEM < "," > ].

direct-speech-comma := quotation-connect-punctuation &
  [ STEM < "," > ].

relcl-comma := rel-cl-connect-punctuation &
  [ STEM < "," > ].

relcl-nonrestr-comma := rel-cl-nonrestr-punctuation &
  [ STEM < "," > ].

#|
; Temporarily coment out, to see what the other commas and combinations cover
app-comma := app-punctuation &
  [ STEM < "," >,
     SYNSEM.LKEYS.KEYREL.PRED "_punctuated_c_rel" ].

app-nonrestr-comma := app-nonrestr-punctuation &
  [ STEM < "," > ].

app-parenthesis := app-punctuation &
  [ STEM < ")" > ].

app-nonrestr-parenthesis := app-nonrestr-punctuation &
  [ STEM < "(" > ].
|#

start-parenthesis := parenthesis-opener &
  [ STEM < "(" > ].
end-parenthesis := parenthesis-closer &
  [ STEM < ")" > ].
start-quotation := quotation-opener &
  [ STEM < "'" > ].
start-doublefnutt-quotation := quotation-opener &
  [ STEM < "dobbelfnutt" > ].
end-quotation := quotation-closer &
  [ STEM < "'" > ].
start-bracket := parenthesis-opener &
  [ STEM < "[" > ].
end-bracket := parenthesis-closer &
  [ STEM < "]" > ].
start-curlybracket := parenthesis-opener &
  [ STEM < "{" > ].
end-curlybracket := parenthesis-closer &
  [ STEM < "}" > ].
start-angledbracket := parenthesis-opener &
  [ STEM < "<" > ].
end-angledbracket := parenthesis-closer &
  [ STEM < ">" > ].


period := decl-end-punct &
  [ STEM < "." > ].

period-interjct := interjct-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_interjct-punctuated_rel" ] ].

;clause-comma := end-punct &
;  [ STEM < "," > ].

quest-mark := quest-end-punct &
  [ STEM < "?" > ].

quest-interjct := interjct-end-punct &
  [ STEM < "?" >,
     SYNSEM.LOCAL.CAT.HEAD [ MOD <[ LOCAL [ CONT.HOOK.INDEX.SF ques ]] > ],
     SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].

exclam-mark := commd-end-punct &
  [ STEM < "!" > ].

period-n := n-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_period-punctuated_rel" ] ].
period-adj-or-adv := adj-or-adv-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_period-punctuated_rel" ] ].
period-prep := prep-end-punct &
  [ STEM < "." >,
    SYNSEM.LKEYS.KEYREL [ PRED "_period-punctuated_rel" ] ].
quest-noun := n-end-punct &
  [ STEM < "?" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].
exclam-noun := n-end-punct &
  [ STEM < "!" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_exclam-punctuated_rel" ] ].
quest-prep := prep-end-punct &
  [ STEM < "?" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].
exclam-prep := prep-end-punct &
  [ STEM < "!" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_exclam-punctuated_rel" ] ].
quest-adj-or-adv := adj-or-adv-end-punct &
  [ STEM < "?" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_quest-punctuated_rel" ] ].
exclam-adj-or-adv := adj-or-adv-end-punct &
  [ STEM < "!" >,
    SYNSEM.LKEYS.KEYREL [ PRED "_exclam-punctuated_rel" ] ].


;colon := colon-end-punct &
;  [ STEM < ":" > ].

;semicolon := semicolon-end-punct &
;  [ STEM < ";" > ].

;subordcolon := subord-colon &
;  [ STEM < ":" > ].

;gedankenstrech := gedankenstrech-end-punct &
;  [ STEM < "-" > ].


colon := v-connect-kolon &
  [ STEM < ":" >,
    SYNSEM.LKEYS.KEYREL [PRED "_v-to-v-colon_rel"] ].

semicolon := v-connect-semikolon &
  [ STEM < ";" >,
    SYNSEM.LKEYS.KEYREL [PRED "_v-to-v-semicolon_rel"] ].

gedankenstrech := v-connect-gedankenstreich &
  [ STEM < "-" >,
    SYNSEM.LKEYS.KEYREL [PRED "_gedankenstrech_rel"] ].


; slashes - provisional in their category
slash := gedankenstrech-end-punct &
  [ STEM < "/" > ].

;backslash := gedankenstrech-end-punct &
;  [ STEM < "\" > ].


; conjunctions and connectives

videre_connect := p-adv-connect-adv-word &
  [ STEM < "videre" >,
    SYNSEM.LKEYS.KEYREL [PRED "_videre_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY videre-conn ]].

;doubtful
;så_connect := p-adv-connect-adv-word &
;  [ STEM < "så" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_så_conn_rel"],
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY så-conn ]].

deretter_connect := p-adv-connect-adv-word &
  [ STEM < "deretter" >,
    SYNSEM.LKEYS.KEYREL [PRED "_deretter_conn_rel"],
    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY deretter-conn ]].

;for now Jan2021 put on wait
;og_cameleon-gapping_vlxm := gapping-serial-verb-lexeme &
;  [ INFLECTION nonfstr-strong,
;      STEM < "og" > ].


; parse proliferation damage
og_p-adv-connect := p-adv-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

samt_p-adv-connect := p-adv-connect-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-connect_rel"]].

og-comma_p-adv-connect := p-adv-connect-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

og_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

samt_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-connect_rel"]].

og-comma_p-dir-adv-connect := p-adv-dir-connect-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

og_v-connect := v-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

pero_v-gap-connect := v-gap-connect-word &
  [ STEM < "pero" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og-comma_v-connect := v-connect-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

samt_v-connect := v-connect-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-connect_rel"]].

samt-comma_v-connect := v-connect-word &
  [ STEM < ",", "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-comma-connect_rel"]].

og-comma_v-comp-connect := v-comp-connect-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

og_v-comp-connect := v-comp-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

comma_v-infin-comp-connect := v-infin-comp-connect-comma &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og_v-infin-comp-connect := v-infin-comp-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og-comma_v-infin-comp-connect := v-infin-comp-connect-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

comma_v-comp-connect := v-comp-connect-comma &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

samt_v-comp-connect := v-comp-connect-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-connect_rel"]].

;og-comma_comp-v-connect := v-comp-connect-word &
;  [ STEM < ",", "og" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

og_a-connect := a-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

og-comma_a-connect := a-connect-comma &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

samt_a-connect := a-connect-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-connect_rel"]].

;og-comma_a-connect := a-connect-word &
;  [ STEM < ",", "og" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

;is this ever used?  'og lykke til!'
og_interject-connect := interject-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og_rel"]].

;og_n-connect := n-connect-coord-word &
;  [ STEM < "og" >,
;;    SYNSEM.LKEYS.KEYREL [PRED "_and_rel"],
;    SYNSEM.LOCAL.CAT.HEAD [KEYS.KEY og-conn ]].

og_n-connect := n-connect-word &
  [ STEM < "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-connect_rel"]].

samt_n-connect := n-connect-word &
  [ STEM < "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-connect_rel"]].

samt-comma_n-connect := n-connect-word &
  [ STEM < ",", "samt" >,
    SYNSEM.LKEYS.KEYREL [PRED "_samt-comma-connect_rel"]].

og-ampersand_n-connect := n-connect-word &
  [ STEM < "&" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-by-ampersand-connect_rel"]].

og-comma_n-connect := n-connect-word &
  [ STEM < ",", "og" >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-comma-connect_rel"]].

comma_n-connect := n-connect-comma &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL [PRED "_og-by-comma-connect_rel"]].

men_v-connect := v-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

;perhaps superfluous
;men-comma_v-connect := v-connect-comma &
;  [ STEM < ",", "men" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_men-comma-connect_rel"]].

men_v-comp-connect := v-comp-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

men-comma_v-comp-connect := v-comp-connect-comma &
  [ STEM < ",", "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men-comma-connect_rel"]].

men_a-connect := a-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men_rel"]].

men_n-connect := n-connect-word &
  [ STEM < "men" >,
    SYNSEM.LKEYS.KEYREL [PRED "_men-connect_rel"]].

; for 'såvel ... som' Still TODO
;som_n-connect := n-connect-word &
;  [ STEM < "som" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_som-connect_rel"]].

eller_p-adv-connect := p-adv-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

;eller-comma_p-adv-connect := p-adv-connect-word &
;  [ STEM < ",", "eller" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_eller-comma_rel"]].

eller-med-andre-ord_p-adv-connect := p-adv-connect-word &
  [ STEM < "eller", "med", "andre", "ord" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller-m§-a§-o§_p-adv-connect := p-adv-connect-word &
  [ STEM < "eller", "m", ".", "a", ".", "o", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller-m-a-o_p-adv-connect := p-adv-connect-word &
  [ STEM < "eller", "m", "a", "o" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller_p-adv-dir-connect := p-adv-dir-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

;eller-comma_p-adv-dir-connect := p-adv-dir-connect-word &
;  [ STEM < ",", "eller" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_eller-comma_rel"]].

eller_v-connect := v-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

;eller-comma_v-connect := v-connect-word &
;  [ STEM < ",", "eller" >,
;    SYNSEM.LKEYS.KEYREL [PRED "_eller-comma_rel"]].

eller_v-comp-connect := v-comp-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller-comma_v-comp-connect := v-comp-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-comma_rel"]].

eller_v-infin-comp-connect := v-infin-comp-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

;;
eller-med-andre-ord_v-connect := v-connect-word &
  [ STEM < "eller", "med", "andre", "ord" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller-m§-a§-o§_v-connect := v-connect-word &
  [ STEM < "eller", "m", ".", "a", ".", "o", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller-m-a-o_v-connect := v-connect-word &
  [ STEM < "eller", "m", "a", "o" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

med-andre-ord_v-connect := v-connect-word &
  [ STEM < "med", "andre", "ord" >,
    SYNSEM.LKEYS.KEYREL [PRED "_med-andre-ord_rel"]].

m§-a§-o§_v-connect := v-connect-word &
  [ STEM < "m", ".", "a", ".", "o", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_med-andre-ord_rel"]].

m-a-o_v-connect := v-connect-word &
  [ STEM < "m", "a", "o" >,
    SYNSEM.LKEYS.KEYREL [PRED "_med-andre-ord_rel"]].

det-vil-si_v-connect := v-connect-word &
  [ STEM < "det", "vil", "si" >,
    SYNSEM.LKEYS.KEYREL [PRED "_det-vil-si_rel"]].

d§-v§-s§_v-connect := v-connect-word &
  [ STEM < "d", ".", "v", ".", "s", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_det-vil-si_rel"]].

d-v-s_v-connect := v-connect-word &
  [ STEM < "d", "v", "s" >,
    SYNSEM.LKEYS.KEYREL [PRED "_det-vil-si_rel"]].


;;
eller_a-connect := a-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller_rel"]].

eller-comma_a-connect := a-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-comma_rel"]].

eller_n-connect := n-connect-word &
  [ STEM < "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-connect_rel"]].

eller-slash_n-connect := n-connect-word &
  [ STEM < "/" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-connect_rel"]].

eller-comma_n-connect := n-connect-word &
  [ STEM < ",", "eller" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-comma-connect_rel"]].

;;
eller-med-andre-ord_n-connect := n-connect-word &
  [ STEM < "eller", "med", "andre", "ord" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller-m§-a§-o§_n-connect := n-connect-word &
  [ STEM < "eller", "m", ".", "a", ".", "o", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

eller-m-a-o_n-connect := n-connect-word &
  [ STEM < "eller", "m", "a", "o" >,
    SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

e§-lignende_n-connect := noun-lexeme &
  [ STEM < "e", ".", "lign", "." >,
    INFLECTION subst_fork,
   SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

el§-lignende_n-connect := noun-lexeme &
  [ STEM < "el", ".", "lign", "." >,
    INFLECTION subst_fork,
   SYNSEM.LKEYS.KEYREL [PRED "_eller-med-andre-ord_rel"]].

etc§_n-connect := noun-lexeme &
  [ STEM < "etc", "." >,
    INFLECTION subst_fork,
   SYNSEM.LKEYS.KEYREL [PRED "_etc_rel"]].

med-andre-ord_n-connect := n-connect-word &
  [ STEM < "med", "andre", "ord" >,
    SYNSEM.LKEYS.KEYREL [PRED "_med-andre-ord_rel"]].

m§-a§-o§_n-connect := n-connect-word &
  [ STEM < "m", ".", "a", ".", "o", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_med-andre-ord_rel"]].

m-a-o_n-connect := n-connect-word &
  [ STEM < "m", "a", "o" >,
    SYNSEM.LKEYS.KEYREL [PRED "_med-andre-ord_rel"]].

det-vil-si_n-connect := n-connect-word &
  [ STEM < "det", "vil", "si" >,
    SYNSEM.LKEYS.KEYREL [PRED "_det-vil-si_rel"]].

d§-v§-s§_n-connect := n-connect-word &
  [ STEM < "d", ".", "v", ".", "s", "." >,
    SYNSEM.LKEYS.KEYREL [PRED "_det-vil-si_rel"]].

d-v-s_n-connect := n-connect-word &
  [ STEM < "d", "v", "s" >,
    SYNSEM.LKEYS.KEYREL [PRED "_det-vil-si_rel"]].


;;

minus_n-connect := n-connect-word &
  [ STEM < "minus" >,
    SYNSEM.LKEYS.KEYREL [PRED "_minus-connect_rel"]].

minus_n-connect-symb := n-connect-word &
  [ STEM < "-" >,
    SYNSEM.LKEYS.KEYREL [PRED "_minus-connect_rel"]].

plus_n-connect := n-connect-word &
  [ STEM < "plus" >,
    SYNSEM.LKEYS.KEYREL [PRED "_plus-connect_rel"]].

pluss_n-connect := n-connect-word &
  [ STEM < "pluss" >,
    SYNSEM.LKEYS.KEYREL [PRED "_plus-connect_rel"]].

pluss_n-connect-symb := n-connect-word &
  [ STEM < "+" >,
    SYNSEM.LKEYS.KEYREL [PRED "_plus-connect_rel"]].

ganger_n-connect := n-connect-word &
  [ STEM < "ganger" >,
    SYNSEM.LKEYS.KEYREL [PRED "_ganger-connect_rel"]].

ganget-med_n-connect := n-connect-word &
  [ STEM < "ganget", "med" >,
    SYNSEM.LKEYS.KEYREL [PRED "_ganger-connect_rel"]].

multiplisert-med_n-connect := n-connect-word &
  [ STEM < "multiplisert", "med" >,
    SYNSEM.LKEYS.KEYREL [PRED "_ganger-connect_rel"]].

multiplisert-med_n-connect-symb := n-connect-word &
  [ STEM < "x" >,
    SYNSEM.LKEYS.KEYREL [PRED "_ganger-connect_rel"]].

dividert-med_n-connect := n-connect-word &
  [ STEM < "dividert", "med" >,
    SYNSEM.LKEYS.KEYREL [PRED "_dividert-connect_rel"]].

dividert-på_n-connect := n-connect-word &
  [ STEM < "dividert", "på" >,
    SYNSEM.LKEYS.KEYREL [PRED "_dividert-connect_rel"]].

delt-på_n-connect := n-connect-word &
  [ STEM < "delt", "på" >,
    SYNSEM.LKEYS.KEYREL [PRED "_dividert-connect_rel"]].

delt-på_n-connect-symb := n-connect-word &
  [ STEM < ":" >,
    SYNSEM.LKEYS.KEYREL [PRED "_dividert-connect_rel"]].



;; I have altered some of the following entries to avoid generating "og", "men" og "så" at the same time.
;; Hopefully I have done so for all the relevant entries, but perhaps some have been left out by a mistake. EAA. 01.04.11

; LH020513  yielding to the 'connect'-flow
;og_n-coord := coordinating-pos-n-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

;og_card-coord := coordinating-card-card-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"], [] !> ].

;og_adv-p-coord := coordinating-pos-adv-pp-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

; LH020513  yielding to the 'connect'-flow
;og_v-coord := coordinating-pos-v-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

;og_v-dir-coord := coordinating-pos-v-dir-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

; LH 120711: seems always covered by 'og_v-coord'
;og_relclause-coord := coordinating-relcl-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

; LH020513  yielding to the 'connect'-flow
;og_adj-coord := coordinating-pos-adj-word &
;  [ STEM < "og" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_og_conjunction_rel"] !> ].

;eller_n-coord := coordinating-neg-n-word &
;  [ STEM < "eller" > ].

;eller_adv-p-coord := coordinating-neg-adv-pp-word &
;  [ STEM < "eller" > ].

;eller_v-coord := coordinating-neg-v-word &
;  [ STEM < "eller" > ].

;eller_adj-coord := coordinating-neg-adj-word &
;  [ STEM < "eller" > ].

; not correct, of course
;men_v-coord := coordinating-pos-v-word &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel",
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_men_conjunction_rel"] !> ].

;så_v-coord := coordinating-pos-v-word &
;  [ STEM < "så" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel",
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_så_conjunction_rel"] !> ].

; "..., for han har ikke ..."
;for_v-coord := coordinating-pos-v-word &
;  [ STEM < "for" >,
;    SYNSEM.LOCAL.CONT.RELS <! [PRED "_for_conjunction_rel"] !> ].

;men_adj-coord := coordinating-neg-adj-word &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;men_adv-p-coord := coordinating-neg-adv-pp-word &
;  [ STEM < "men" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_n_coord := coordinating-n-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_adv-p-coord := coordinating-adv-pp-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_v-coord := coordinating-v-comma &
comma_v-connect := v-connect-comma &
  [ STEM < "," >,
    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;comma_adjective-coord := coordinating-adj-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

; not obvious for what - overlaps with coordinating-v-comma, so tentatively take out
;comma_pre-coord-coord := coordinating-coord-comma &
;  [ STEM < "," >,
;    SYNSEM.LKEYS.KEYREL.PRED "_conjoined_conn_rel" ].

;både_corrcoord := correl-pos-coord-word &
;  [ STEM < "både" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_set-asserted_rel" ].

;enten_corrcoord := correl-pos-coord-word &
;  [ STEM < "enten" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_set-asserted_rel" ].

;hverken_corrcoord := correl-neg-coord-word &
;  [ STEM < "hverken" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_set-denied_rel" ].

både_corrconnect := correl-pos-connect-word &
  [ STEM < "både" >,
    SYNSEM.LKEYS.KEYREL.PRED "_både-set-asserted_rel" ].

såvel_corrconnect := correl-pos-connect-word &
  [ STEM < "såvel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_både-set-asserted_rel" ].

enten_corrconnect := correl-pos-connect-word &
  [ STEM < "enten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_enten-set-asserted_rel" ].

henholdsvis_corrconnect := correl-pos-connect-word &
  [ STEM < "henholdsvis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_henholdsvis_rel" ].

hhv_corrconnect := correl-pos-connect-word &
  [ STEM < "hhv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_henholdsvis_rel" ].

hhv-finaldot_corrconnect := correl-pos-connect-word &
  [ STEM < "hhv", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "_henholdsvis_rel" ].

hhv-alldot_corrconnect := correl-pos-connect-word &
  [ STEM < "h", ".", "h", ".", "v", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "_henholdsvis_rel" ].

hverken_corrconnect := correl-neg-connect-word &
  [ STEM < "hverken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hverken-set-denied_rel" ].

verken_corrconnect := correl-neg-connect-word &
  [ STEM < "verken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hverken-set-denied_rel" ].



;; 'SPECIAL' COMMON NOUNS

mord_n_neut_lvc-nlxm := neut-lightverb-noun-lxm &
  [ INFLECTION infl_nshort,
    STEM < "mord" >,
    SYNSEM.LOCAL.CAT.QVAL.LVC-GVRNOR.LOCAL.CAT.HEAD.KEYS.KEY begå-vb,
    SYNSEM [ LKEYS.KEYREL.PRED "_mord_n_rel",
	     LOCAL.CAT.HEAD.KEYS.KEY fact,
	     LOCAL.CAT.VAL.GOVERNOR <[LOCAL.CAT.HEAD.KEYS.KEY begå-vb]>]].



sist_adv := adv-word-reg &
 [ STEM < "sist" >,
   SYNSEM.LKEYS.KEYREL.PRED "_sist_adv_rel" ].

etappevis_adv := adv-word-reg &
 [ STEM < "etappevis" >,
   SYNSEM.LKEYS.KEYREL.PRED "_etappevis_adv_rel" ].

stykkevis_adv := adv-word-reg &
 [ STEM < "stykkevis" >,
   SYNSEM.LKEYS.KEYREL.PRED "_stykkevis_adv_rel" ].

til_sammen_adv := adv-word-reg &
 [ STEM < "til", "sammen" >,
   SYNSEM.LKEYS.KEYREL.PRED "_til_sammen_adv_rel" ].




; PRONOUNS
jeg_perspron := 1st-sg-nom-pers-pron &
  [ STEM < "jeg" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].

meg_perspron := 1st-sg-acc-pers-pron &
  [ STEM < "meg" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].

vi_perspron := 1st-pl-nom-pers-pron &
  [ STEM < "vi" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].
oss_perspron := 1st-pl-acc-pers-pron &
  [ STEM < "oss" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].

du_perspron := 2nd-sg-nom-pers-pron &
  [ STEM < "du" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].
deg_perspron := 2nd-sg-acc-pers-pron &
  [ STEM < "deg" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].
dere_perspron := 2nd-pl-pers-pron &
  [ STEM < "dere" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing].

han_perspron := 3rd-sg-masc-nom-pers-pron &
  [ STEM < "han" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "han_pron_rel" ].
hun_perspron := 3rd-sg-fem-nom-pers-pron &
  [ STEM < "hun" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "hun_pron_rel" ].

; gives 12 extra parses for "Ola er den høyeste av guttene"... but we will
; need to split sup-adj-cum-part-lxm into two, for weak and strong adj-form,
; and then the determiner "den" will be required by the weak form "høyeste"
;LH160613 the card-to-n rules suffice
en_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "en" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "en_pron_rel" ].
noen_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "noen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "noen_pron_rel" ].
man_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "man" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "man_pron_rel" ].
den_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "den" >,
    SYNSEM.LKEYS.KEYREL.PRED "den_pron_rel" ].
det_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "det" >,
    SYNSEM.LKEYS.KEYREL.PRED "det_pron_rel" ].
noe_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "noe_pron_rel" ].
denne_perspron := 3rd-sg-neut-masc-or-fem-sg-pers-pron &
  [ STEM < "denne" >,
    SYNSEM.LKEYS.KEYREL.PRED "denne_pron_rel" ].
dette_perspron := 3rd-sg-neut-neutsg-pers-pron &
  [ STEM < "dette" >,
    SYNSEM.LKEYS.KEYREL.PRED "dette_pron_rel" ].
disse_perspron := 3rd-pl-pers-pron &
  [ STEM < "disse" >,
    SYNSEM.LKEYS.KEYREL.PRED "disse_pron_rel" ].
ham_perspron := 3rd-sg-masc-acc-pers-pron &
  [ STEM < "ham" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "ham_pron_rel" ].
han_perspron-acc := 3rd-sg-masc-acc-pers-pron &
  [ STEM < "han" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "ham_pron_rel" ].
henne_perspron := 3rd-sg-fem-acc-pers-pron &
  [ STEM < "henne" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.SORT anim-thing,
    SYNSEM.LKEYS.KEYREL.PRED "henne_pron_rel" ].
de_perspron := 3rd-pl-nom-pers-pron &
  [ STEM < "de" >,
    SYNSEM.LKEYS.KEYREL.PRED "de_pron_rel" ].
dem_perspron := 3rd-pl-acc-pers-pron &
  [ STEM < "dem" >,
    SYNSEM.LKEYS.KEYREL.PRED "dem_pron_rel" ].

meg_refl := 1st-sg-seg-pron &
  [ STEM < "meg" >].
oss_refl := 1st-pl-seg-pron &
  [ STEM < "oss" >].
deg_refl := 2nd-sg-seg-pron &
  [ STEM < "deg" >].
dere_refl := 2nd-pl-seg-pron &
  [ STEM < "dere" >].
seg_refl := 3rd-seg-pron &
  [ STEM < "seg" >].

; no more reciproc-pron
hverandre_recip := reciproc-pron &
  [ STEM < "hverandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "_reciproc_rel"].
hinannen_recip := reciproc-pron &
  [ STEM < "hinannen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_reciproc_rel"].



min_pre-poss := 1st-mascsg-poss-pron-pre &
  [ STEM < "min" >].

min_post-poss := 1st-mascsg-poss-pron-post &
  [ STEM < "min" >].

mi_pre-poss := 1st-sg-fem-poss-pron-pre &
  [ STEM < "mi" >].

mi_post-poss := 1st-sg-fem-poss-pron-post &
  [ STEM < "mi" >].

mitt_pre-poss := 1st-sg-neut-poss-pron-pre &
  [ STEM < "mitt" >].

mitt_post-poss := 1st-sg-neut-poss-pron-post &
  [ STEM < "mitt" >].

mine_pre-poss := 1st-sg-plur-poss-pron-pre &
  [ STEM < "mine" >].

mine_post-poss := 1st-sg-plur-poss-pron-post &
  [ STEM < "mine" >].

vår_pre-poss := 1st-pl-masc-or-fem-sg-poss-pron-pre &
  [ STEM < "vår" >].

vår_post-poss := 1st-pl-masc-or-fem-sg-poss-pron-post &
  [ STEM < "vår" >].

vårt_pre-poss := 1st-pl-neut-poss-pron-pre &
  [ STEM < "vårt" >].

vårt_post-poss := 1st-pl-neut-poss-pron-post &
  [ STEM < "vårt" >].

våre_pre-poss := 1st-pl-plur-poss-pron-pre &
  [ STEM < "våre" >].

våre_post-poss := 1st-pl-plur-poss-pron-post &
  [ STEM < "våre" >].

din_pre-poss := 2nd-mascsg-poss-pron-pre &
  [ STEM < "din" >].

din_post-poss := 2nd-mascsg-poss-pron-post &
  [ STEM < "din" >].

di_pre-poss := 2nd-sg-fem-poss-pron-pre &
  [ STEM < "di" >].

di_post-poss := 2nd-sg-fem-poss-pron-post &
  [ STEM < "di" >].

ditt_pre-poss := 2nd-sg-neut-poss-pron-pre &
  [ STEM < "ditt" >].

ditt_post-poss := 2nd-sg-neut-poss-pron-post &
  [ STEM < "ditt" >].

dine_pre-poss := 2nd-sg-plur-poss-pron-pre &
  [ STEM < "dine" >].

dine_post-poss := 2nd-sg-plur-poss-pron-post &
  [ STEM < "dine" >].

deres_2pl-pre-poss := 2nd-pl-poss-pron-pre &
  [ STEM < "deres" > ].

deres_2pl-post-poss := 2nd-pl-poss-pron-post &
  [ STEM < "deres" > ].

hans_pre-poss := 3rd-sg-masc-poss-pron-pre &
  [ STEM < "hans" > ].

hans_post-poss := 3rd-sg-masc-poss-pron-post &
  [ STEM < "hans" > ].

hennes_pre-poss := 3rd-sg-fem-poss-pron-pre &
  [ STEM < "hennes" > ].

hennes_post-poss := 3rd-sg-fem-poss-pron-post &
  [ STEM < "hennes" > ].

dens_pre-poss := 3rd-sg-neut-msc-poss-pron-pre &
  [ STEM < "dens" > ].

dens_post-poss := 3rd-sg-neut-msc-poss-pron-post &
  [ STEM < "dens" > ].

dets_pre-poss := 3rd-sg-neut-nt-poss-pron-pre &
  [ STEM < "dets" > ].

dets_post-poss := 3rd-sg-neut-nt-poss-pron-post &
  [ STEM < "dets" > ].

deres_3pl-pre-poss := 3rd-plural-poss-pron-pre &
  [ STEM < "deres" > ].

deres_3pl-post-poss := 3rd-plural-poss-pron-post &
  [ STEM < "deres" > ].

hvis_3-quest-poss := 3rd-quest-poss-word &
  [ STEM < "hvis" > ].

hvis_3-rel-poss := 3rd-rel-poss-word &
  [ STEM < "hvis" > ].

; Reflexive possessives
;;;;;; REFL: commented out until the reflexives machinery is in place,
;; with Principle B-effects for non-reflexive possessives
;; (for now they only give idle double parses
;; LH300316 commented in, in order to give correct generation in the mal-grammar)

min_refl-preposs := 1st-mascsg-poss-refl-pron-pre &
  [ STEM < "min" >].

min_refl-postposs := 1st-mascsg-poss-refl-pron-post &
  [ STEM < "min" >].

mi_refl-preposs := 1st-sg-fem-poss-refl-pron-pre &
  [ STEM < "mi" >].

mi_refl-postposs := 1st-sg-fem-poss-refl-pron-post &
  [ STEM < "mi" >].

mitt_refl-preposs := 1st-sg-neut-poss-refl-pron-pre &
  [ STEM < "mitt" >].

mitt_refl-postposs := 1st-sg-neut-poss-refl-pron-post &
  [ STEM < "mitt" >].

mine_refl-preposs := 1st-sg-plur-poss-refl-pron-pre &
  [ STEM < "mine" >].

mine_refl-postposs := 1st-sg-plur-poss-refl-pron-post &
  [ STEM < "mine" >].

vår_refl-preposs := 1st-pl-masc-or-fem-sg-poss-refl-pron-pre &
  [ STEM < "vår" >].

vår_refl-postposs := 1st-pl-masc-or-fem-sg-poss-refl-pron-post &
  [ STEM < "vår" >].

vårt_refl-preposs := 1st-pl-neut-poss-refl-pron-pre &
  [ STEM < "vårt" >].

vårt_refl-postposs := 1st-pl-neut-poss-refl-pron-post &
  [ STEM < "vårt" >].

våre_refl-preposs := 1st-pl-plur-poss-refl-pron-pre &
  [ STEM < "våre" >].

våre_refl-postposs := 1st-pl-plur-poss-refl-pron-post &
  [ STEM < "våre" >].

din_refl-preposs := 2nd-mascsg-poss-refl-pron-pre &
  [ STEM < "din" >].

din_refl-postposs := 2nd-mascsg-poss-refl-pron-post &
  [ STEM < "din" >].

di_refl-preposs := 2nd-sg-fem-poss-refl-pron-pre &
  [ STEM < "di" >].

di_refl-postposs := 2nd-sg-fem-poss-refl-pron-post &
  [ STEM < "di" >].

ditt_refl-preposs := 2nd-sg-neut-poss-refl-pron-pre &
  [ STEM < "ditt" >].

ditt_refl-postposs := 2nd-sg-neut-poss-refl-pron-post &
  [ STEM < "ditt" >].

dine_refl-preposs := 2nd-sg-plur-poss-refl-pron-pre &
  [ STEM < "dine" >].

dine_refl-postposs := 2nd-sg-plur-poss-refl-pron-post &
  [ STEM < "dine" >].

deres_refl-preposs := 2nd-pl-poss-refl-pron-pre &
  [ STEM < "deres" > ].

deres_refl-postposs := 2nd-pl-poss-refl-pron-post &
  [ STEM < "deres" > ].


sin_refl-preposs := 3rd-mascsg-poss-refl-pron-pre &
  [ STEM < "sin" >].

sin_refl-postposs := 3rd-mascsg-poss-refl-pron-post &
  [ STEM < "sin" >].

si_refl-preposs := 3rd-sg-fem-poss-refl-pron-pre &
  [ STEM < "si" >].

si_refl-postposs := 3rd-sg-fem-poss-refl-pron-post &
  [ STEM < "si" >].

sitt_refl-preposs := 3rd-sg-neut-poss-refl-pron-pre &
  [ STEM < "sitt" >].

sitt_refl-postposs := 3rd-sg-neut-poss-refl-pron-post &
  [ STEM < "sitt" >].

sine_refl-preposs := 3rd-plur-poss-refl-pron-pre &
  [ STEM < "sine" >].

sine_refl-postposs := 3rd-plur-poss-refl-pron-post &
  [ STEM < "sine" >].


sin_possparticle := poss-mascsg-particle-word &
  [ STEM < "sin" >].

si_possparticle := poss-femsg-particle-word &
  [ STEM < "si" >].
;
sitt_possparticle := poss-neutsg-particle-word &
  [ STEM < "sitt" >].

sine_possparticle := poss-plur-particle-word &
  [ STEM < "sine" >].

s_possparticle := poss-particle-word &
  [ STEM < "s" >].

; bad for the sparrer - but generation from 'gutten katt smiler' breaks down if we omit this item (with the message 'Non-structure argument NIL passed to ref of structuree slot 4' - whatever that may mean. LH280116
;How about
quote_possparticle := poss-particle-word &
  [ STEM < "'" >].
;Originally introduced by the above text, which gives reduplication in bon-gramm:
;quote_possparticle := poss-particle-word &
;  [ STEM < "s" >].

hvem_interrpron := interrog-pron-word &
  [ STEM < "hvem" >,
    SYNSEM.LOCAL.SUBJ-SOM -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG 3msg,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_which_person_q_rel"].

;back to som_subjgap. 01032019 commenting out cost 45 parses in massif.
hvem-som_interrpron := interrog-pron-word &
  [ STEM < "hvem", "som" >,
    SYNSEM.LOCAL.CAT.HEAD.ACCUSATIVE -,
    SYNSEM.LOCAL.CAT.HEAD.CAN-MAIN-CLAUSE -,
    SYNSEM.LOCAL.SUBJ-SOM +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG 3msg,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_which_person_q_rel"].

hva_interrpron := interrog-pron-word &
  [ STEM < "hva" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG 3nsg,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hva_q_rel"].

;back to som_subjgap.  01032019 that cost  parses in massif.
hva-som_interrpron := interrog-pron-word &
  [ STEM < "hva", "som" >,
    SYNSEM.LOCAL.CAT.HEAD.ACCUSATIVE -,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG 3nsg,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hva_q_rel"].

#|
; "hvor kommer du fra", "hvor er dette?"
hvor_interrpron := interrog-adv-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hvor_q_rel"].

; "når kommer du", "når er dette?"
når_interrpron := interrog-adv-word &
  [ STEM < "når" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_når_q_rel"].

hvordan_interrpron := interrog-adv-word &
  [ STEM < "hvordan" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hvordan_q_rel"].

hvorfor_interrpron := interrog-adv-word &
  [ STEM < "hvorfor" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hvorfor_q_rel"].
|#

;,
;    SYNSEM.LKEYS.KEYREL.PRED "explet_pron_rel"
det_expl := explet-pron-word &
  [ STEM < "det" > ].


; DETERMINERS & DEMONSTRATIVES
; correct items, but dem-word includes them in gross distrib, so by commenting away we halfen parse-amount
;den_def-art := det-fam-masc-or-fem-sg-word &
;  [ STEM < "den" >].

;Engl:
the_def-art := dem-word & 
  [ STEM < "the" >].
;det-fam-masc-or-fem-sg-word &
;-masc-or-fem-sg

;det_def-art := det-fam-neutsg-word &
;  [ STEM < "det" >].

;de_def-art := det-fam-pl-word &
;  [ STEM < "de" >].


den_dem := dem-masc-or-fem-sg-word &
  [ STEM < "den" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM -,
    SYNSEM.LKEYS.KEYREL.PRED "_deict_rel"].

; gives funny generations
hin_dem := dem-masc-or-fem-sg-word &
  [ STEM < "hin" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM -,
    SYNSEM.LKEYS.KEYREL.PRED "_hin-pron_rel"].

det_dem := dem-neutsg-word &
  [ STEM < "det" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM -,
    SYNSEM.LKEYS.KEYREL.PRED "_deict_rel"].

dét_dem := dem-neutsg-word &
  [ STEM < "dét" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM -,
    SYNSEM.LKEYS.KEYREL.PRED "_deict_rel"].

de_dem := dem-pl-word &
  [ STEM < "de" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM -,
    SYNSEM.LKEYS.KEYREL.PRED "_deict_rel"].

; correct, but parse-costly
;den_def-q := def-q-masc-or-fem-sg-word &
;  [ STEM < "den" >].

;det_def-q := def-q-neutsg-word &
;  [ STEM < "det" >].

;de_def-q := def-q-pl-word &
;  [ STEM < "de" >].


denne_dem := dem-masc-or-fem-sg-word &
  [ STEM < "denne" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM +,
    SYNSEM.LKEYS.KEYREL.PRED "_proxim_deict_rel"].

dette_dem := dem-neutsg-word &
  [ STEM < "dette" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM +,
    SYNSEM.LKEYS.KEYREL.PRED "_proxim_deict_rel"].

disse_dem := dem-pl-word &
  [ STEM < "disse" >,
    SYNSEM.LOCAL.CAT.HEAD.PROXIM +,
    SYNSEM.LKEYS.KEYREL.PRED "_proxim_deict_rel"].

;trying this commented out, and leaving all cases for the cardinal "en"
en_indef-art := art-mascsg-word &
  [ STEM < "en" > ].

et_indef-art := art-neutsg-word &
  [ STEM < "et" > ].

ei_indef-art := art-femsg-word &
  [ STEM < "ei" > ].

; CARDINALS

ersatz_card := plur-cardinal-word &
  [ STEM < "OneDigitErsatz" >].

2ersatz_card := plur-cardinal-word &
  [ STEM < "TwoDigitErsatz" >].

3ersatz_card := plur-cardinal-word &
  [ STEM < "ThreeDigitErsatz" >].

4ersatz_card := plur-cardinal-word &
  [ STEM < "FourDigitErsatz" >].

5ersatz_card := plur-cardinal-word &
  [ STEM < "FiveDigitErsatz" >].

;; since en_card and en_indef-art seem to overlap nearly completely, great gain in parse reduction is gotten by commenting out. én would still be card
;en_card := sg-cardinal-word &
;  [ STEM < "en" >,
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
;    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].


generic_card_ne := plur-cardinal-word &
  [ STEM < "_generic_card_ne_" >,
    TOKENS.+LIST < [ +CLASS card_ne ] > ].

;generic_year_ne := measure-specifictime-noun-lxm &
;  [ ORTH < "_generic_year_ne_" >,
;    TOKENS.+LIST < [ +CLASS year_ne ] > ].

; needed alongside article for 'Frode Rinnans vei en", and 'en uke senere mjauet katten'
;en_card := sg-strong-cardinal-word &
;  [ STEM < "en" >,
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
;    SYNSEM.LOCAL.CARD-TO-BARE-N -,
;    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

én_card := sg-strong-cardinal-word &
  [ STEM < "én" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

; needed alongside article for 'in uke senere mjauet katten'
;ei_card := sg-strong-cardinal-word &
;  [ STEM < "ei" >,
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg,
;    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

ett_card := sg-strong-cardinal-word &
  [ STEM < "ett" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

null_card := plur-cardinal-word &
  [ STEM < "null" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

null_card_dig := plur-cardinal-word &
  [ STEM < "0" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

zero_card := plur-cardinal-word &
  [ STEM < "zero" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

zero_card_dig := plur-cardinal-word &
  [ STEM < "0" >,
    SYNSEM.LKEYS.KEYREL.CARG "0-rel"].

halvannen_card := sg-strong-cardinal-word &
  [ STEM < "halvannen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-comma-5-rel"].

halvannet_card := sg-strong-cardinal-word &
  [ STEM < "halvannet" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-comma-5-rel"].

halvanna_card := sg-strong-cardinal-word &
  [ STEM < "halvanna" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg,
    SYNSEM.LOCAL.CARD-TO-BARE-N -,
    SYNSEM.LKEYS.KEYREL.CARG "1-comma-5-rel"].

to_card := plur-cardinal-word &
  [ STEM < "to" >,
    SYNSEM.LKEYS.KEYREL.CARG "2-rel"].

tre_card := plur-cardinal-word &
  [ STEM < "tre" >,
    SYNSEM.LKEYS.KEYREL.CARG "3-rel"].

fire_card := plur-cardinal-word &
  [ STEM < "fire" >,
    SYNSEM.LKEYS.KEYREL.CARG "4-rel"].

fem_card := plur-cardinal-word &
  [ STEM < "fem" >,
    SYNSEM.LKEYS.KEYREL.CARG "5-rel"].

seks_card := plur-cardinal-word &
  [ STEM < "seks" >,
    SYNSEM.LKEYS.KEYREL.CARG "6-rel"].

syv_card := plur-cardinal-word &
  [ STEM < "syv" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

sju_card := plur-cardinal-word &
  [ STEM < "sju" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

åtte_card := plur-cardinal-word &
  [ STEM < "åtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "8-rel"].

ni_card := plur-cardinal-word &
  [ STEM < "ni" >,
    SYNSEM.LKEYS.KEYREL.CARG "9-rel"].

ti_card := plur-cardinal-word &
  [ STEM < "ti" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-rel"].

elleve_card := plur-cardinal-word &
  [ STEM < "elleve" >,
    SYNSEM.LKEYS.KEYREL.CARG "11-rel"].

tolv_card := plur-cardinal-word &
  [ STEM < "tolv" >,
    SYNSEM.LKEYS.KEYREL.CARG "12-rel"].

tretten_card := plur-cardinal-word &
  [ STEM < "tretten" >,
    SYNSEM.LKEYS.KEYREL.CARG "13-rel"].

fjorten_card := plur-cardinal-word &
  [ STEM < "fjorten" >,
    SYNSEM.LKEYS.KEYREL.CARG "14-rel"].

femten_card := plur-cardinal-word &
  [ STEM < "femten" >,
    SYNSEM.LKEYS.KEYREL.CARG "15-rel"].

; for 'NoW'
ti-femten_card := plur-cardinal-word &
  [ STEM < "ti-femten" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-15-rel"].

seksten_card := plur-cardinal-word &
  [ STEM < "seksten" >,
    SYNSEM.LKEYS.KEYREL.CARG "16-rel"].

sytten_card := plur-cardinal-word &
  [ STEM < "sytten" >,
    SYNSEM.LKEYS.KEYREL.CARG "17-rel"].

atten_card := plur-cardinal-word &
  [ STEM < "atten" >,
    SYNSEM.LKEYS.KEYREL.CARG "18-rel"].

nitten_card := plur-cardinal-word &
  [ STEM < "nitten" >,
    SYNSEM.LKEYS.KEYREL.CARG "19-rel"].

tyve_card := plur-cardinal-word &
  [ STEM < "tyve" >,
    SYNSEM.LKEYS.KEYREL.CARG "20-rel"].

tjue_card := plur-cardinal-word &
  [ STEM < "tjue" >,
    SYNSEM.LKEYS.KEYREL.CARG "20-rel"].

tjueen_card := plur-cardinal-word &
  [ STEM < "tjueen" >,
    SYNSEM.LKEYS.KEYREL.CARG "21-rel"].

tjueett_card := plur-cardinal-word &
  [ STEM < "tjueett" >,
    SYNSEM.LKEYS.KEYREL.CARG "21-rel"].

tjueto_card := plur-cardinal-word &
  [ STEM < "tjueto" >,
    SYNSEM.LKEYS.KEYREL.CARG "22-rel"].

tjuetre_card := plur-cardinal-word &
  [ STEM < "tjuetre" >,
    SYNSEM.LKEYS.KEYREL.CARG "23-rel"].

tjuefire_card := plur-cardinal-word &
  [ STEM < "tjuefire" >,
    SYNSEM.LKEYS.KEYREL.CARG "24-rel"].

tjuefem_card := plur-cardinal-word &
  [ STEM < "tjuefem" >,
    SYNSEM.LKEYS.KEYREL.CARG "25-rel"].

tjueseks_card := plur-cardinal-word &
  [ STEM < "tjueseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "26-rel"].

tjuesju_card := plur-cardinal-word &
  [ STEM < "tjuesju" >,
    SYNSEM.LKEYS.KEYREL.CARG "27-rel"].

tjuesyv_card := plur-cardinal-word &
  [ STEM < "tjuesyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "27-rel"].

tjueåtte_card := plur-cardinal-word &
  [ STEM < "tjueåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "28-rel"].

tjueni_card := plur-cardinal-word &
  [ STEM < "tjueni" >,
    SYNSEM.LKEYS.KEYREL.CARG "29-rel"].

tretti_card := plur-cardinal-word &
  [ STEM < "tretti" >,
    SYNSEM.LKEYS.KEYREL.CARG "30-rel"].

trettien_card := plur-cardinal-word &
  [ STEM < "trettien" >,
    SYNSEM.LKEYS.KEYREL.CARG "31-rel"].

trettito_card := plur-cardinal-word &
  [ STEM < "trettito" >,
    SYNSEM.LKEYS.KEYREL.CARG "32-rel"].

trettitre_card := plur-cardinal-word &
  [ STEM < "trettitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "33-rel"].

trettifire_card := plur-cardinal-word &
  [ STEM < "trettifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "34-rel"].

trettifem_card := plur-cardinal-word &
  [ STEM < "trettifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "35-rel"].

trettiseks_card := plur-cardinal-word &
  [ STEM < "trettiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "36-rel"].

trettisju_card := plur-cardinal-word &
  [ STEM < "trettisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "37-rel"].

trettisyv_card := plur-cardinal-word &
  [ STEM < "trettisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "37-rel"].

trettiåtte_card := plur-cardinal-word &
  [ STEM < "trettiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "38-rel"].

trettini_card := plur-cardinal-word &
  [ STEM < "trettini" >,
    SYNSEM.LKEYS.KEYREL.CARG "39-rel"].


førti_card := plur-cardinal-word &
  [ STEM < "førti" >,
    SYNSEM.LKEYS.KEYREL.CARG "40-rel"].

førtien_card := plur-cardinal-word &
  [ STEM < "førtien" >,
    SYNSEM.LKEYS.KEYREL.CARG "41-rel"].

førtito_card := plur-cardinal-word &
  [ STEM < "førtito" >,
    SYNSEM.LKEYS.KEYREL.CARG "42-rel"].

førtitre_card := plur-cardinal-word &
  [ STEM < "førtitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "43-rel"].

førtifire_card := plur-cardinal-word &
  [ STEM < "førtifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "44-rel"].

førtifem_card := plur-cardinal-word &
  [ STEM < "førtifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "45-rel"].

førtiseks_card := plur-cardinal-word &
  [ STEM < "førtiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "46-rel"].

førtisju_card := plur-cardinal-word &
  [ STEM < "førtisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "47-rel"].

førtisyv_card := plur-cardinal-word &
  [ STEM < "førtisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "47-rel"].

førtiåtte_card := plur-cardinal-word &
  [ STEM < "førtiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "48-rel"].

førtini_card := plur-cardinal-word &
  [ STEM < "førtini" >,
    SYNSEM.LKEYS.KEYREL.CARG "49-rel"].

femti_card := plur-cardinal-word &
  [ STEM < "femti" >,
    SYNSEM.LKEYS.KEYREL.CARG "50-rel"].

halvhundre_card := plur-cardinal-word &
  [ STEM < "halvhundre" >,
    SYNSEM.LKEYS.KEYREL.CARG "50-rel"].

femtien_card := plur-cardinal-word &
  [ STEM < "femtien" >,
    SYNSEM.LKEYS.KEYREL.CARG "51-rel"].

femtito_card := plur-cardinal-word &
  [ STEM < "femtito" >,
    SYNSEM.LKEYS.KEYREL.CARG "52-rel"].

femtitre_card := plur-cardinal-word &
  [ STEM < "femtitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "53-rel"].

femtifire_card := plur-cardinal-word &
  [ STEM < "femtifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "54-rel"].

femtifem_card := plur-cardinal-word &
  [ STEM < "femtifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "55-rel"].

femtiseks_card := plur-cardinal-word &
  [ STEM < "femtiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "56-rel"].

femtisju_card := plur-cardinal-word &
  [ STEM < "femtisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "57-rel"].

femtiåtte_card := plur-cardinal-word &
  [ STEM < "femtiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "58-rel"].

femtini_card := plur-cardinal-word &
  [ STEM < "femtini" >,
    SYNSEM.LKEYS.KEYREL.CARG "59-rel"].

seksti_card := plur-cardinal-word &
  [ STEM < "seksti" >,
    SYNSEM.LKEYS.KEYREL.CARG "60-rel"].

sekstien_card := plur-cardinal-word &
  [ STEM < "sekstien" >,
    SYNSEM.LKEYS.KEYREL.CARG "61-rel"].

sekstito_card := plur-cardinal-word &
  [ STEM < "sekstito" >,
    SYNSEM.LKEYS.KEYREL.CARG "62-rel"].

sekstitre_card := plur-cardinal-word &
  [ STEM < "sekstitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "63-rel"].

sekstifire_card := plur-cardinal-word &
  [ STEM < "sekstifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "64-rel"].

sekstifem_card := plur-cardinal-word &
  [ STEM < "sekstifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "65-rel"].

sekstiseks_card := plur-cardinal-word &
  [ STEM < "sekstiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "66-rel"].

sekstisju_card := plur-cardinal-word &
  [ STEM < "sekstisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "67-rel"].

sekstisyv_card := plur-cardinal-word &
  [ STEM < "sekstisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "67-rel"].

sekstiåtte_card := plur-cardinal-word &
  [ STEM < "sekstiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "68-rel"].

sekstini_card := plur-cardinal-word &
  [ STEM < "sekstini" >,
    SYNSEM.LKEYS.KEYREL.CARG "69-rel"].


sytti_card := plur-cardinal-word &
  [ STEM < "sytti" >,
    SYNSEM.LKEYS.KEYREL.CARG "70-rel"].


syttien_card := plur-cardinal-word &
  [ STEM < "syttien" >,
    SYNSEM.LKEYS.KEYREL.CARG "71-rel"].

syttito_card := plur-cardinal-word &
  [ STEM < "syttito" >,
    SYNSEM.LKEYS.KEYREL.CARG "72-rel"].

syttitre_card := plur-cardinal-word &
  [ STEM < "syttitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "73-rel"].

syttifire_card := plur-cardinal-word &
  [ STEM < "syttifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "74-rel"].

syttifem_card := plur-cardinal-word &
  [ STEM < "syttifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "75-rel"].

syttiseks_card := plur-cardinal-word &
  [ STEM < "syttiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "76-rel"].

syttisju_card := plur-cardinal-word &
  [ STEM < "syttisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "77-rel"].

syttisyv_card := plur-cardinal-word &
  [ STEM < "syttisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "77-rel"].

syttiåtte_card := plur-cardinal-word &
  [ STEM < "syttiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "78-rel"].

syttini_card := plur-cardinal-word &
  [ STEM < "syttini" >,
    SYNSEM.LKEYS.KEYREL.CARG "79-rel"].


åtti_card := plur-cardinal-word &
  [ STEM < "åtti" >,
    SYNSEM.LKEYS.KEYREL.CARG "80-rel"].

åttien_card := plur-cardinal-word &
  [ STEM < "åttien" >,
    SYNSEM.LKEYS.KEYREL.CARG "81-rel"].

åttito_card := plur-cardinal-word &
  [ STEM < "åttito" >,
    SYNSEM.LKEYS.KEYREL.CARG "82-rel"].

åttitre_card := plur-cardinal-word &
  [ STEM < "åttitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "83-rel"].

åttifire_card := plur-cardinal-word &
  [ STEM < "åttifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "84-rel"].

åttifem_card := plur-cardinal-word &
  [ STEM < "åttifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "85-rel"].

åttiseks_card := plur-cardinal-word &
  [ STEM < "åttiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "86-rel"].

åttisju_card := plur-cardinal-word &
  [ STEM < "åttisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "87-rel"].

åttisyv_card := plur-cardinal-word &
  [ STEM < "åttisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "87-rel"].

åttiåtte_card := plur-cardinal-word &
  [ STEM < "åttiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "88-rel"].

åttini_card := plur-cardinal-word &
  [ STEM < "åttini" >,
    SYNSEM.LKEYS.KEYREL.CARG "89-rel"].

nitti_card := plur-cardinal-word &
  [ STEM < "nitti" >,
    SYNSEM.LKEYS.KEYREL.CARG "90-rel"].

nittien_card := plur-cardinal-word &
  [ STEM < "nittien" >,
    SYNSEM.LKEYS.KEYREL.CARG "91-rel"].

nittito_card := plur-cardinal-word &
  [ STEM < "nittito" >,
    SYNSEM.LKEYS.KEYREL.CARG "92-rel"].

nittitre_card := plur-cardinal-word &
  [ STEM < "nittitre" >,
    SYNSEM.LKEYS.KEYREL.CARG "93-rel"].

nittifire_card := plur-cardinal-word &
  [ STEM < "nittifire" >,
    SYNSEM.LKEYS.KEYREL.CARG "94-rel"].

nittifem_card := plur-cardinal-word &
  [ STEM < "nittifem" >,
    SYNSEM.LKEYS.KEYREL.CARG "95-rel"].

nittiseks_card := plur-cardinal-word &
  [ STEM < "nittiseks" >,
    SYNSEM.LKEYS.KEYREL.CARG "96-rel"].

nittisju_card := plur-cardinal-word &
  [ STEM < "nittisju" >,
    SYNSEM.LKEYS.KEYREL.CARG "97-rel"].

nittisyv_card := plur-cardinal-word &
  [ STEM < "nittisyv" >,
    SYNSEM.LKEYS.KEYREL.CARG "97-rel"].

nittiåtte_card := plur-cardinal-word &
  [ STEM < "nittiåtte" >,
    SYNSEM.LKEYS.KEYREL.CARG "98-rel"].

nittini_card := plur-cardinal-word &
  [ STEM < "nittini" >,
    SYNSEM.LKEYS.KEYREL.CARG "99-rel"].


hundre_card := plur-cardinal-word &
  [ STEM < "hundre" >,
    SYNSEM.LKEYS.KEYREL.CARG "100-rel"].

tusen_card := plur-cardinal-word &
  [ STEM < "tusen" >,
    SYNSEM.LKEYS.KEYREL.CARG "1000-rel"].

tusen_card-dig := plur-cardinal-word &
  [ STEM < "1000" >,
    SYNSEM.LKEYS.KEYREL.CARG "1000-rel"].

tusen-og-tredve_card-dig := plur-cardinal-word &
  [ STEM < "1030" >,
    SYNSEM.LKEYS.KEYREL.CARG "1030-rel"].


;number-ersatz := n_proper_le &
; [ STEM < "numberersatz" > ].

#|
number-ersatz := proper-name-word &
 [ STEM < "numberersatz" > ].
numvalcard1digit := plur-cardinal-word &
 [ STEM < "onedigitersatz" > ].
numvalcard2digit := plur-cardinal-word &
 [ STEM < "twodigitersatz" > ].
numvalcard3digit := plur-cardinal-word &
 [ STEM < "ThreeDigitErsatz" > ].
|#

en_card-dig := plur-cardinal-word &
  [ STEM < "1" >,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].

to_card-dig := plur-cardinal-word &
  [ STEM < "2" >,
    SYNSEM.LKEYS.KEYREL.CARG "2-rel"].

tre_card-dig := plur-cardinal-word &
  [ STEM < "3" >,
    SYNSEM.LKEYS.KEYREL.CARG "3-rel"].

fire_card-dig := plur-cardinal-word &
  [ STEM < "4" >,
    SYNSEM.LKEYS.KEYREL.CARG "4-rel"].

fem_card-dig := plur-cardinal-word &
  [ STEM < "5" >,
    SYNSEM.LKEYS.KEYREL.CARG "5-rel"].

seks_card-dig := plur-cardinal-word &
  [ STEM < "6" >,
    SYNSEM.LKEYS.KEYREL.CARG "6-rel"].

sju_card-dig := plur-cardinal-word &
  [ STEM < "7" >,
    SYNSEM.LKEYS.KEYREL.CARG "7-rel"].

åtte_card-dig := plur-cardinal-word &
  [ STEM < "8" >,
    SYNSEM.LKEYS.KEYREL.CARG "8-rel"].

ni_card-dig := plur-cardinal-word &
  [ STEM < "9" >,
    SYNSEM.LKEYS.KEYREL.CARG "9-rel"].

;ti_card-dig := plur-cardinal-word &
;  [ STEM < "10" >,
;    SYNSEM.LKEYS.KEYREL.CARG "10-rel"].

ti_card-dig := plur-cardinal-word &
  [ STEM < "10" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-rel"].

elleve_card-dig := plur-cardinal-word &
  [ STEM < "11" >,
    SYNSEM.LKEYS.KEYREL.CARG "11-rel"].

tolv_card-dig := plur-cardinal-word &
  [ STEM < "12" >,
    SYNSEM.LKEYS.KEYREL.CARG "12-rel"].

tretten_card-dig := plur-cardinal-word &
  [ STEM < "13" >,
    SYNSEM.LKEYS.KEYREL.CARG "13-rel"].

fjorten_card-dig := plur-cardinal-word &
  [ STEM < "14" >,
    SYNSEM.LKEYS.KEYREL.CARG "14-rel"].

femten_card-dig := plur-cardinal-word &
  [ STEM < "15" >,
    SYNSEM.LKEYS.KEYREL.CARG "15-rel"].

; for 'NoW'
ti-femten_card-dig := plur-cardinal-word &
  [ STEM < "10-15" >,
    SYNSEM.LKEYS.KEYREL.CARG "10-15-rel"].

seksten_card-dig := plur-cardinal-word &
  [ STEM < "16" >,
    SYNSEM.LKEYS.KEYREL.CARG "16-rel"].

sytten_card-dig := plur-cardinal-word &
  [ STEM < "17" >,
    SYNSEM.LKEYS.KEYREL.CARG "17-rel"].

atten_card-dig := plur-cardinal-word &
  [ STEM < "18" >,
    SYNSEM.LKEYS.KEYREL.CARG "18-rel"].

nitten_card-dig := plur-cardinal-word &
  [ STEM < "19" >,
    SYNSEM.LKEYS.KEYREL.CARG "19-rel"].

tyve_card-dig := plur-cardinal-word &
  [ STEM < "20" >,
    SYNSEM.LKEYS.KEYREL.CARG "20-rel"].

tjueen_card-dig := plur-cardinal-word &
  [ STEM < "21" >,
    SYNSEM.LKEYS.KEYREL.CARG "21-rel"].

tjueto_card-dig := plur-cardinal-word &
  [ STEM < "22" >,
    SYNSEM.LKEYS.KEYREL.CARG "22-rel"].

tjuetre_card-dig := plur-cardinal-word &
  [ STEM < "23" >,
    SYNSEM.LKEYS.KEYREL.CARG "23-rel"].

tjuefire_card-dig := plur-cardinal-word &
  [ STEM < "24" >,
    SYNSEM.LKEYS.KEYREL.CARG "24-rel"].

tjuefem_card-dig := plur-cardinal-word &
  [ STEM < "25" >,
    SYNSEM.LKEYS.KEYREL.CARG "25-rel"].

tjueseks_card-dig := plur-cardinal-word &
  [ STEM < "26" >,
    SYNSEM.LKEYS.KEYREL.CARG "26-rel"].

tjuesju_card-dig := plur-cardinal-word &
  [ STEM < "27" >,
    SYNSEM.LKEYS.KEYREL.CARG "27-rel"].

tjueåtte_card-dig := plur-cardinal-word &
  [ STEM < "28" >,
    SYNSEM.LKEYS.KEYREL.CARG "28-rel"].

tjueni_card-dig := plur-cardinal-word &
  [ STEM < "29" >,
    SYNSEM.LKEYS.KEYREL.CARG "29-rel"].

tretti_card-dig := plur-cardinal-word &
  [ STEM < "30" >,
    SYNSEM.LKEYS.KEYREL.CARG "30-rel"].

trettien_card-dig := plur-cardinal-word &
  [ STEM < "31" >,
    SYNSEM.LKEYS.KEYREL.CARG "31-rel"].

trettito_card-dig := plur-cardinal-word &
  [ STEM < "32" >,
    SYNSEM.LKEYS.KEYREL.CARG "32-rel"].

trettitre_card-dig := plur-cardinal-word &
  [ STEM < "33" >,
    SYNSEM.LKEYS.KEYREL.CARG "33-rel"].

trettifire_card-dig := plur-cardinal-word &
  [ STEM < "34" >,
    SYNSEM.LKEYS.KEYREL.CARG "34-rel"].

trettifem_card-dig := plur-cardinal-word &
  [ STEM < "35" >,
    SYNSEM.LKEYS.KEYREL.CARG "35-rel"].

trettiseks_card-dig := plur-cardinal-word &
  [ STEM < "36" >,
    SYNSEM.LKEYS.KEYREL.CARG "36-rel"].

trettisju_card-dig := plur-cardinal-word &
  [ STEM < "37" >,
    SYNSEM.LKEYS.KEYREL.CARG "37-rel"].

trettiåtte_card-dig := plur-cardinal-word &
  [ STEM < "38" >,
    SYNSEM.LKEYS.KEYREL.CARG "38-rel"].

trettini_card-dig := plur-cardinal-word &
  [ STEM < "39" >,
    SYNSEM.LKEYS.KEYREL.CARG "39-rel"].


førti_card-dig := plur-cardinal-word &
  [ STEM < "40" >,
    SYNSEM.LKEYS.KEYREL.CARG "40-rel"].

førtien_card-dig := plur-cardinal-word &
  [ STEM < "41" >,
    SYNSEM.LKEYS.KEYREL.CARG "41-rel"].

førtito_card-dig := plur-cardinal-word &
  [ STEM < "42" >,
    SYNSEM.LKEYS.KEYREL.CARG "42-rel"].

førtitre_card-dig := plur-cardinal-word &
  [ STEM < "43" >,
    SYNSEM.LKEYS.KEYREL.CARG "43-rel"].

førtifire_card-dig := plur-cardinal-word &
  [ STEM < "44" >,
    SYNSEM.LKEYS.KEYREL.CARG "44-rel"].

førtifem_card-dig := plur-cardinal-word &
  [ STEM < "45" >,
    SYNSEM.LKEYS.KEYREL.CARG "45-rel"].

førtiseks_card-dig := plur-cardinal-word &
  [ STEM < "46" >,
    SYNSEM.LKEYS.KEYREL.CARG "46-rel"].

førtisju_card-dig := plur-cardinal-word &
  [ STEM < "47" >,
    SYNSEM.LKEYS.KEYREL.CARG "47-rel"].

førtiåtte_card-dig := plur-cardinal-word &
  [ STEM < "48" >,
    SYNSEM.LKEYS.KEYREL.CARG "48-rel"].

førtini_card-dig := plur-cardinal-word &
  [ STEM < "49" >,
    SYNSEM.LKEYS.KEYREL.CARG "49-rel"].

femti_card-dig := plur-cardinal-word &
  [ STEM < "50" >,
    SYNSEM.LKEYS.KEYREL.CARG "50-rel"].

femtien_card-dig := plur-cardinal-word &
  [ STEM < "51" >,
    SYNSEM.LKEYS.KEYREL.CARG "51-rel"].

femtito_card-dig := plur-cardinal-word &
  [ STEM < "52" >,
    SYNSEM.LKEYS.KEYREL.CARG "52-rel"].

femtitre_card-dig := plur-cardinal-word &
  [ STEM < "53" >,
    SYNSEM.LKEYS.KEYREL.CARG "53-rel"].

femtifire_card-dig := plur-cardinal-word &
  [ STEM < "54" >,
    SYNSEM.LKEYS.KEYREL.CARG "54-rel"].

femtifem_card-dig := plur-cardinal-word &
  [ STEM < "55" >,
    SYNSEM.LKEYS.KEYREL.CARG "55-rel"].

femtiseks_card-dig := plur-cardinal-word &
  [ STEM < "56" >,
    SYNSEM.LKEYS.KEYREL.CARG "56-rel"].

femtisju_card-dig := plur-cardinal-word &
  [ STEM < "57" >,
    SYNSEM.LKEYS.KEYREL.CARG "57-rel"].

femtiåtte_card-dig := plur-cardinal-word &
  [ STEM < "58" >,
    SYNSEM.LKEYS.KEYREL.CARG "58-rel"].

femtini_card-dig := plur-cardinal-word &
  [ STEM < "59" >,
    SYNSEM.LKEYS.KEYREL.CARG "59-rel"].

seksti_card-dig := plur-cardinal-word &
  [ STEM < "60" >,
    SYNSEM.LKEYS.KEYREL.CARG "60-rel"].

sekstien_card-dig := plur-cardinal-word &
  [ STEM < "61" >,
    SYNSEM.LKEYS.KEYREL.CARG "61-rel"].

sekstito_card-dig := plur-cardinal-word &
  [ STEM < "62" >,
    SYNSEM.LKEYS.KEYREL.CARG "62-rel"].

sekstitre_card-dig := plur-cardinal-word &
  [ STEM < "63" >,
    SYNSEM.LKEYS.KEYREL.CARG "63-rel"].

sekstifire_card-dig := plur-cardinal-word &
  [ STEM < "64" >,
    SYNSEM.LKEYS.KEYREL.CARG "64-rel"].

sekstifem_card-dig := plur-cardinal-word &
  [ STEM < "65" >,
    SYNSEM.LKEYS.KEYREL.CARG "65-rel"].

sekstiseks_card-dig := plur-cardinal-word &
  [ STEM < "66" >,
    SYNSEM.LKEYS.KEYREL.CARG "66-rel"].

sekstisju_card-dig := plur-cardinal-word &
  [ STEM < "67" >,
    SYNSEM.LKEYS.KEYREL.CARG "67-rel"].

sekstiåtte_card-dig := plur-cardinal-word &
  [ STEM < "68" >,
    SYNSEM.LKEYS.KEYREL.CARG "68-rel"].

sekstini_card-dig := plur-cardinal-word &
  [ STEM < "69" >,
    SYNSEM.LKEYS.KEYREL.CARG "69-rel"].


sytti_card-dig := plur-cardinal-word &
  [ STEM < "70" >,
    SYNSEM.LKEYS.KEYREL.CARG "70-rel"].


syttien_card-dig := plur-cardinal-word &
  [ STEM < "71" >,
    SYNSEM.LKEYS.KEYREL.CARG "71-rel"].

syttito_card-dig := plur-cardinal-word &
  [ STEM < "72" >,
    SYNSEM.LKEYS.KEYREL.CARG "72-rel"].

syttitre_card-dig := plur-cardinal-word &
  [ STEM < "73" >,
    SYNSEM.LKEYS.KEYREL.CARG "73-rel"].

syttifire_card-dig := plur-cardinal-word &
  [ STEM < "74" >,
    SYNSEM.LKEYS.KEYREL.CARG "74-rel"].

syttifem_card-dig := plur-cardinal-word &
  [ STEM < "75" >,
    SYNSEM.LKEYS.KEYREL.CARG "75-rel"].

syttiseks_card-dig := plur-cardinal-word &
  [ STEM < "76" >,
    SYNSEM.LKEYS.KEYREL.CARG "76-rel"].

syttisju_card-dig := plur-cardinal-word &
  [ STEM < "77" >,
    SYNSEM.LKEYS.KEYREL.CARG "77-rel"].

syttiåtte_card-dig := plur-cardinal-word &
  [ STEM < "78" >,
    SYNSEM.LKEYS.KEYREL.CARG "78-rel"].

syttini_card-dig := plur-cardinal-word &
  [ STEM < "79" >,
    SYNSEM.LKEYS.KEYREL.CARG "79-rel"].


åtti_card-dig := plur-cardinal-word &
  [ STEM < "80" >,
    SYNSEM.LKEYS.KEYREL.CARG "80-rel"].

åttien_card-dig := plur-cardinal-word &
  [ STEM < "81" >,
    SYNSEM.LKEYS.KEYREL.CARG "81-rel"].

åttito_card-dig := plur-cardinal-word &
  [ STEM < "82" >,
    SYNSEM.LKEYS.KEYREL.CARG "82-rel"].

åttitre_card-dig := plur-cardinal-word &
  [ STEM < "83" >,
    SYNSEM.LKEYS.KEYREL.CARG "83-rel"].

åttifire_card-dig := plur-cardinal-word &
  [ STEM < "84" >,
    SYNSEM.LKEYS.KEYREL.CARG "84-rel"].

åttifem_card-dig := plur-cardinal-word &
  [ STEM < "85" >,
    SYNSEM.LKEYS.KEYREL.CARG "85-rel"].

åttiseks_card-dig := plur-cardinal-word &
  [ STEM < "86" >,
    SYNSEM.LKEYS.KEYREL.CARG "86-rel"].

åttisju_card-dig := plur-cardinal-word &
  [ STEM < "87" >,
    SYNSEM.LKEYS.KEYREL.CARG "87-rel"].

åttiåtte_card-dig := plur-cardinal-word &
  [ STEM < "88" >,
    SYNSEM.LKEYS.KEYREL.CARG "88-rel"].

åttini_card-dig := plur-cardinal-word &
  [ STEM < "89" >,
    SYNSEM.LKEYS.KEYREL.CARG "89-rel"].

nitti_card-dig := plur-cardinal-word &
  [ STEM < "90" >,
    SYNSEM.LKEYS.KEYREL.CARG "90-rel"].

nittien_card-dig := plur-cardinal-word &
  [ STEM < "91" >,
    SYNSEM.LKEYS.KEYREL.CARG "91-rel"].

nittito_card-dig := plur-cardinal-word &
  [ STEM < "92" >,
    SYNSEM.LKEYS.KEYREL.CARG "92-rel"].

nittitre_card-dig := plur-cardinal-word &
  [ STEM < "93" >,
    SYNSEM.LKEYS.KEYREL.CARG "93-rel"].

nittifire_card-dig := plur-cardinal-word &
  [ STEM < "94" >,
    SYNSEM.LKEYS.KEYREL.CARG "94-rel"].

nittifem_card-dig := plur-cardinal-word &
  [ STEM < "95" >,
    SYNSEM.LKEYS.KEYREL.CARG "95-rel"].

nittiseks_card-dig := plur-cardinal-word &
  [ STEM < "96" >,
    SYNSEM.LKEYS.KEYREL.CARG "96-rel"].

nittisju_card-dig := plur-cardinal-word &
  [ STEM < "97" >,
    SYNSEM.LKEYS.KEYREL.CARG "97-rel"].

nittiåtte_card-dig := plur-cardinal-word &
  [ STEM < "98" >,
    SYNSEM.LKEYS.KEYREL.CARG "98-rel"].

nittini_card-dig := plur-cardinal-word &
  [ STEM < "99" >,
    SYNSEM.LKEYS.KEYREL.CARG "99-rel"].

hundre_card-dig := plur-cardinal-word &
  [ STEM < "100" >,
    SYNSEM.LKEYS.KEYREL.CARG "100-rel"].

to-hundre_card-dig := plur-cardinal-word &
  [ STEM < "200" >,
    SYNSEM.LKEYS.KEYREL.CARG "200-rel"].

tre-hundre_card-dig := plur-cardinal-word &
  [ STEM < "300" >,
    SYNSEM.LKEYS.KEYREL.CARG "300-rel"].

fire-hundre_card-dig := plur-cardinal-word &
  [ STEM < "400" >,
    SYNSEM.LKEYS.KEYREL.CARG "400-rel"].

fem-hundre_card-dig := plur-cardinal-word &
  [ STEM < "500" >,
    SYNSEM.LKEYS.KEYREL.CARG "500-rel"].

seks-hundre_card-dig := plur-cardinal-word &
  [ STEM < "600" >,
    SYNSEM.LKEYS.KEYREL.CARG "600-rel"].

syv-hundre_card-dig := plur-cardinal-word &
  [ STEM < "700" >,
    SYNSEM.LKEYS.KEYREL.CARG "700-rel"].

åtte-hundre_card-dig := plur-cardinal-word &
  [ STEM < "800" >,
    SYNSEM.LKEYS.KEYREL.CARG "800-rel"].

ni-hundre_card-dig := plur-cardinal-word &
  [ STEM < "900" >,
    SYNSEM.LKEYS.KEYREL.CARG "900-rel"].



ene_card-weak := sg-weak-cardinal-word &
  [ STEM < "ene" >,
    SYNSEM.LKEYS.KEYREL.CARG "1-rel"].


klokka_det := klokka-word &
  [ STEM < "klokka" >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

klokken_det := klokka-word &
  [ STEM < "klokken" >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

kl_det := klokka-word &
  [ STEM < "kl" >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

kl_period_det := klokka-word &
  [ STEM < "kl", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "clock-time-rel" ].

anno_det := klokka-word &
  [ STEM < "anno" >,
    SYNSEM.LKEYS.KEYREL.PRED "year-number-rel"  ].

; applies in "nr tolv brenner", with 'tolv' as post-head specifier (card-mod-head-initial-indefinite-rule)
nummer_det := klokka-word &
  [ STEM < "nummer" >,
    SYNSEM.LKEYS.KEYREL.PRED "number-in-order-rel"  ].

nr-dot_det := klokka-word &
  [ STEM < "nr", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "number-in-order-rel"  ].

nr_det := klokka-word &
  [ STEM < "nr" >,
    SYNSEM.LKEYS.KEYREL.PRED "number-in-order-rel"  ].

;tidlig_det := klokka-bare-word &
;  [ STEM < "tidlig" >,
;    SYNSEM.LKEYS.KEYREL.PRED "tidlig-rel" ].

; new approach - 'nummer' like indef-card-quantifier-word-sup
; applies in "bygg nr tolv brenner", as a specifier relative to 'tolv' (head-spec-det-rule)
;nummer_param-word := numerical-parameter-word &
;  [ STEM < "nummer" >,
;    SYNSEM.LKEYS.KEYREL.PRED "number-in-order_q_rel"  ].

;nr_param-word := numerical-parameter-word &
;  [ STEM < "nr" >,
;    SYNSEM.LKEYS.KEYREL.PRED "number-in-order_q_rel"  ].

;nr_period_param-word := numerical-parameter-word &
;  [ STEM < "nr." >,
;    SYNSEM.LKEYS.KEYREL.PRED "number-in-order_q_rel"  ].



; ORDINALS

medio_ord_lxm := ordinal-lxm &
  [ STEM < "medio" >,
    SYNSEM.LKEYS.KEYREL.PRED "medio-rel"].

primo_ord_lxm := ordinal-lxm &
  [ STEM < "primo" >,
    SYNSEM.LKEYS.KEYREL.PRED "primo-rel"].

ultimo_ord_lxm := ordinal-lxm &
  [ STEM < "ultimo" >,
    SYNSEM.LKEYS.KEYREL.PRED "ultimo-rel"].

;eneste_ord_lxm := ordinal-lxm &
;  [ STEM < "eneste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "only-rel"].

;neste_ord_lxm := ordinal-lxm &
;  [ STEM < "neste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "next-rel"].

siste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "siste" >,
    SYNSEM.LKEYS.KEYREL.PRED "last-rel"].

annen_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "annen" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg, 
    SYNSEM.LKEYS.KEYREL.PRED "2nd-rel"].

annet_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "annet" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG neutsg, 
    SYNSEM.LKEYS.KEYREL.PRED "2nd-rel"].

anna_ord_lxm := ordinal-lxm &
  [ STEM < "anna" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG fem-sg, 
    SYNSEM.LKEYS.KEYREL.PRED "2nd-rel"].

første_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "første" >,
    SYNSEM.LKEYS.KEYREL.PRED "1st-rel"].

andre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "andre" >,
    SYNSEM.LKEYS.KEYREL.PRED "2nd-rel"].

tredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "3rd-rel"].

fjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "fjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "4th-rel"].

femte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femte" >,
    SYNSEM.LKEYS.KEYREL.PRED "5th-rel"].

sjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "6th-rel"].

syvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "7th-rel"].

sjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "7th-rel"].

åttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "8th-rel"].

niende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "niende" >,
    SYNSEM.LKEYS.KEYREL.PRED "9th-rel"].

tiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "10th-rel"].

ellevte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "ellevte" >,
    SYNSEM.LKEYS.KEYREL.PRED "11.-rel"].

tolvte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tolvte" >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg, 
    SYNSEM.LKEYS.KEYREL.PRED "12.-rel"].

trettende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettende" >,
    SYNSEM.LKEYS.KEYREL.PRED "13.-rel"].

fjortende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "fjortende" >,
    SYNSEM.LKEYS.KEYREL.PRED "14.-rel"].

femtende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtende" >,
    SYNSEM.LKEYS.KEYREL.PRED "15.-rel"].

sekstende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstende" >,
    SYNSEM.LKEYS.KEYREL.PRED "16-rel"].

syttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "17.-rel"].

søttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "søttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "17.-rel"].

attende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "attende" >,
    SYNSEM.LKEYS.KEYREL.PRED "18.-rel"].

nittende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittende" >,
    SYNSEM.LKEYS.KEYREL.PRED "19th-rel"].

tjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "20th-rel"].

tyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "20th-rel"].

tjueførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjueførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "21st-rel"].

enogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "enogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "21th-rel"].

tjueandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjueandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "22nd-rel"].

toogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "toogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "22th-rel"].

tjuetredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuetredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "23rd-rel"].

treogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "treogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "23th-rel"].

tjuefjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuefjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "24th-rel"].

fireogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "fireogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "24th-rel"].

tjuefemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuefemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "25th-rel"].

femogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "25th-rel"].

tjuesjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuesjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "26th-rel"].

seksogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "seksogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "26th-rel"].

tjuesyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuesyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "27th-rel"].

tjuesjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjuesjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "27th-rel"].

syvogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syvogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "27th-rel"].

tjueåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjueåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "28th-rel"].

åtteogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åtteogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "28th-rel"].

tjueniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "tjueniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "29th-rel"].

niogtyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "niogtyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "29th-rel"].

trettiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "30th-rel"].

trettiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "31st-rel"].

trettiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "32nd-rel"].

trettitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "33rd-rel"].

trettifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "34th-rel"].

trettifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "35th-rel"].

trettisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "36th-rel"].

trettisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "37th-rel"].

trettisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "37th-rel"].

trettiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "38th-rel"].

trettiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "trettiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "39th-rel"].

førtiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "40th-rel"].

førtiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "41st-rel"].

førtiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "42nd-rel"].

førtitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "43rd-rel"].

førtifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "44th-rel"].

førtifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "45th-rel"].

førtisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "46th-rel"].

førtisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "47th-rel"].

førtisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "47th-rel"].

førtiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "48th-rel"].

førtiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "førtiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "49th-rel"].

femtiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "50th-rel"].

femtiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "51st-rel"].

femtiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "52nd-rel"].

femtitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "53rd-rel"].

femtifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "54th-rel"].

femtifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "55th-rel"].

femtisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "56th-rel"].

femtisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "57th-rel"].

femtisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "57th-rel"].

femtiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "58th-rel"].

femtiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "femtiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "59th-rel"].

sekstiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "60th-rel"].

sekstiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "61st-rel"].

sekstiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "62nd-rel"].

sekstitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "63rd-rel"].

sekstifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "64th-rel"].

sekstifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "65th-rel"].

sekstisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "66th-rel"].

sekstisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "67th-rel"].

sekstisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "67th-rel"].

sekstiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "68th-rel"].

sekstiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "sekstiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "69th-rel"].

syttiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "70th-rel"].

syttiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "71st-rel"].

syttiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "72nd-rel"].

syttitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "73rd-rel"].

syttifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "74th-rel"].

syttifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "75th-rel"].

syttisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "76th-rel"].

syttisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "77th-rel"].

syttisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "77th-rel"].

syttiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "78th-rel"].

syttiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "syttiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "79th-rel"].

åttiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "80th-rel"].

åttiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "81st-rel"].

åttiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "82nd-rel"].

åttitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "83rd-rel"].

åttifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "84th-rel"].

åttifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "85th-rel"].

åttisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "86th-rel"].

åttisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "87th-rel"].

åttisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "87th-rel"].

åttiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "88th-rel"].

åttiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "åttiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "89th-rel"].

nittiende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittiende" >,
    SYNSEM.LKEYS.KEYREL.PRED "90th-rel"].

nittiførste_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittiførste" >,
    SYNSEM.LKEYS.KEYREL.PRED "91st-rel"].

nittiandre_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittiandre" >,
    SYNSEM.LKEYS.KEYREL.PRED "92nd-rel"].

nittitredje_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittitredje" >,
    SYNSEM.LKEYS.KEYREL.PRED "93rd-rel"].

nittifjerde_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittifjerde" >,
    SYNSEM.LKEYS.KEYREL.PRED "94th-rel"].

nittifemte_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittifemte" >,
    SYNSEM.LKEYS.KEYREL.PRED "95th-rel"].

nittisjette_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittisjette" >,
    SYNSEM.LKEYS.KEYREL.PRED "96th-rel"].

nittisyvende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittisyvende" >,
    SYNSEM.LKEYS.KEYREL.PRED "97th-rel"].

nittisjuende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittisjuende" >,
    SYNSEM.LKEYS.KEYREL.PRED "97th-rel"].

nittiåttende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittiåttende" >,
    SYNSEM.LKEYS.KEYREL.PRED "98th-rel"].

nittiniende_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "nittiniende" >,
    SYNSEM.LKEYS.KEYREL.PRED "99th-rel"].

hundrede_ord_lxm := ordinal-lxm &
  [ INFLECTION nonfstr,
    STEM < "hundrede" >,
    SYNSEM.LKEYS.KEYREL.PRED "100th-rel"].


første-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "1", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "1st-rel"].

andre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "2", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "2nd-rel"].

tredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "3", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "3rd-rel"].

fjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "4", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "4th-rel"].

femte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "5", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "5th-rel"].

sjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "6", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "6th-rel"].

syvende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "7", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "7th-rel"].

åttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "8", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "8th-rel"].

niende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "9", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "9th-rel"].

tiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "10", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "10th-rel"].

ellevte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "11", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "11.-rel"].

tolvte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "12", "." >,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NG masc-sg, 
    SYNSEM.LKEYS.KEYREL.PRED "12.-rel"].

trettende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "13", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "13.-rel"].

fjortende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "14", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "14.-rel"].

femtende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "15", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "15.-rel"].

sekstende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "16", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "16-rel"].

syttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "17", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "17.-rel"].

attende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "18", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "18.-rel"].

nittende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "19", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "19th-rel"].

tjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "20", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "20th-rel"].

;tjuende-dot_ord_lxm := ordinal-lxm &
;  [ INFLECTION nonfstr,
;    STEM < "20", "." >,
;    SYNSEM.LKEYS.KEYREL.PRED "20th-rel"].

tjueførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "21", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "21st-rel"].

tjueandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "22", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "22nd-rel"].

tjuetredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "23", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "23rd-rel"].

tjuefjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "24", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "24th-rel"].

tjuefemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "25", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "25th-rel"].

tjuesjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "26", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "26th-rel"].

tjuesjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "27", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "27th-rel"].

tjueåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "28", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "28th-rel"].

tjueniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "29", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "29th-rel"].

trettiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "30", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "30th-rel"].

trettiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "31", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "31st-rel"].

trettiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "32", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "32nd-rel"].

trettitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "33", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "33rd-rel"].

trettifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "34", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "34th-rel"].

trettifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "35", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "35th-rel"].

trettisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "36", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "36th-rel"].

trettisjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "37", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "37th-rel"].

trettiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "38", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "38th-rel"].

trettiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "39", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "39th-rel"].

førtiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "40", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "40th-rel"].

førtiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "41", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "41st-rel"].

førtiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "42", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "42nd-rel"].

førtitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "43", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "43rd-rel"].

førtifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "44", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "44th-rel"].

førtifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "45", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "45th-rel"].

førtisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "46", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "46th-rel"].

førtisjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "47", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "47th-rel"].

førtiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "48", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "48th-rel"].

førtiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "49", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "49th-rel"].

femtiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "50", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "50th-rel"].

femtiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "51", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "51st-rel"].

femtiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "52", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "52nd-rel"].

femtitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "53", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "53rd-rel"].

femtifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "54", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "54th-rel"].

femtifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "55", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "55th-rel"].

femtisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "56", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "56th-rel"].

femtisjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "57", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "57th-rel"].

femtiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "58", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "58th-rel"].

femtiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "59", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "59th-rel"].

sekstiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "60", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "60th-rel"].

sekstiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "61", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "61st-rel"].

sekstiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "62", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "62nd-rel"].

sekstitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "63", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "63rd-rel"].

sekstifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "64", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "64th-rel"].

sekstifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "65", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "65th-rel"].

sekstisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "66", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "66th-rel"].

sekstisjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "67", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "67th-rel"].

sekstiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "68", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "68th-rel"].

sekstiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "69", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "69th-rel"].

syttiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "70", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "70th-rel"].

syttiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "71", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "71st-rel"].

syttiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "72", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "72nd-rel"].

syttitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "73", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "73rd-rel"].

syttifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "74", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "74th-rel"].

syttifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "75", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "75th-rel"].

syttisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "76", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "76th-rel"].

syttisjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "77", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "77th-rel"].

syttiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "78", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "78th-rel"].

syttiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "79", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "79th-rel"].

åttiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "80", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "80th-rel"].

åttiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "81", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "81st-rel"].

åttiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "82", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "82nd-rel"].

åttitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "83", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "83rd-rel"].

åttifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "84", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "84th-rel"].

åttifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "85", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "85th-rel"].

åttisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "86", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "86th-rel"].

åttisjuende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "87", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "87th-rel"].

åttiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "88", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "88th-rel"].

åttiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "89", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "89th-rel"].

nittiende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "90", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "90th-rel"].

nittiførste-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "91", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "91st-rel"].

nittiandre-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "92", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "92nd-rel"].

nittitredje-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "93", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "93rd-rel"].

nittifjerde-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "94", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "94th-rel"].

nittifemte-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "95", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "95th-rel"].

nittisjette-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "96", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "96th-rel"].

nittisyvende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "97", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "97th-rel"].

nittiåttende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "98", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "98th-rel"].

nittiniende-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "99", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "99th-rel"].

hundrede-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "100", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "100th-rel"].


10-dot_ord_lxm := ordinal-lxm &
  [ INFLECTION adj_fork,
    STEM < "10", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "10th-rel"].

; TODO, as a kind of comparative samme...som, annen...enn, andre...enn
;samme_dem := dem-word &
;    [ STEM < "samme" >,
;      SYNSEM.LKEYS.KEYREL.PRED "_samme_rel" ].

;samme_def-q := def-q-word &
;    [ STEM < "samme" > ].

;180709 samme_adj := freestnding-weak-adj-word &
;180709     [ STEM < "samme" > ].

mer_cmpar-mass3 := cmpar-mass-quantity-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

mer_cmpar-mass := quant-indef-adjcard-sg-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mindre_cmpar-mass := quant-indef-adjcard-sg-word &
 [ STEM < "mindre" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

mer_cmpar-mass2 := quant-indef-adjcard2-sg-word &
 [ STEM < "mer" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mindre_cmpar-mass2 := quant-indef-adjcard2-sg-word &
 [ STEM < "mindre" >,
   SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

flest_superlat-str-count := superlat-count-strong-quantity-word &
  [ STEM < "flest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

flest_superlat-post-count := superlat-count-post-quantity-word &
  [ STEM < "flest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

færrest_superlat-str-count := superlat-count-strong-quantity-word &
  [ STEM < "færrest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

mest_superlat-str-mass := superlat-mass-strong-quantity-word &
  [ STEM < "mest" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

minst_superlat-str-mass := superlat-mass-strong-quantity-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].

fleste_superlat-wk-count := superlat-count-weak-quantity-word &
  [ STEM < "fleste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

færreste_superlat-wk-count := superlat-count-weak-quantity-word &
  [ STEM < "færreste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

meste_superlat-wk-mass := superlat-mass-weak-quantity-word &
  [ STEM < "meste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

minste_superlat-wk-mass := superlat-mass-weak-quantity-word &
  [ STEM < "minste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].

; seem not needed. and semantics wrong anyway
;fleste_superlat-cum-part-count := superlat-cum-part-count-quantity-word &
;  [ STEM < "fleste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mange_rel"].

;færreste_superlat-cum-part-count := superlat-cum-part-count-quantity-word &
;  [ STEM < "færreste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_få_rel"].

;meste_superlat-cum-part-mass := superlat-cum-part-mass-quantity-word &
;  [ STEM < "meste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mye_rel"].

;minste_superlat-cum-part-mass := superlat-cum-part-mass-quantity-word &
;  [ STEM < "minste" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_lite_rel"].



ingen_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ingen_q_rel" ].

ingen_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "ingen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ingen_q_rel" ].

intet_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "intet" >,
    SYNSEM.LKEYS.KEYREL.PRED "_intet_q_rel" ].

mang-en_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "mang","en" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mang-en_q_rel" ].

mangt-et_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "mangt","et" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mangt-et_q_rel" ].

mangt_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "mangt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mangt_q_rel" ].

; should really be an 'np'-item, but provisionally:
ingenting_indef-quant-sg := quant-indef-card-mascsg-word &
  [ STEM < "ingenting" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ingenting_q_rel" ].

hver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "hver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hver-univ_q_rel" ].

enhver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "enhver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_enhver-univ_q_rel" ].

annenhver_indef-quant-sg := quant-indef-part-masc-or-fem-sg-word &
  [ STEM < "annenhver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_annenhver-univ_q_rel" ].

hvert_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "hvert" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvert-univ_q_rel" ].

noen_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "noen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noen_q_rel"].

somme_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "somme" >,
    SYNSEM.LKEYS.KEYREL.PRED "_somme_q_rel"].

noe_indef-quant-sg := quant-indef-ncard-sg-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel"].

somt_indef-quant-sg := quant-indef-ncard-sg-word &
  [ STEM < "somt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_somt_q_rel"].

;to enable "vil du ha noe å spise" - better for "den er noe bedre" (= litt)TODO
noe_degcmpar := degreecmpar-spec-word &
  [ STEM < "noe" >,
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel"].

enkelte_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "enkelte" >,
    SYNSEM.LKEYS.KEYREL.PRED "_enkelte_q_rel"].

mange_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange_q_rel"].

mye_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "mye" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

ørten_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "ørten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ørten_q_rel"].

få_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "få" >,
    SYNSEM.LKEYS.KEYREL.PRED "_få_q_rel"].

flere_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "flere" >,
    SYNSEM.LKEYS.KEYREL.PRED "_flere_q_rel"].

flere_indef-cmpar-quant-pl := quant-indef-cmpar-card-pl-word &
  [ STEM < "flere" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_flere_q_rel"].

færre_indef-cmpar-quant-pl := quant-indef-cmpar-card-pl-word &
  [ STEM < "færre" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE comparative],
   SYNSEM.LKEYS.KEYREL.PRED "_færre_q_rel"].

; "litt vin"
litt_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "litt" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

noe_indef-quant2-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "noe" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel" ].
;,why on earth?
;    SYNSEM.LOCAL.CAT.VAL.SPEC < [LOCAL.CAT.HEAD.ACCUSATIVE +]>].

; "litt større/flere"
litt_degcmpar := degreecmpar-spec-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt-diff-amount_rel"].

; "litt større/flere"
enda_degcmpar := degreecmpar-spec-word &
  [ STEM < "enda" >,
    SYNSEM.LKEYS.KEYREL.PRED "_enda-diff-amount_rel"].

; "litt stor"
litt_degrpos := degreepos-spec-word &
  [ STEM < "litt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

lite_degrpos := degreepos-spec-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_litt_q_rel"].

aldeles_degrpos := degreepos-spec-word &
  [ STEM < "aldeles" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aldeles_q_rel"].

tett_degrpos := degreepos-spec-word &
  [ STEM < "tett" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tett_q_rel"].

; "ekstra stor"
ekstra_degrpos := degreepos-spec-word &
  [ STEM < "ekstra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ekstra_q_rel"].

; "svært mye", "hvor mye"
mye_modble := quant-indef-adjcard-sg-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

mye_modble-abs := quant-indef-adjcard-sg-abs-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

noe_modble-abs := quant-indef-adjcard-sg-abs-word &
  [ STEM < "noe" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_noe_q_rel"].

; "mye vin"
mye_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye_q_rel"].

;; adv, pos i norsource: []
bitte-lite-grann_indef-quant-sg := quant-indef-adjcard2-sg-word & 
 [ STEM < "bitte", "lite", "grann" >, 
   SYNSEM.LKEYS.KEYREL.PRED "_bitte-lite-grann_adv_rel" ].


; "mye større/flere"
; with than-clause
mye_degcmpar := degreecmpar-spec-word &
  [ STEM < "mye" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_mye-diff-amount_rel"].

jo_degcmpar := degreecmpar-spec-word &
  [ STEM < "jo" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LOCAL.CONT.HOOK comp-hook & [INDEX [ WH + ]],
    SYNSEM.LKEYS.KEYREL.PRED "_correl-diff-amount_rel"].

dess_degcmpar := degreecmpar-spec-word &
  [ STEM < "dess" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_correl-diff-amount_rel"].

desto_degcmpar := degreecmpar-spec-word &
  [ STEM < "desto" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_correl-diff-amount_rel"].

; LH060513: with no than-clause. so far only for 'mye' - see norsk.tdl for comment
;LH230713 - seems little of use, so comment out
;mye_degcmpar-abs := degreecmpar-spec-word-2 &
;  [ STEM < "mye" >,
;    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
;    SYNSEM.LKEYS.KEYREL.PRED "_large-diff-amount_rel"].

; "mange flere"
mange_degcmpar := degreecmpar-spec-word &
  [ STEM < "mange" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mange-diff-amount_rel",
    SYNSEM.LOCAL.CAT.VAL [ SPEC < [LOCAL.CONT.HOOK.INDEX.PNG.NG pl ] >],
    SYNSEM.LOCAL.CAT.VAL [ SPEC < [LOCAL.CAT.HEAD adj-quant & [KEYS.KEY adjquant-pre]]>]].

; "meget større"
meget_degcmpar := degreecmpar-spec-word &
  [ STEM < "meget" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_meget-diff-amount_rel"].

; "meget stor"
meget_degpos := degreepos-spec-word &
  [ STEM < "meget" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_meget_q_rel"].

veldig_degpos := degreepos-spec-word &
  [ STEM < "veldig" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_veldig_q_rel"].

særdeles_degpos := degreepos-spec-word &
  [ STEM < "særdeles" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_særdeles_q_rel"].

altfor_degpos := degreepos-spec-word &
  [ STEM < "altfor" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_altfor_q_rel"].

; "svært stor", "svært mange"
svært_degpos := degreepos-spec-word &
  [ STEM < "svært" >,
    SYNSEM.LOCAL.CAT.HEAD [DEGREE positive],
    SYNSEM.LKEYS.KEYREL.PRED "_svært_q_rel"].

; "ganske stor"
ganske_degpos := degreepos-spec-word &
  [ STEM < "ganske" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ganske_q_rel"].

; "så stor"
så_degpos := degreepos-spec-word &
  [ STEM < "så" >,
    SYNSEM.LKEYS.KEYREL.PRED "_så_q_rel"].

nokså_degpos := degreepos-spec-word &
  [ STEM < "nokså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nokså_q_rel"].

; "likså stor som"
likså_degpos := degreepos-spec-word &
  [ STEM < "likså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_likså_q_rel"].

; "likeså stor som"
likeså_degpos := degreepos-spec-word &
  [ STEM < "likeså" >,
    SYNSEM.LKEYS.KEYREL.PRED "_likeså_q_rel"].

; "like stor som"
like_degpos := degreepos-spec-word &
  [ STEM < "like" >,
    SYNSEM.LKEYS.KEYREL.PRED "_like_q_rel"].

; "alt i alt vellykket"
alt-i-alt_degpos := degreepos-spec-word &
  [ STEM < "alt", "i", "alt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alt-i-alt_q_rel"].

; "tilstrekkelig stor"
tilstrekkelig_degpos := degreepos-spec-word &
  [ STEM < "tilstrekkelig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tilstrekkelig_q_rel"].

; "hvor stor"
hvor_wh-degwh := degreewh-spec-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-mye_rel"].

; "hvor stor" - notausweg für 'hvor stor er Ola', ohne '?'
hvor_wh-degpos := degreepos-spec-word &
  [ STEM < "hvor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvor-mye_rel"].

;;hvor_wh-degpos := wh-degrpos-spec-word &
;  [ STEM < "hvor" >].

;hvor-mye_wh-degcmpar := wh-sg-degreecmpar-spec-word &
;  [ STEM < "hvor", "mye" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_which-diff-amount_c_rel"].

;hvor-mange_wh-degcmpar := wh-pl-degreecmpar-spec-word &
;  [ STEM < "hvor", "mange" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_which-diff-amount_c_rel"].

; "*nok stor, stor nok"
nok_degpos := degreepos-post-spec-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_q_rel"].

; "langt større"
langt_degcmpar := degreecmpar-spec-word &
  [ STEM < "langt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_langt-diff-amount_c_rel"].

; "atskillig større"
atskillig_degcmpar := degreecmpar-spec-word &
  [ STEM < "atskillig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_atskillig-diff-amount_a_rel"].

; "aller størst"
aller_degcmpar := degreesup-spec-word &
  [ STEM < "aller" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aller_c_rel"].

; "aller størst"
helt_degcmpar := degreesup-spec-word &
  [ STEM < "helt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_helt_c_rel"].

; "nesten fem"
nesten_cardspec := cardspec-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nesten_c_rel"].
     
; "bare fem"
bare_cardspec := cardspec-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].

bare_indefspec := indefspec-word &
  [ STEM < "bare" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bare_c_rel"].

kun_cardspec := cardspec-word &
  [ STEM < "kun" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kun_c_rel"].

kun_indefspec := indefspec-word &
  [ STEM < "kun" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kun_c_rel"].


nesten_qualifadv := qualifadv-word &
  [ STEM < "nesten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nesten_c_rel"].

omtrent_cardspec := cardspec-word &
  [ STEM < "omtrent" >,
    SYNSEM.LKEYS.KEYREL.PRED "_omtrent_c_rel"].
minst_cardspec := cardspec-word &
  [ STEM < "minst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_minst_c_rel"].
anslagsvis_cardspec := cardspec-word &
  [ STEM < "anslagsvis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_anslagsvis_c_rel"].
nøyaktig_cardspec := cardspec-word &
  [ STEM < "nøyaktig" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nøyaktig_c_rel"].
presis_cardspec := cardspec-word &
  [ STEM < "presis" >,
    SYNSEM.LKEYS.KEYREL.PRED "_presis_c_rel"].
halv_cardspec := cardspec-word &
  [ STEM < "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_halv_c_rel"].
kvart-på_cardspec := cardspec-word &
  [ STEM < "kvart", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kvart-på_c_rel"].
kvart-over_cardspec := cardspec-word &
  [ STEM < "kvart", "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kvart-over_c_rel"].
fem-på_cardspec := cardspec-word &
  [ STEM < "fem", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-på_c_rel"].
ti-på_cardspec := cardspec-word &
  [ STEM < "ti", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-på_c_rel"].
fem-på-halv_cardspec := cardspec-word &
  [ STEM < "fem", "på", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-på_c_rel"].
ti-på-halv_cardspec := cardspec-word &
  [ STEM < "ti", "på", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-på_c_rel"].
tjue-på_cardspec := cardspec-word &
  [ STEM < "tjue", "på" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tjue-på_c_rel"].
fem-over_cardspec := cardspec-word &
  [ STEM < "fem", "over">,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-over_c_rel"].
ti-over_cardspec := cardspec-word &
  [ STEM < "ti", "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-over_c_rel"].
fem-over-halv_cardspec := cardspec-word &
  [ STEM < "fem", "over", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fem-over_c_rel"].
ti-over-halv_cardspec := cardspec-word &
  [ STEM < "ti", "over", "halv" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ti-over_c_rel"].
tjue-over_cardspec := cardspec-word &
  [ STEM < "tjue", "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tjue-over_c_rel"].
ca-dot_cardspec := cardspec-word &
  [ STEM < "ca", "." >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
ca_cardspec := cardspec-word &
  [ STEM < "ca" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
cirka_cardspec := cardspec-word &
  [ STEM < "cirka" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
omlag_cardspec := cardspec-word &
  [ STEM < "omlag" >,
    SYNSEM.LKEYS.KEYREL.PRED "_omlag_c_rel"].
sirka_cardspec := cardspec-word &
  [ STEM < "sirka" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cirka_c_rel"].
over_cardspec := cardspec-word &
  [ STEM < "over" >,
    SYNSEM.LKEYS.KEYREL.PRED "_over_c_rel"].

høyst_cardspec := cardspec-word &
  [ STEM < "høyst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_høyst_c_rel"].

max_cardspec := cardspec-word &
  [ STEM < "max" >,
    SYNSEM.LKEYS.KEYREL.PRED "_max_c_rel"].

minimum_cardspec := cardspec-word &
  [ STEM < "minimum" >,
    SYNSEM.LKEYS.KEYREL.PRED "_minimum_c_rel"].



bortimot_cardspec := cardspec-word &
  [ STEM < "bortimot" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bortimot_c_rel"].
langtfra_cardspec := cardspec-word &
  [ STEM < "langtfra" >,
    SYNSEM.LKEYS.KEYREL.PRED "_langtfra_c_rel"].

selv_focqualadv := focqualifadv-word &
  [ STEM < "selv" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY selv-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-selv_c_rel"].
bare_focqualadv := focqualifadv-word &
  [ STEM < "bare" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY bare-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-bare_c_rel"].
kun_focqualadv := focqualifadv-word &
  [ STEM < "kun" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY kun-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-kun_c_rel"].
til-og-med_focqualadv := focqualifadv-word &
  [ STEM < "til", "og", "med" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY til-og-med-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-til-og-med_c_rel"].
; real enough, but not good for parsewood
også_focqualadv := focqualifadv-word &
  [ STEM < "også" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY også-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-også_c_rel"].

eksempelvis_focqualadv := focqualifadv-word &
  [ STEM < "eksempelvis" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY eksempelvis-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-eksempelvis_adv_rel"].

for-eksempel-dot_focqualadv := focqualifadv-word &
  [ STEM < "f", ".", "eks">,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-for-eksempel_adv_rel"].

for-eksempel-dot-dot_focqualadv := focqualifadv-word &
  [ STEM < "f", ".", "eks", "." >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-for-eksempel_adv_rel"].

for-eksempel_focqualadv := focqualifadv-word &
  [ STEM < "for", "eksempel" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY for-eksempel-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-for-eksempel_adv_rel"].

nettopp_focqualadv := focqualifadv-word &
  [ STEM < "nettopp" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY nettopp-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-nettopp_adv_rel"].

akkurat_focqualadv := focqualifadv-word &
  [ STEM < "akkurat" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY akkurat-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-akkurat_adv_rel"].

allerede_focqualadv := focqualifadv-word &
  [ STEM < "allerede" >,
    SYNSEM.LOCAL.CAT.HEAD.KEYS.KEY allerede-k,
    SYNSEM.LKEYS.KEYREL.PRED "_focal-allerede_adv_rel"].

; "hvor lite"
lite_modble := quant-indef-adjcard-sg-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

; "lite vin renner"
lite__indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "lite" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lite_q_rel"].

; "nok vin"
nok_indef-quant-sg := quant-indef-adjcard2-sg-word &
  [ STEM < "nok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nok_q_rel"].

; for "alle gutter"
alle_indef-quant-univ-pl := quant-indef-card-univ-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alle-univ_q_rel"].

all_indef-quant-sg := quant-indef-nonpart-masc-or-fem-sg-word &
  [ STEM < "all" >,
    SYNSEM.LKEYS.KEYREL.PRED "_all-univ_q_rel"].

alt_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alt-univ_q_rel"].

allting_indef-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "allting" >,
    SYNSEM.LKEYS.KEYREL.PRED "_allting-univ_q_rel"].

hva_som_helst-quant-sg := quant-indef-card-neutsg-word &
  [ STEM < "hva", "som", "helst" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hva-som-helst_q_rel"].

begge_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_begge_q_rel"].

begge_indef-quant-univ-pl := quant-indef-card-univ-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.KEYREL.PRED "_begge_q_rel"].

samtlige_indef-quant-pl := quant-indef-card-pl-word &
  [ STEM < "samtlige" >,
    SYNSEM.LKEYS.KEYREL.PRED "_samtlige_q_rel"].


hvilke_interr-quant := interrog-quant-pl-word &
  [ STEM < "hvilke" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvilke_pl_q_rel"].

hvilken_interr-quant := interrog-quant-masc-or-fem-sg-word &
  [ STEM < "hvilken" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvilken_commsg_q_rel" ].

hvilket_interr-quant := interrog-quant-neutsg-word &
  [ STEM < "hvilket" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hvilket_neutsg_q_rel" ].


; in cooperation with head-quant-comp-phrase, this word category
; applies uniquely to "alle" and "begge" preceding a definite N-bar
alle_defquant-pl :=  univquant1-part-pl-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_alle-univ_q_rel"].

all_defquant-sg :=  univquant1-part-masc-or-fem-sg-word &
  [ STEM < "all" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_all-univ_q_rel"].

hele_defquant-sg :=  univquant1-part-sg-word &
  [ STEM < "hele" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hele-univ_q_rel"].

alt_defquant-sg :=  univquant1-part-neutsg-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_alt-univ_q_rel" ].

begge_defquant-pl := univquant1-part-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_begge_q_rel" ].


; in cooperation with head-quant-gen-comp-phrase, this word category
; applies uniquely to "alle" and "begge" preceding a genitive
all_defquant-sg-poss :=  univquant2-part-masc-or-fem-sg-word &
  [ STEM < "all" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_all-univ_q_rel"].

hele_defquant-sg-poss :=  univquant2-part-sg-word &
  [ STEM < "hele" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_hele-univ_q_rel"].

alt_defquant-sg-poss :=  univquant2-part-neutsg-word &
  [ STEM < "alt" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_alt-univ_q_rel"].

alle_defquant-pl-poss :=  univquant2-part-pl-word &
  [ STEM < "alle" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_alle-univ_q_rel"].

begge_defquant-pl-poss := univquant2-part-pl-word &
  [ STEM < "begge" >,
    SYNSEM.LKEYS.ALTKEYREL.PRED "_begge_q_rel"].

;;;;;;

ja_interj := interjection-word &
  [ STEM < "ja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ja_rel"].

jo_interj := interjection-word &
  [ STEM < "jo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jo_rel"].

nåja_interj := interjection-word &
  [ STEM < "nåja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nåja_rel"].

unnskyld_interj := interjection-word &
  [ STEM < "unnskyld" >,
    SYNSEM.LKEYS.KEYREL.PRED "_unnskyld_rel"].

velkommen_interj := interjection-word &
  [ STEM < "velkommen" >,
    SYNSEM.LKEYS.KEYREL.PRED "_velkommen_rel"].

et-øyeblikk_interj := interjection-word &
  [ STEM < "et", "øyeblikk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_et-øyeblikk_rel"].

nå-ja_interj := interjection-word &
  [ STEM < "nå", "ja" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nå-ja_rel"].

;god-tur_interj := interjection-word &
;  [ STEM < "god", "tur" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_god-tur_rel"].

;takk_interj := interjection-word &
;  [ STEM < "takk" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_takk_rel"].

takk-skal-du-ha_interj := interjection-word &
  [ STEM < "takk", "skal", "du", "ha" >,
    SYNSEM.LKEYS.KEYREL.PRED "_takk-skal-du-ha_rel"].

;flott_interj := interjection-word &
;  [ STEM < "flott" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_flott_rel"].

;bra_interj := interjection-word &
;  [ STEM < "bra" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_bra_rel"].

;fint_interj := interjection-word &
;  [ STEM < "fint" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_fint_rel"].

;godt_interj := interjection-word &
;  [ STEM < "godt" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_godt_rel"].

hm_interj := interjection-word &
  [ STEM < "hm" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hm_rel"].

forresten_interj := interjection-word &
  [ STEM < "forresten" >,
    SYNSEM.LKEYS.KEYREL.PRED "_forresten_rel"].

;tusen-takk_interj := interjection-word &
;  [ STEM < "tusen", "takk" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_tusen-takk_rel"].

;mange-takk_interj := interjection-word &
;  [ STEM < "mange", "takk" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_mange-takk_rel"].

nei-takk_interj := interjection-word &
  [ STEM < "nei", "takk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nei-takk_rel"].

ja-takk_interj := interjection-word &
  [ STEM < "ja", "takk" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ja-takk_rel"].

nei_interj := interjection-word &
  [ STEM < "nei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nei_rel"].

vel_interj := interjection-word &
  [ STEM < "vel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vel_rel"].

hei_interj := interjection-word &
  [ STEM < "hei" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hei_rel"].

greit_interj := interjection-word &
  [ STEM < "greit" >,
    SYNSEM.LKEYS.KEYREL.PRED "_greit_rel"].

jøss_interj := interjection-word &
  [ STEM < "jøss" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jøss_rel"].

jøje-meg_interj := interjection-word &
  [ STEM < "jøje", "meg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jøje-meg_rel"].

hør-her_interj := interjection-word &
  [ STEM < "hør", "her" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hør-her_rel"].

hør_interj := interjection-word &
  [ STEM < "hør" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hør_rel"].

kanskje_interj := interjection-word &
  [ STEM < "kanskje" >,
    SYNSEM.LKEYS.KEYREL.PRED "_kanskje_rel"].

;too much interference with infinitive
;å_interj := interjection-word &
;  [ STEM < "å" >,
;    SYNSEM.LKEYS.KEYREL.PRED "_å_rel"].

vent_interj := interjection-word &
  [ STEM < "vent" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vent_rel"].

oj_interj := interjection-word &
  [ STEM < "oj" >,
    SYNSEM.LKEYS.KEYREL.PRED "_oj_rel"].

ok_interj := interjection-word &
  [ STEM < "ok" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ok_rel"].

okay_interj := interjection-word &
  [ STEM < "okay" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ok_rel"].

si-meg_interj := interjection-word &
  [ STEM < "si", "meg" >,
    SYNSEM.LKEYS.KEYREL.PRED "_si-meg_rel"].

dullan-deisi_interj := interjection-word &
  [ STEM < "dullan", "deisi" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dullan-deisi_rel"].

ja_menn_interj := interjection-word &
 [ STEM < "ja", "menn" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-menn_rel" ].

ja_så_menn_interj := interjection-word &
 [ STEM < "ja", "så", "menn" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-så-menn_rel" ].

jo_så_menn_interj := interjection-word &
 [ STEM < "jo", "så", "menn" >,
   SYNSEM.LKEYS.KEYREL.PRED "jo-så-menn_rel" ].

ja_vel_interj := interjection-word &
 [ STEM < "ja", "vel" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-vel_rel" ].

ja_visst_interj := interjection-word &
 [ STEM < "ja", "visst" >,
   SYNSEM.LKEYS.KEYREL.PRED "ja-visst_rel" ].

jo_visst_interj := interjection-word &
 [ STEM < "jo", "visst" >,
   SYNSEM.LKEYS.KEYREL.PRED "jo-visst_rel" ].

lykke-til_interj := interjection-word &
 [ STEM < "lykke", "til" >,
   SYNSEM.LKEYS.KEYREL.PRED "lykke-til_rel" ].

;men_interj := interjection-word &
; [ STEM < "men" >,
;   SYNSEM.LKEYS.KEYREL.PRED "men_rel" ].

; these are in the way...
;så_interj := interjection-word &
; [ STEM < "så" >,
;   SYNSEM.LKEYS.KEYREL.PRED "så_rel" ].

;også_interj := interjection-word &
; [ STEM < "også" >,
;   SYNSEM.LKEYS.KEYREL.PRED "også_rel" ].

;og_interj := interjection-word &
; [ STEM < "og" >,
;   SYNSEM.LKEYS.KEYREL.PRED "og_rel" ].



;has semantics according to the environment
;for now Jan2021 put on wait
;petro_cameleon-gapping_vlxm := gapping-serial-verb-lexeme &
;  [ INFLECTION nonfstr-strong,
;      STEM < "petro" > ].

;has semantics according to the environment - dublet
;og_cameleon-gapping_vlxm := gapping-serial-verb-lexeme &
;  [ INFLECTION nonfstr-strong,
;      STEM < "og" > ].

;petko_cameleon-gapping_conj := gapping-conjunction &
;  [ STEM < "petko" > ].

og_gapping_conj := gapping-conjunction &
  [ STEM < "og" > ].


